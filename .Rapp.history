250*.25
42*2 + 17*2
118/19
21/6.2
59.5*.75
59.5*.5 + 59.5
71/12
597/80
597/8
432/8
15*8 + 9*3
?seq_len
7.25/3
7.25/4
for(i in 0:9){x=cos(2*pi/10*i);y=x+1;z=(y-2)*22;pie(c(y,8-y),col=c(0,7),init.angl=135-z,bo=F,la=NA)}
install.packages("ProjectTemplate")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("data.table")
install.packages("corrgram")
install.packages("survival")
install.packages("shapefiles")
install.packages("rgdal")
install.packages("PBSmapping")
install.packages("sp")
install.packages("gdistance")
install.packages("chron")
install.packages("unmarked")
install.packages("lme4")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")#
require(rgeos)
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
library(rgdal)
install.packages("http://cran.r-project.org/src/contrib/rgdal_0.9-1.tar.gz", repos = NULL, type="source", configure.args = "--with-gdal-config=/Library/Frameworks/GDAL.framework/Versions/1.10/unix/bin/gdal-config --with-proj-include=/Library/Frameworks/PROJ.framework/unix/include --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib")
18/1.618
189+114
library(lubridate)
library(magrittr)
seasons <- data.frame(#
	   SE = as.POSIXct(c("2009-3-20", "2010-3-20", "2011-3-20", "2012-3-20", #
            "2013-3-20", "2014-3-20"), format="%Y-%m-%d"),#
	   SS = as.POSIXct(c("2009-6-21", "2010-6-21", "2011-6-21", "2012-6-20",#
            "2013-6-20", "2014-6-20"), format="%Y-%m-%d"),#
	   FE = as.POSIXct(c("2009-9-22", "2010-9-23", "2011-9-23", "2012-9-22",#
            "2013-9-22", "2014-9-22"), format="%Y-%m-%d"),#
	   WS = as.POSIXct(c("2009-12-21", "2010-12-21", "2011-12-22", "2012-12-21", #
            "2013-12-21", "2014-12-21"), format="%Y-%m-%d")#
    )#
#
    assignSeason <- function(dat, SeasonStarts=seasons) {#
	    dat %<>% mutate(#
		    Season = lapply(Date,#
				function(x) {#
					findInterval(#
						x, #
						SeasonStarts[which(year(x)==year(SeasonStarts$WS)), ]#
					)#
				}#
			) %>% unlist	#
		)#
	    dat[which(dat$Season==0 | dat$Season==4), ]$Season 	<- "Winter"#
	    dat[which(dat$Season==1), ]$Season 					<- "Spring"#
	    dat[which(dat$Season==2), ]$Season 					<- "Summer"#
	    dat[which(dat$Season==3), ]$Season 					<- "Fall"#
	    return(dat)#
    }
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(dplyr)
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(devtoolks)
library(devtools)
?install_github
devtools::install_github("ksauby/ACSampling", auth_token="2ab30a602e52fae481f4249cc25e892c0a9ccfc7", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install_github("ksauby/ACSampling", auth_token="2794c3f10db92f525181a0b1f6c19064fe3a2ef3", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
library(devtools)
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
install.packages("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
??limit
37-13
24/37
37-13
26/37
25/37
23/37
29/37
30/37
22/37
30/37
29/37
28/37
27/37
35/37
30/37
29/37
26/37
26/37 - .6757
28/37
30/37
29/37
37-12
25/37
219*.8
219*.8 - 17
26/3
17/900
42/900
49/900
29/40
1/25
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis')
library(ProjectTemplate)#
#
# when working on a Windows computer#
# setwd("C:/Users/KSauby/Dropbox/gradschool/Research/Projects/sampling")#
#
# load project#
load.project()
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys#
#
# --------------------------------------------------------------------------- ##
# --------------------------------------------------------------------------- ##
Plant_Info %<>% processPlantInfo(Plot_Info)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info)#
Plant_Surveys %<>% processPlantSurveysafterMergewPlantInfo#
Plant_Surveys_by_Plant <- Plant_Surveys %>% processSurveysMergedbyPlant#
# create Fecundity and RGR dataset - only measured size during the spring and summer#
Plant_Surveys_by_Year <- Plant_Surveys_by_Plant %>% #
	group_by(SamplingYear, PlantID) %>%#
	summarise(#
		Species = Species[1],#
		Network = Network[1],#
		Island = Island[1],#
		ReproductiveMode = ReproductiveMode[1],#
		Date = min(Date),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		Fruit_Flowers_t = max(Fruit_Flowers_t, na.rm=T),#
		FruitFlowerPres_t = max(FruitFlowerPres_t, na.rm=T),#
		Size_t = max(Size_t, na.rm=T),#
		Height_t = max(Height_t, na.rm=T),#
		Fruit_t = max(Fruit_t, na.rm=T),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		CA_t = max(CA_t, na.rm=T),#
		ME_t = max(ME_t, na.rm=T),#
		DA_t = max(DA_t, na.rm=T),#
		CH_t = max(CH_t, na.rm=T),#
		Old_Moth_Evidence_t = max(Old_Moth_Evidence_t, na.rm=T),#
		Dead = max(Dead, na.rm=T),#
		Missing = max(Missing, na.rm=T)#
	) %>% #
	mutate(PrevSamplingYear = SamplingYear - 1) %>%#
	# lag variables#
#	calculateSizeLags(#
#		arrange.variable="Date", #
#		grouping.variable="PlantID"#
#	) %>%#
#	calculateDateLags %>%#
	createNewInsectVariables(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
#	calculateInsectLags(#
#		arrange.variable="Date", #
#		grouping.variable="PlantID"#
#	) %>%#
	as.data.frame #%>%#
#	calculateRGR ## this leads to a few values with PlantID = NA#
# --------------------------------------------------------------------------- ##
########################## ERROR MESSAGE#
	# check for PlantID = NA#
	dups <- Plant_Surveys_by_Year %>% #
		filter(is.na(PlantID))#
#
	if (dim(dups)[1] > 0) {#
			stop("NA values for PlantID.")#
	}#
	# should not be any non-NA values for RGR for SamplingYear 2012#
	#dups <- Plant_Surveys_by_Year %>% #
	#	filter(SamplingYear==2012) %>%#
	#	filter(!is.na(RGR_Height))#
#
	#if (dim(dups)[1] > 0) {#
	#		stop("Non-NA values for RGR for first Sampling Year.")#
	#}#
# --------------------------------------------------------------------------- ##
#Plant_Surveys_by_Year$Size_t_1 %<>% as.numeric#
Plant_Surveys_by_Year[,c(#
	"Old_Moth_Evidence_t",#
	"NatInsect_t",#
	"Insect_t",#
	"DA_t",#
	"CH_t",#
	"ME_t",#
	"CA_t",                #
	"Size_t",#
	"FruitPres_t",#
	"FruitFlowerPres_t"#,#
	#"Fruit_t",#
	#"Size_t_1",#
	#"DaysSincePrevSurvey",#
	#"DaysSinceStart",#
	#"CA_t_1",#
	#"ME_t_1",#
	#"CH_t_1",#
	#"DA_t_1",#
	#"Insect_t_1",#
	#"NatInsect_t_1",#
	#"Old_Moth_Evidence_t_1"#
)] %<>% apply(., 2, as.integer)#
Plant_Surveys_by_Year[,c(#
	"Height_t"#,#
	#"Height_t_1",#
	#"RGR_Height",#
	#"RGR_Height365",#
	#"RGR_Size",#
	#"RGR_Size365"#
)] %<>% as.numeric #apply(., 2, as.numeric)#
Plant_Surveys_by_Year$PlantID %<>% as.factor	#
Plant_Surveys_by_Year$SamplingYear %<>% as.factor#
Plant_Surveys_by_Year$Species %<>% as.factor#
Plant_Surveys_by_Year$Network %<>% as.factor#
Plant_Surveys_by_Year$Island %<>% as.factor#
Plant_Surveys_by_Year$Year <- year(Plant_Surveys_by_Year$Date)#
#Plant_Surveys_by_Year$PrevYear <- year(Plant_Surveys_by_Year$Date) - 1#
#
# Stage#
Plant_Surveys_by_Year$Stage <- Plant_Surveys_by_Year$ReproductiveMode#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Stage!="Seedling"), ]$Stage <- "Adult"#
Plant_Surveys_by_Year[which(is.na(Plant_Surveys_by_Year$Stage)), ]$Stage <- "Adult"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Dead==1), ]$Stage <- "Dead"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Missing==1), ]$Stage <- "Dead"#
#Plant_Surveys_by_Year$ReproductiveMode %<>% as.factor#
#Plant_Surveys_by_Year$Stage %<>% as.factor#
#
Plant_Surveys_analysis <- Plant_Surveys_by_Year %>% 	#
	as.data.frame %>%#
 	droplevels %>% #
 	#mutate(Ln_Size_t_1_st = arm::rescale(log(Size_t_1))) %>%#
 	dplyr::select(#
 		Species,#
		PlantID,#
		Stage,#
 		Date,#
		Year,#
		#PrevYear,#
 		Network,#
 		Island,#
		Size_t,#
 		CA_t,#
		ME_t,#
		Old_Moth_Evidence_t,#
		#Size_t_1,#
 		#Height_t_1,#
 		#CA_t_1,#
 		#ME_t_1,#
 		#Old_Moth_Evidence_t_1,#
 		#RGR_Size,#
 		#RGR_Height,#
 		#Ln_Size_t_1_st,#
 		#FruitPres_t,#
 		#Fruit_t,#
		Fruit_Flowers_t#
 	) %>%#
 	.[complete.cases(.),]#
Original_Plant_Data %<>% processOriginalPlantData#
#
Plant_Surveys_stricta <- Plant_Surveys_analysis %>% 	filter(Species=="Opuntia stricta")#
Plant_Surveys_stricta %>% write.csv("/Users/KSauby/Documents/Projects/GTMNERR_analysis/data/Plant_Surveys_stricta.csv")#
#
Plant_Surveys_pusilla <- Plant_Surveys_analysis %>% #
	filter(Species=="Opuntia pusilla")#
Plant_Surveys_pusilla %>% write.csv("/Users/KSauby/Documents/Projects/GTMNERR_analysis/data/Plant_Surveys_pusilla.csv")#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling/data')#
# write.csv(Plant_Surveys_stricta_analysis, "Plant_Surveys_stricta.csv")#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_stricta")#
################################################################################
# Save modified timeseries dataset - just pusilla#
################################################################################
# Plant_Surveys_pusilla =	Plant_Surveys_by_Year %>% #
# 	filter(Species=="Opuntia pusilla")#
# Plant_Surveys_pusilla$Species %<>% droplevels#
#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_pusilla")
str(Plant_Info)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info <- Plot_Info %>%#
		select(#
			Island, #
			Tag_Number, #
			Cluster, #
			Cluster2, #
			Network, #
			Sampling, #
			SurveyOrder#
		) %>%#
		merge(Plant_Info, by = "Tag_Number", all.y=TRUE) %>%#
		as.data.table %>%#
		setnames("HostSpecies", "Species") %>%#
		as.data.frame#
	#---------------------------------------------------------- FORMAT PLANT IDs#
	Plant_Info %<>% Format_PlantIDs_Function
Plant_Info <- Plot_Info %>%#
		dplyr::select(#
			Island, #
			Tag_Number, #
			Cluster, #
			Cluster2, #
			Network, #
			Sampling, #
			SurveyOrder#
		) %>%#
		merge(Plant_Info, by = "Tag_Number", all.y=TRUE) %>%#
		as.data.table %>%#
		setnames("HostSpecies", "Species") %>%#
		as.data.frame#
	#---------------------------------------------------------- FORMAT PLANT IDs#
	Plant_Info %<>% Format_PlantIDs_Function
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys
Plant_Info <- Plot_Info %>%#
		dplyr::select(#
			Island, #
			Tag_Number, #
			Cluster, #
			Cluster2, #
			Network, #
			Sampling, #
			SurveyOrder#
		) %>%#
		merge(Plant_Info, by = "Tag_Number", all.y=TRUE) %>%#
		as.data.table %>%#
		setnames("HostSpecies", "Species") %>%#
		as.data.frame#
	#---------------------------------------------------------- FORMAT PLANT IDs#
	Plant_Info %<>% Format_PlantIDs_Function
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info <- Plant_Info %>%#
		group_by(PlantID) %>%#
		summarise(#
			N.PlotPlantIDs = length(unique(PlotPlantID))#
		) %>%#
		merge(Plant_Info, by="PlantID")
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info <- Plant_Surveys %>%#
		group_by(PlotPlantID) %>%#
		summarise(#
			First.Survey.Date = min(Date),#
			Last.Survey.Date = max(Date)#
		) %>%#
		merge(Plant_Info, ., by="PlotPlantID", all.y=TRUE)
head(Plant_Info)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info <- Plant_Surveys %>% group_by(PlotPlantID) %>%#
		summarise( #
		# a plant has been obvserved to be dead/missing if at least 1 observation (> 0)#
		DeadObservation 		= Dead_Missing_Function(Dead),#
		MissingObservation 		= Dead_Missing_Function(Missing),#
		# a plant is confirmed dead/missing if at least 2 observations (> 1)#
		ConfirmedDead 			= Confirmed_Dead_Missing_Function(Dead),#
		ConfirmedMissing 		= Confirmed_Dead_Missing_Function(Missing),#
		ConfirmedDeadMissing = Confirmed_Dead_Missing_Function(c(Dead,Missing))	#
	) %>%#
	merge(Plant_Info, ., by="PlotPlantID")
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
temp_dead_obs <- filter(Plant_Surveys, Dead=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstDeadObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing#
	temp_missing_obs <- filter(Plant_Surveys, Missing=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstMissingObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing or dead#
	temp_dead_missing <- merge(#
		temp_dead_obs, #
		temp_missing_obs, #
		by="PlotPlantID", #
		all=T#
	)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
temp_dead_missing$FirstDeadMissingObservation = #
		dplyr::select(#
			temp_dead_missing, #
			FirstDeadObservation,#
			FirstMissingObservation#
		) %>% #
		apply(., 1, min, na.rm=T) %>%#
		as.Date#
	# merge with Plant_Info#
	Plant_Info <- merge(Plant_Info, temp_dead_missing, by="PlotPlantID", all=T)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, as.character#
	)#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, NA_Function#
	)#
	Plant_Info$ReproductiveMode %<>% WoodyTrunk_Function()#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, as.factor#
	)#
	# ------------------------------------------------- ADD InDemomographicStudy#
	# save all Plant_Info#
	Plant_Info_All <- Plant_Info#
	Plant_Info %<>% merge(#
		., #
		ClustersInDemographicStudy, #
		by = "Cluster",#
		all=TRUE#
	)
head(Plant_Info)
Plot_Info_Cluster <- Plot_Info %>%#
		dplyr::select(Tag_Number, Cluster, Cluster2) %>%#
		reshape2:::melt.data.frame(., id.vars=c("Tag_Number"), #
			value.name="ClusterID") %>%#
		filter(ClusterID!=0) %>%#
		.[, -2] %>%#
		arrange(Tag_Number)#
	Plot_Info_Cluster %<>%#
		group_by(Tag_Number) %>%#
		summarise(ClusterID = paste(ClusterID, collapse=", "))#
	# CLUSTER ID FOR PLOTS *NOT* IN CLUSTERS#
	temp_A = Plot_Info %>%#
		dplyr::select(Tag_Number, Cluster) %>%#
		filter(Cluster==0)#
	temp_A$ClusterID <- temp_A$Tag_Number#
	temp_A %<>% .[, -2]#
	Plot_Info_Cluster %<>% rbind.fill(temp_A) %>% #
		merge(Plot_Info, by="Tag_Number") %>%#
		select(ClusterID, Tag_Number)#
	Plant_Info %<>% merge(Plot_Info_Cluster, by="Tag_Number", all.x=T)
Plot_Info_Cluster %<>% rbind.fill(temp_A) %>% #
		merge(Plot_Info, by="Tag_Number") %>%#
		dplyr::select(ClusterID, Tag_Number)#
	Plant_Info %<>% merge(Plot_Info_Cluster, by="Tag_Number", all.x=T)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info[which(is.na(Plant_Info$InBigPlantStudy)), ]$InBigPlantStudy <- "No"#
	Plant_Info[which(Plant_Info$InBigPlantStudy=="yes"), ]$InBigPlantStudy <- "Yes"#
	Plant_Info[which(Plant_Info$InBigPlantStudy==""), ]$InBigPlantStudy <- "No"#
	Plant_Info %<>% filter(InBigPlantStudy=="No")
head(Plant_Info)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info$DaysAlive <- Plant_Info$Last.Survey.Date - Plant_Info$First.Survey.Date
Plant_Info$DaysAlive
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info %<>% mutate(#
		Last.Survey.Date = replace(#
			Last.Survey.Date,#
			which(ConfirmedDeadMissing==1),#
			FirstDeadMissingObservation#
		)#
	)
str(Plant_Info)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info %<>% #
		group_by(PlotPlantID) %>%#
		mutate(#
		Last.Survey.Date = replace(#
			Last.Survey.Date,#
			which(ConfirmedDeadMissing==1),#
			FirstDeadMissingObservation#
		)#
	)
tail(Plant_Info)
tail(Plant_Info) %>% as.data.frame
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys
Plant_Info <- Plot_Info %>%#
		dplyr::select(#
			Island, #
			Tag_Number, #
			Cluster, #
			Cluster2, #
			Network, #
			Sampling, #
			SurveyOrder#
		) %>%#
		merge(Plant_Info, by = "Tag_Number", all.y=TRUE) %>%#
		as.data.table %>%#
		setnames("HostSpecies", "Species") %>%#
		as.data.frame#
	#---------------------------------------------------------- FORMAT PLANT IDs#
	Plant_Info %<>% Format_PlantIDs_Function
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info <- Plant_Info %>%#
		group_by(PlantID) %>%#
		summarise(#
			N.PlotPlantIDs = length(unique(PlotPlantID))#
		) %>%#
		merge(Plant_Info, by="PlantID")#
	#-------------------------- ADD FIRST and LAST DATE PlotPlantID WAS SURVEYED#
	# particularly relevant for plants that grew into plots over the course of the study (and thus the number of PlotPlantIDs for a given PlantID changed over time)#
	# also helps calculate the number of days a plant was known to have survived#
	Plant_Info <- Plant_Surveys %>%#
		group_by(PlotPlantID) %>%#
		summarise(#
			First.Survey.Date = min(Date),#
			Last.Survey.Date = max(Date)#
		) %>%#
		merge(Plant_Info, ., by="PlotPlantID", all.y=TRUE)#
	# ----------------------------------------------------------- PLANT SURVIVAL#
	# indicate whether plant was previously listed as dead or missing#
	# group based on plant ID number#
	Plant_Info <- Plant_Surveys %>% group_by(PlotPlantID) %>%#
		summarise( #
		# a plant has been obvserved to be dead/missing if at least 1 observation (> 0)#
		DeadObservation 		= Dead_Missing_Function(Dead),#
		MissingObservation 		= Dead_Missing_Function(Missing),#
		# a plant is confirmed dead/missing if at least 2 observations (> 1)#
		ConfirmedDead 			= Confirmed_Dead_Missing_Function(Dead),#
		ConfirmedMissing 		= Confirmed_Dead_Missing_Function(Missing),#
		ConfirmedDeadMissing = Confirmed_Dead_Missing_Function(c(Dead,Missing))	#
	) %>%#
	merge(Plant_Info, ., by="PlotPlantID")
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
temp_dead_obs <- filter(Plant_Surveys, Dead=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstDeadObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing#
	temp_missing_obs <- filter(Plant_Surveys, Missing=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstMissingObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing or dead#
	temp_dead_missing <- merge(#
		temp_dead_obs, #
		temp_missing_obs, #
		by="PlotPlantID", #
		all=T#
	)
temp_dead_missing$FirstDeadMissingObservation = #
		dplyr::select(#
			temp_dead_missing, #
			FirstDeadObservation,#
			FirstMissingObservation#
		) %>% #
		apply(., 1, min, na.rm=T) %>%#
		as.Date#
	# merge with Plant_Info#
	Plant_Info <- merge(Plant_Info, temp_dead_missing, by="PlotPlantID", all=T)#
	# fix last survey date#
	Plant_Info %<>% #
		group_by(PlotPlantID) %>%#
		mutate(#
		Last.Survey.Date = replace(#
			Last.Survey.Date,#
			which(ConfirmedDeadMissing==1),#
			FirstDeadMissingObservation#
		)#
	)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info %<>% mutate(DaysAlive = Last.Survey.Date - First.Survey.Date)#
	# -------------------------------------------------- CLEANUP FOR CONSISTENCY#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, as.character#
	)#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, NA_Function#
	)#
	Plant_Info$ReproductiveMode %<>% WoodyTrunk_Function()#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, as.factor#
	)#
	# ------------------------------------------------- ADD InDemomographicStudy#
	# save all Plant_Info#
	Plant_Info_All <- Plant_Info#
	Plant_Info %<>% merge(#
		., #
		ClustersInDemographicStudy, #
		by = "Cluster",#
		all=TRUE#
	)
Plot_Info_Cluster <- Plot_Info %>%#
		dplyr::select(Tag_Number, Cluster, Cluster2) %>%#
		reshape2:::melt.data.frame(., id.vars=c("Tag_Number"), #
			value.name="ClusterID") %>%#
		filter(ClusterID!=0) %>%#
		.[, -2] %>%#
		arrange(Tag_Number)#
	Plot_Info_Cluster %<>%#
		group_by(Tag_Number) %>%#
		summarise(ClusterID = paste(ClusterID, collapse=", "))#
	# CLUSTER ID FOR PLOTS *NOT* IN CLUSTERS#
	temp_A = Plot_Info %>%#
		select(Tag_Number, Cluster) %>%#
		filter(Cluster==0)#
	temp_A$ClusterID <- temp_A$Tag_Number#
	temp_A %<>% .[, -2]
temp_A = Plot_Info %>%#
		dplyr::select(Tag_Number, Cluster) %>%#
		filter(Cluster==0)#
	temp_A$ClusterID <- temp_A$Tag_Number#
	temp_A %<>% .[, -2]#
	Plot_Info_Cluster %<>% rbind.fill(temp_A) %>% #
		merge(Plot_Info, by="Tag_Number") %>%#
		dplyr::select(ClusterID, Tag_Number)#
	Plant_Info %<>% merge(Plot_Info_Cluster, by="Tag_Number", all.x=T)
tail(Plant_Info)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys
Plant_Info <- Plot_Info %>%#
		dplyr::select(#
			Island, #
			Tag_Number, #
			Cluster, #
			Cluster2, #
			Network, #
			Sampling, #
			SurveyOrder#
		) %>%#
		merge(Plant_Info, by = "Tag_Number", all.y=TRUE) %>%#
		as.data.table %>%#
		setnames("HostSpecies", "Species") %>%#
		as.data.frame#
	#---------------------------------------------------------- FORMAT PLANT IDs#
	Plant_Info %<>% Format_PlantIDs_Function#
	#---------------------- CALCULATE AND ADD NUMBER OF PlotPlantIDs PER PlantID#
	Plant_Info <- Plant_Info %>%#
		group_by(PlantID) %>%#
		summarise(#
			N.PlotPlantIDs = length(unique(PlotPlantID))#
		) %>%#
		merge(Plant_Info, by="PlantID")
tail(Plant_Info)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info <- Plant_Surveys %>%#
		group_by(PlotPlantID) %>%#
		summarise(#
			First.Survey.Date = min(Date),#
			Last.Survey.Date = max(Date)#
		) %>%#
		merge(Plant_Info, ., by="PlotPlantID", all.y=TRUE)#
	# ----------------------------------------------------------- PLANT SURVIVAL#
	# indicate whether plant was previously listed as dead or missing#
	# group based on plant ID number#
	Plant_Info <- Plant_Surveys %>% group_by(PlotPlantID) %>%#
		summarise( #
		# a plant has been obvserved to be dead/missing if at least 1 observation (> 0)#
		DeadObservation 		= Dead_Missing_Function(Dead),#
		MissingObservation 		= Dead_Missing_Function(Missing),#
		# a plant is confirmed dead/missing if at least 2 observations (> 1)#
		ConfirmedDead 			= Confirmed_Dead_Missing_Function(Dead),#
		ConfirmedMissing 		= Confirmed_Dead_Missing_Function(Missing),#
		ConfirmedDeadMissing = Confirmed_Dead_Missing_Function(c(Dead,Missing))	#
	) %>%#
	merge(Plant_Info, ., by="PlotPlantID")#
	#---------------- ADD FIRST DATE PlotPlantID WAS RECORDED AS DEAD OR MISSING#
	# oldest date PlotPlantID was recorded as dead#
	temp_dead_obs <- filter(Plant_Surveys, Dead=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstDeadObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing#
	temp_missing_obs <- filter(Plant_Surveys, Missing=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstMissingObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing or dead#
	temp_dead_missing <- merge(#
		temp_dead_obs, #
		temp_missing_obs, #
		by="PlotPlantID", #
		all=T#
	)
tail(Plant_Info)
temp_dead_missing$FirstDeadMissingObservation = #
		dplyr::select(#
			temp_dead_missing, #
			FirstDeadObservation,#
			FirstMissingObservation#
		) %>% #
		apply(., 1, min, na.rm=T) %>%#
		as.Date
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info <- merge(Plant_Info, temp_dead_missing, by="PlotPlantID", all=T)
tail(Plant_Info)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info %<>% #
		group_by(PlotPlantID) %>%#
		mutate(#
		Last.Survey.Date = replace(#
			Last.Survey.Date,#
			which(ConfirmedDeadMissing==1),#
			FirstDeadMissingObservation#
		)#
	)
tail(Plant_Info)
tail(Plant_Info) %>% as.data.frame
Plant_Info %>% filter(PlantID=="9994")
Plant_Info %>% filter(PlantID=="9994") %>% as.data.frame
Plant_Info[1:20,] %>% as.data.frame
dim(Plant_Info)
Plant_Info[3000:3036,] %>% as.data.frame
Plant_Info %>% filter(PlantID=="9976") %>% as.data.frame
Plant_Info %>% filter(PlantID=="9982") %>% as.data.frame
Plant_Info %>% filter(PlantID=="9983") %>% as.data.frame
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info %<>% #
		group_by(PlotPlantID) %>%#
		mutate(#
			Last.Survey.Date = replace(#
				Last.Survey.Date,#
				which(ConfirmedDeadMissing==1),#
				FirstDeadMissingObservation#
			)#
		) %>%#
		# then find latest date at which plant was recorded dead (part of plant in one plot may have died while other part in another was still alive)#
		group_by(PlantID) %>%#
		mutate(#
			Last.Survey.Date = replace(#
				Last.Survey.Date,#
				which(ConfirmedDeadMissing==1),#
				max(FirstDeadMissingObservation)#
			)#
		)
Plant_Info %>% filter(PlantID=="9983") %>% as.data.frame
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info %<>% #
		group_by(PlotPlantID) %>%#
		mutate(#
			Last.Survey.Date = replace(#
				Last.Survey.Date,#
				which(ConfirmedDeadMissing==1),#
				FirstDeadMissingObservation#
			)#
		) %>%#
		# then find latest date at which plant was recorded dead (part of plant in one plot may have died while other part in another was still alive)#
		group_by(PlantID) %>%#
		mutate(#
			Last.Survey.Date = replace(#
				Last.Survey.Date,#
				which(ConfirmedDeadMissing==1),#
				max(Last.Survey.Date)#
			)#
		)
Plant_Info %>% filter(PlantID=="9983") %>% as.data.frame
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys
Plant_Info <- Plot_Info %>%#
		dplyr::select(#
			Island, #
			Tag_Number, #
			Cluster, #
			Cluster2, #
			Network, #
			Sampling, #
			SurveyOrder#
		) %>%#
		merge(Plant_Info, by = "Tag_Number", all.y=TRUE) %>%#
		as.data.table %>%#
		setnames("HostSpecies", "Species") %>%#
		as.data.frame#
	#---------------------------------------------------------- FORMAT PLANT IDs#
	Plant_Info %<>% Format_PlantIDs_Function#
	#---------------------- CALCULATE AND ADD NUMBER OF PlotPlantIDs PER PlantID#
	Plant_Info <- Plant_Info %>%#
		group_by(PlantID) %>%#
		summarise(#
			N.PlotPlantIDs = length(unique(PlotPlantID))#
		) %>%#
		merge(Plant_Info, by="PlantID")
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info <- Plant_Surveys %>%#
		group_by(PlotPlantID) %>%#
		summarise(#
			First.Survey.Date = min(Date),#
			Last.Survey.Date = max(Date)#
		) %>%#
		merge(Plant_Info, ., by="PlotPlantID", all.y=TRUE)#
	# ----------------------------------------------------------- PLANT SURVIVAL#
	# indicate whether plant was previously listed as dead or missing#
	# group based on plant ID number#
	Plant_Info <- Plant_Surveys %>% group_by(PlotPlantID) %>%#
		summarise( #
		# a plant has been obvserved to be dead/missing if at least 1 observation (> 0)#
		DeadObservation 		= Dead_Missing_Function(Dead),#
		MissingObservation 		= Dead_Missing_Function(Missing),#
		# a plant is confirmed dead/missing if at least 2 observations (> 1)#
		ConfirmedDead 			= Confirmed_Dead_Missing_Function(Dead),#
		ConfirmedMissing 		= Confirmed_Dead_Missing_Function(Missing),#
		ConfirmedDeadMissing = Confirmed_Dead_Missing_Function(c(Dead,Missing))	#
	) %>%#
	merge(Plant_Info, ., by="PlotPlantID")#
	#---------------- ADD FIRST DATE PlotPlantID WAS RECORDED AS DEAD OR MISSING#
	# oldest date PlotPlantID was recorded as dead#
	temp_dead_obs <- filter(Plant_Surveys, Dead=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstDeadObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing#
	temp_missing_obs <- filter(Plant_Surveys, Missing=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstMissingObservation = min(Date))
temp_dead_missing <- merge(#
		temp_dead_obs, #
		temp_missing_obs, #
		by="PlotPlantID", #
		all=T#
	) #
	temp_dead_missing$FirstDeadMissingObservation = #
		dplyr::select(#
			temp_dead_missing, #
			FirstDeadObservation,#
			FirstMissingObservation#
		) %>% #
		apply(., 1, min, na.rm=T) %>%#
		as.Date
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info <- merge(Plant_Info, temp_dead_missing, by="PlotPlantID", all=T)#
	# fix last survey date#
	#	for each PlotPlantID, keep FirstDeadMissingObservation#
	Plant_Info %<>% #
		group_by(PlotPlantID) %>%#
		mutate(#
			Last.Survey.Date = replace(#
				Last.Survey.Date,#
				which(ConfirmedDeadMissing==1),#
				FirstDeadMissingObservation#
			)#
		) %>%#
		# then find latest date at which plant was recorded dead (part of plant in one plot may have died while other part in another was still alive)#
		group_by(PlantID) %>%#
		mutate(#
			Last.Survey.Date = replace(#
				Last.Survey.Date,#
				which(ConfirmedDeadMissing==1),#
				max(Last.Survey.Date)#
			)#
		)
Plant_Info %>% filter(PlantID=="9983") %>% as.data.frame
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info %<>% #
		group_by(PlotPlantID) %>%#
		mutate(#
			Last.Survey.Date = replace(#
				Last.Survey.Date,#
				which(ConfirmedDeadMissing==1),#
				FirstDeadMissingObservation#
			)#
		) %>%#
		# then find latest date at which plant was recorded dead (part of plant in one plot may have died while other part in another was still alive)#
		## 9984 - WHY DOESNT IT REPLACE WITH SAME DATE FOR BOTH?#
		group_by(PlantID) %>%#
		mutate(#
			Last.Survey.Date = replace(#
				Last.Survey.Date,#
				which(ConfirmedDeadMissing==1),#
				paste(Last.Survey.Date, collapse="")#
			)#
		)
Plant_Info %>% filter(PlantID=="9983") %>% as.data.frame
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info %<>% #
		group_by(PlotPlantID) %>%#
		mutate(#
			Last.Survey.Date = replace(#
				Last.Survey.Date,#
				which(ConfirmedDeadMissing==1),#
				FirstDeadMissingObservation#
			)#
		) %>%#
		ungroup %>%#
		# then find latest date at which plant was recorded dead (part of plant in one plot may have died while other part in another was still alive)#
		## 9984 - WHY DOESNT IT REPLACE WITH SAME DATE FOR BOTH?#
		group_by(PlantID) %>%#
		mutate(#
			Last.Survey.Date = replace(#
				Last.Survey.Date,#
				which(ConfirmedDeadMissing==1),#
				paste(Last.Survey.Date, collapse="")#
			)#
		)
Plant_Info %>% filter(PlantID=="9983") %>% as.data.frame
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info %<>% #
		group_by(PlotPlantID) %>%#
		mutate(#
			ConfirmedDeadMissing = replace(#
				ConfirmedDeadMissing,#
				which(Last.Survey.Date >= "2015-05-01"),#
				max(#
					DeadObservation,#
					MissingObservation,#
					ConfirmedDead,#
					ConfirmedMissing,#
					ConfirmedDeadMissing,#
					na.rm=T#
				),#
				1#
			)#
		)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info %<>% #
		group_by(PlotPlantID) %>%#
		mutate(#
			ConfirmedDeadMissing = replace(#
				ConfirmedDeadMissing,#
				which(Last.Survey.Date >= "2015-05-01"),#
				max(#
					DeadObservation,#
					MissingObservation,#
					ConfirmedDead,#
					ConfirmedMissing,#
					ConfirmedDeadMissing,#
					na.rm=T#
				)#
			)#
		)
Plant_Info %>% filter(PlantID=="9983") %>% as.data.frame
Plant_Info %>% filter(PlantID=="9984") %>% as.data.frame
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
temp_dead_obs <- filter(Plant_Surveys, Dead=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstDeadObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing#
	temp_missing_obs <- filter(Plant_Surveys, Missing=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstMissingObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing or dead#
	temp_dead_missing <- merge(#
		temp_dead_obs, #
		temp_missing_obs, #
		by="PlotPlantID", #
		all=T#
	)
temp_dead_missing$FirstDeadMissingObservation = #
	dplyr::select(#
			temp_dead_missing, #
			FirstDeadObservation,#
			FirstMissingObservation#
		) %>% #
		apply(., 1, min, na.rm=T) %>%#
		as.Date
Plant_Info <- merge(Plant_Info, temp_dead_missing, by="PlotPlantID", all=T)#
	# fix last survey date#
	#	for each PlotPlantID, keep FirstDeadMissingObservation#
	Plant_Info %<>% #
		group_by(PlotPlantID) %>%#
		mutate(#
			Last.Survey.Date = replace(#
				Last.Survey.Date,#
				which(ConfirmedDeadMissing==1),#
				FirstDeadMissingObservation#
			)#
		) %>%#
		ungroup %>%#
		# then find latest date at which plant was recorded dead (part of plant in one plot may have died while other part in another was still alive)#
		## 9984 - WHY DOESNT IT REPLACE WITH SAME DATE FOR BOTH?#
		group_by(PlantID) %>%#
		mutate(#
			Last.Survey.Date = replace(#
				Last.Survey.Date,#
				which(ConfirmedDeadMissing==1),#
				paste(Last.Survey.Date, collapse="")#
			)#
		)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info %<>% #
		group_by(PlotPlantID) %>%#
		mutate(#
			Last.Survey.Date = replace(#
				Last.Survey.Date,#
				which(ConfirmedDeadMissing==1),#
				FirstDeadMissingObservation#
			)#
		)
str(Plant_Info)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys
Plant_Info <- Plot_Info %>%#
		dplyr::select(#
			Island, #
			Tag_Number, #
			Cluster, #
			Cluster2, #
			Network, #
			Sampling, #
			SurveyOrder#
		) %>%#
		merge(Plant_Info, by = "Tag_Number", all.y=TRUE) %>%#
		as.data.table %>%#
		setnames("HostSpecies", "Species") %>%#
		as.data.frame#
	#---------------------------------------------------------- FORMAT PLANT IDs#
	Plant_Info %<>% Format_PlantIDs_Function#
	#---------------------- CALCULATE AND ADD NUMBER OF PlotPlantIDs PER PlantID#
	Plant_Info <- Plant_Info %>%#
		group_by(PlantID) %>%#
		summarise(#
			N.PlotPlantIDs = length(unique(PlotPlantID))#
		) %>%#
		merge(Plant_Info, by="PlantID")
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info <- Plant_Surveys %>%#
		group_by(PlotPlantID) %>%#
		summarise(#
			First.Survey.Date = min(Date),#
			Last.Survey.Date = max(Date)#
		) %>%#
		merge(Plant_Info, ., by="PlotPlantID", all.y=TRUE)#
	# ----------------------------------------------------------- PLANT SURVIVAL#
	# indicate whether plant was previously listed as dead or missing#
	# group based on plant ID number#
	Plant_Info <- Plant_Surveys %>% group_by(PlotPlantID) %>%#
		summarise( #
		# a plant has been obvserved to be dead/missing if at least 1 observation (> 0)#
		DeadObservation 		= Dead_Missing_Function(Dead),#
		MissingObservation 		= Dead_Missing_Function(Missing),#
		# a plant is confirmed dead/missing if at least 2 observations (> 1)#
		ConfirmedDead 			= Confirmed_Dead_Missing_Function(Dead),#
		ConfirmedMissing 		= Confirmed_Dead_Missing_Function(Missing),#
		ConfirmedDeadMissing = Confirmed_Dead_Missing_Function(c(Dead,Missing))	#
	) %>%#
	merge(Plant_Info, ., by="PlotPlantID")#
	# for those first marked dead/missing during the last survey, assume they are confirmed dead/missing#
	Plant_Info %<>% #
		group_by(PlotPlantID) %>%#
		mutate(#
			ConfirmedDeadMissing = replace(#
				ConfirmedDeadMissing,#
				which(Last.Survey.Date >= "2015-05-01"),#
				max(#
					DeadObservation,#
					MissingObservation,#
					ConfirmedDead,#
					ConfirmedMissing,#
					ConfirmedDeadMissing,#
					na.rm=T#
				)#
			)#
		)#
		# FIX LAST SURVEY DATE FOR
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
temp_dead_obs <- filter(Plant_Surveys, Dead=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstDeadObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing#
	temp_missing_obs <- filter(Plant_Surveys, Missing=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstMissingObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing or dead#
	temp_dead_missing <- merge(#
		temp_dead_obs, #
		temp_missing_obs, #
		by="PlotPlantID", #
		all=T#
	)
temp_dead_missing$FirstDeadMissingObservation = #
		dplyr::select(#
			temp_dead_missing, #
			FirstDeadObservation,#
			FirstMissingObservation#
		) %>% #
		apply(., 1, min, na.rm=T) %>%#
		as.Date#
	# merge with Plant_Info#
	Plant_Info <- merge(Plant_Info, temp_dead_missing, by="PlotPlantID", all=T)#
	# fix last survey date
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info %<>% #
		group_by(PlotPlantID) %>%#
		mutate(#
			Last.Survey.Date = replace(#
				Last.Survey.Date,#
				which(ConfirmedDeadMissing==1),#
				FirstDeadMissingObservation#
			)#
		) %>%#
		ungroup %>%#
		# then find latest date at which plant was recorded dead (part of plant in one plot may have died while other part in another was still alive)#
		## 9984 - WHY DOESNT IT REPLACE WITH SAME DATE FOR BOTH?#
		group_by(PlantID) %>%#
		mutate(#
			Last.Survey.Date = replace(#
				Last.Survey.Date,#
				which(ConfirmedDeadMissing==1),#
				paste(Last.Survey.Date, collapse="")#
			)#
		)
Plant_Info %>% filter(PlantID=="9984") %>% as.data.frame
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info %<>% group_by(PlantID) %>%#
		mutate(#
			Last.Survey.Date = max(Last.Survey.Date, na.rm=T)#
		)
Plant_Info %>% filter(PlantID=="9984") %>% as.data.frame
Plant_Info %>% filter(PlantID=="9983") %>% as.data.frame
Plant_Info[2800:3000,]
Plant_Info[2800:3000,] %>% as.data.frame
Plant_Info %>% filter(PlantID=="9892") %>% as.data.frame
Plant_Info %>% filter(PlantID=="9962") %>% as.data.frame
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info %<>% group_by(PlantID) %>%#
		mutate(#
			First.Survey.Date = min(First.Survey.Date, na.rm=T)#
		)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info %<>% #
		group_by(PlantID) %>%#
		mutate(DaysAlive = Last.Survey.Date - First.Survey.Date)
head(Plant_Info)
head(Plant_Info) %>% as.data.frame
tail(Plant_Info)
tail(Plant_Info) %>% as.data.frame
Plant_Info[3000:3036] %>% as.data.frame
Plant_Info[3000:3036,] %>% as.data.frame
setwd('/Users/KSauby/Documents/Projects')
setwd("./dataproc")#
#setwd("./modresproc")#
#devtools::test()#
devtools::document()#
devtools::install()
library(dataproc)
