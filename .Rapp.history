21.4*.813
21.4 -21.4*.813
library(lubridaste)
library(lubrida=te)
library(lubridate)
-v
install.packages("rgeos", repos="http://R-Forge.R-project.org")#
require(rgeos)
library(rgeos)
require(rgeos)
library(rgeos)
install.packages("rgdal", repos="http://R-Forge.R-project.org")#
require(rgdal)
R CMD INSTALL ~/Downloads/rgdal_0.9-1.tar.gz --configure-args='--with-gdal-config=/Library/Frameworks/GDAL.framework/Programs/gdal-config#
 --with-proj-include=/Library/Frameworks/PROJ.framework/Headers#
 --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'
R CMD INSTALL ~/Downloads/rgdal_0.9-1.tar.gz --configure-args='--with-gdal-config=/Library/Frameworks/GDAL.framework/Programs/gdal-config--with-proj-include=/Library/Frameworks/PROJ.framework/Headers--with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'
library(lme3)
library(lme4)
300/241
.244*30
1.25*300
1.25*240
7*12
7849-7527
322/1353
8028-7527
501/1353
8028-7957
1353-501
852/71
7956-7878
8176-8029
8176-8092
250*.75
250*.25
42*2 + 17*2
118/19
21/6.2
59.5*.75
59.5*.5 + 59.5
71/12
597/80
597/8
432/8
15*8 + 9*3
?seq_len
7.25/3
7.25/4
for(i in 0:9){x=cos(2*pi/10*i);y=x+1;z=(y-2)*22;pie(c(y,8-y),col=c(0,7),init.angl=135-z,bo=F,la=NA)}
install.packages("ProjectTemplate")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("data.table")
install.packages("corrgram")
install.packages("survival")
install.packages("shapefiles")
install.packages("rgdal")
install.packages("PBSmapping")
install.packages("sp")
install.packages("gdistance")
install.packages("chron")
install.packages("unmarked")
install.packages("lme4")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")#
require(rgeos)
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
library(rgdal)
install.packages("http://cran.r-project.org/src/contrib/rgdal_0.9-1.tar.gz", repos = NULL, type="source", configure.args = "--with-gdal-config=/Library/Frameworks/GDAL.framework/Versions/1.10/unix/bin/gdal-config --with-proj-include=/Library/Frameworks/PROJ.framework/unix/include --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib")
18/1.618
189+114
library(lubridate)
library(magrittr)
seasons <- data.frame(#
	   SE = as.POSIXct(c("2009-3-20", "2010-3-20", "2011-3-20", "2012-3-20", #
            "2013-3-20", "2014-3-20"), format="%Y-%m-%d"),#
	   SS = as.POSIXct(c("2009-6-21", "2010-6-21", "2011-6-21", "2012-6-20",#
            "2013-6-20", "2014-6-20"), format="%Y-%m-%d"),#
	   FE = as.POSIXct(c("2009-9-22", "2010-9-23", "2011-9-23", "2012-9-22",#
            "2013-9-22", "2014-9-22"), format="%Y-%m-%d"),#
	   WS = as.POSIXct(c("2009-12-21", "2010-12-21", "2011-12-22", "2012-12-21", #
            "2013-12-21", "2014-12-21"), format="%Y-%m-%d")#
    )#
#
    assignSeason <- function(dat, SeasonStarts=seasons) {#
	    dat %<>% mutate(#
		    Season = lapply(Date,#
				function(x) {#
					findInterval(#
						x, #
						SeasonStarts[which(year(x)==year(SeasonStarts$WS)), ]#
					)#
				}#
			) %>% unlist	#
		)#
	    dat[which(dat$Season==0 | dat$Season==4), ]$Season 	<- "Winter"#
	    dat[which(dat$Season==1), ]$Season 					<- "Spring"#
	    dat[which(dat$Season==2), ]$Season 					<- "Summer"#
	    dat[which(dat$Season==3), ]$Season 					<- "Fall"#
	    return(dat)#
    }
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(dplyr)
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(devtoolks)
library(devtools)
?install_github
devtools::install_github("ksauby/ACSampling", auth_token="2ab30a602e52fae481f4249cc25e892c0a9ccfc7", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install_github("ksauby/ACSampling", auth_token="2794c3f10db92f525181a0b1f6c19064fe3a2ef3", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
library(devtools)
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
install.packages("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
??limit
37-13
24/37
37-13
26/37
25/37
23/37
29/37
30/37
22/37
30/37
29/37
28/37
27/37
35/37
30/37
29/37
26/37
26/37 - .6757
28/37
30/37
29/37
37-12
25/37
219*.8
219*.8 - 17
26/3
17/900
42/900
49/900
29/40
1/25
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis')
library(ProjectTemplate)#
#
# when working on a Windows computer#
# setwd("C:/Users/KSauby/Dropbox/gradschool/Research/Projects/sampling")#
#
# load project#
load.project()
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
Plant_Surveys_All <- Demographic.Plant.Surveys#
Plant_Info_All <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated#
Plant_Info$First.Survey.Date
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# those marked dead/missing, then not dead/missing#
# find a 10 in concatenated?#
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
if (dim(dups)[1] > 0) {stop("Duplicates observations for a PlantID, Date combination are present in the dataset.")}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% filter(is.na(PlantID))#
if (dim(dups)[1] > 0) {stop("NA values for PlantID.")}#
# --------------- Demographic Plot Surveys ---------------------------------- ##
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
# --------------- Demographic Plant Surveys --------------------------------- ##
Plant_Surveys %<>% processPlantSurveys#
# --------------- Demographic Plant Info ------------------------------------ ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
# --------------- Demographic Plant Surveys --------------------------------- ##
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info)#
Plant_Surveys %<>% processPlantSurveysafterMergewPlantInfo %>%#
	filter(InDemographicStudy=="yes")#
Plant_Surveys_by_Plant <- Plant_Surveys %>% processSurveysMergedbyPlant#
# --------------------------------------------------------------------------- ##
# create Fecundity and RGR dataset - only measured size during the spring and summer#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year <- Plant_Surveys_by_Plant %>% #
	group_by(SamplingYear, PlantID) %>%#
	summarise(#
		Species = Species[1],#
		Network = Network[1],#
		Island = Island[1],#
		ReproductiveMode = ReproductiveMode[1],#
		Date = min(Date),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		Fruit_Flowers_t = max(Fruit_Flowers_t, na.rm=T),#
		FruitFlowerPres_t = max(FruitFlowerPres_t, na.rm=T),#
		Size_t = max(Size_t, na.rm=T),#
		Height_t = max(Height_t, na.rm=T),#
		Fruit_t = max(Fruit_t, na.rm=T),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		CA_t = max(CA_t, na.rm=T),#
		ME_t = max(ME_t, na.rm=T),#
		DA_t = max(DA_t, na.rm=T),#
		CH_t = max(CH_t, na.rm=T),#
		Gerstaeckeria_t = max(Gerstaeckeria_t, na.rm=T),#
		Unknown_Moth_t = max(Unknown_Moth_t, na.rm=T),#
		Old_Moth_Evidence_t = max(Old_Moth_Evidence_t, na.rm=T),#
		Dead = max(Dead, na.rm=T),#
		Missing = max(Missing, na.rm=T)#
	) %>% #
	mutate(PrevSamplingYear = SamplingYear - 1)
str(Plant_Surveys_by_Year)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# --------------------------------------------------------------------------- ##
# create PrevYear#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Year <- year(Plant_Surveys_by_Year$Date)#
Plant_Surveys_by_Year$PrevYear <- year(Plant_Surveys_by_Year$Date) - 1#
#
# --------------------------------------------------------------------------- ##
# Insect Presence During the Study - for Datasets for Life Table Response Experiments#
# --------------------------------------------------------------------------- ##
network_summary_time_t <- Plant_Surveys_by_Year %>%#
	group_by(Network, Year) %>%#
	summarise(#
		OldMothNetworkPres_t = max(Old_Moth_Evidence_t, na.rm=T),#
		#InsectNetworkPres = max(Insect_t, na.rm=T),#
		MENetworkPres_t = max(ME_t, na.rm=T),#
		CANetworkPres_t = max(CA_t, na.rm=T)#
	) %>%#
	calculateLagGroupedDF(#
		vars=c("OldMothNetworkPres_t", "MENetworkPres_t", "CANetworkPres_t"), #
		arrange.variable="Year", #
		grouping.variable=c("Network")#
	)#
network_summary <- Plant_Surveys_by_Year %>%#
	group_by(Network) %>%#
	summarise(#
		OldMothNetworkPres = max(Old_Moth_Evidence_t, na.rm=T),#
		#InsectNetworkPres = max(Insect_t, na.rm=T),#
		MENetworkPres = max(ME_t, na.rm=T),#
		CANetworkPres = max(CA_t, na.rm=T)#
	)#
Plant_summary <- Plant_Surveys_by_Year %>%#
	group_by(PlantID) %>%#
	summarise(#
		OldMothPlantPres = max(Old_Moth_Evidence_t, na.rm=T),#
		#InsectPlantPres = max(Insect_t, na.rm=T),#
		MEPlantPres = max(ME_t, na.rm=T),#
		CAPlantPres = max(CA_t, na.rm=T)#
	)#
Plant_Surveys_by_Year %<>% #
	merge(network_summary, by="Network") %>% #
	merge(Plant_summary, by="PlantID") %>%#
	merge(network_summary_time_t, by=c("Year", "Network"))#
#
# --------------------------------------------------------------------------- ##
# ReproductiveMode Dummy Variables#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Clonal 		<- 0#
Plant_Surveys_by_Year$Woody 		<- 0#
Plant_Surveys_by_Year$Seedling 		<- 0#
Plant_Surveys_by_Year$UnknownRepro 	<- 0#
#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$ReproductiveMode=="Clonal"), ]$Clonal			<- 1#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$ReproductiveMode=="WoodyTrunk"), ]$Woody			<- 1#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$ReproductiveMode=="Seedling"), ]$Seedling		  <- 1#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$ReproductiveMode==""), ]$UnknownRepro	   <- 1#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$ReproductiveMode==""), ]$ReproductiveMode <- "Unknown"#
# --------------------------------------------------------------------------- ##
# Patch Names#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$IslandFullNames <- Plant_Surveys_by_Year$Island#
levels(Plant_Surveys_by_Year$IslandFullNames) <- c(#
	 "Island 1",#
	 "Island 2",#
	 "Island 3",#
	 "Island 4",#
	 "Island 5",#
	 "Coastal\nGrassland",#
	 "Beach\nDunes"#
)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys_by_Year$CA_ME <- with(#
	Plant_Surveys_by_Year, #
	paste(CA_t, ME_t, Old_Moth_Evidence_t, sep="")#
)#
#
# No insects#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$CA_ME=="NANANA"), ]$CA_ME <- "No Insects Observed"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$CA_ME=="000"), ]$CA_ME <- "No Insects Observed"#
#
# Insect damage only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$CA_ME=="001"), ]$CA_ME <- "Moth Damage Only,\nNo Insects Observed"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$CA_ME=="NANA1"), ]$CA_ME <- "Moth Damage Only,\nNo Insects Observed"#
#
# Invasive Moth only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$CA_ME=="1NANA"), ]$CA_ME <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$CA_ME=="1NA1"), ]$CA_ME <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$CA_ME=="100"), ]$CA_ME <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$CA_ME=="101"), ]$CA_ME <- "Invasive Moth"#
#
# Native Moth Only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$CA_ME=="011"), ]$CA_ME <- "Native Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$CA_ME=="010"), ]$CA_ME <- "Native Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$CA_ME=="NA1NA"), ]$CA_ME <- "Native Moth"#
#
# Native and Invasive Moths#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$CA_ME=="110"), ]$CA_ME <- "Invasive and Native Moths"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$CA_ME=="111"), ]$CA_ME <- "Invasive and Native Moths"#
#
Plant_Surveys_by_Year$CA_ME %<>% factor(levels=c(#
	"No Insects Observed",             #
	"Moth Damage Only,\nNo Insects Observed",#
	"Native Moth",                           #
	"Invasive Moth",                         #
	"Invasive and Native Moths"#
))
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys_by_Year$CAMEPlantPres <- with(#
	Plant_Surveys_by_Year, #
	paste(CAPlantPres, MEPlantPres, OldMothPlantPres, sep="")#
)#
#
# No insects#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$CAMEPlantPres=="NANANA"), ]$CAMEPlantPres <- "No Insects Observed"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$CAMEPlantPres=="000"), ]$CAMEPlantPres <- "No Insects Observed"#
#
# Insect damage only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$CAMEPlantPres=="001"), ]$CAMEPlantPres <- "Moth Damage Only,\nNo Insects Observed"#
#
# Invasive Moth only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$CAMEPlantPres=="100"), ]$CAMEPlantPres <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$CAMEPlantPres=="101"), ]$CAMEPlantPres <- "Invasive Moth"#
#
# Native Moth Only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$CAMEPlantPres=="011"), ]$CAMEPlantPres <- "Native Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$CAMEPlantPres=="010"), ]$CAMEPlantPres <- "Native Moth"#
#
# Native and Invasive Moths#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$CAMEPlantPres=="110"), ]$CAMEPlantPres <- "Invasive and Native Moths"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$CAMEPlantPres=="111"), ]$CAMEPlantPres <- "Invasive and Native Moths"#
#
Plant_Surveys_by_Year$CAMEPlantPres %<>% factor(levels=c(#
	"No Insects Observed",             #
	"Moth Damage Only,\nNo Insects Observed",#
	"Native Moth",                           #
	"Invasive Moth",                         #
	"Invasive and Native Moths"#
))
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys_by_Year %<>% mutate(#
	PlantIDb = paste(#
		Island,#
		PlantID,#
		sep=", "#
	),#
	PlantIDc = paste(#
		Island,#
		PlantID,#
		sep="\n"#
	)#
)#
# ------------------------------
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys_by_Year$Alive <- abs(Plant_Surveys_by_Year$Dead - 1)
str(Plant_Surveys_by_Year)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys_by_Year %<>% mutate(#
	Moth_Evidence_t = max(#
		CA_t,#
		ME_t,#
		Old_Moth_Evidence_t,#
		Unknown_Moth_t,#
		na.rm=T#
	),#
	Insect_Evidence_t = max(#
		CA_t,#
		ME_t,#
		Old_Moth_Evidence_t,#
		Unknown_Moth_t,#
		Gerstaeckeria_t,#
		CH_t,#
		DA_t,#
		na.rm=T#
	)#
)
str(Plant_Surveys_by_Year)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# --------------------------------------------------------------------------- ##
Plant_Info_Analysis <- Plant_Info %>%#
	group_by(PlantID) %>%#
	summarise(#
		Island = Island[1],#
		Network = Network[1],#
		Species = Species[1],#
		ReproductiveMode = ReproductiveMode[1],#
		Parent = Parent[1],#
		DaysAlive = DaysAlive[1],#
		Dead = min(ConfirmedDeadMissing),#
		First.Survey.Date = min(First.Survey.Date)#
	) %>%#
	filter(!is.na(Network))#
Plant_Info_Analysis$DaysAlive %<>% as.numeric#
#
Plant_Info_Analysis %<>% mutate(#
	Parent = replace(#
		Parent,#
		which(is.na(Parent)),#
		"Unknown"#
	),#
	ReproductiveMode = replace(#
		ReproductiveMode,#
		which(is.na(ReproductiveMode)),#
		"Unknown"#
	)#
)	#
Plant_Info_Analysis %<>% arrange(desc(Island), desc(Parent))#
# --------------------------------------------------------------------------- ##
Plant_Info_Analysis %<>% #
	merge(network_summary, by="Network") %>%#
	merge(Plant_summary, by="PlantID")#
#
Plant_Info_Analysis$Parent %<>% NA_Function#
Plant_Info_Analysis$Parent[which(Plant_Info_Analysis$Parent=="")] <- NA#
First_Size <- Plant_Surveys_by_Year %>%#
	group_by(PlantID) %>%#
	summarise(#
		First.Survey.Date = min(Date),#
		First_Size = Size_t[which(Date==First.Survey.Date)],#
		min.Size = min(Size_t, na.rm=T),#
		max.Size = max(Size_t, na.rm=T)#
	)#
#
Plant_Info_Analysis %<>% merge(First_Size, by=c("First.Survey.Date", "PlantID"))#
Plant_Info_stricta <- Plant_Info_Analysis %>% filter(Species=="stricta")#
Plant_Info_pusilla <- Plant_Info_Analysis %>% filter(Species=="pusilla")#
#
write.csv(Plant_Info_Analysis, "../data/Plant_Info_Analysis.csv")#
write.csv(Plant_Info_stricta, "../data/Plant_Info_Analysis_stricta.csv")#
write.csv(Plant_Info_pusilla, "../data/Plant_Info_Analysis_pusilla.csv")#
# --------------------------------------------------------------------------- ##
# Insect Presence/Absence During Study#
# --------------------------------------------------------------------------- ##
#
Plant_Info_Analysis$CAMEPlantPres <- with(#
	Plant_Info_Analysis, #
	paste(CAPlantPres, MEPlantPres, OldMothPlantPres, sep="")#
)#
#
# No insects#
Plant_Info_Analysis[which(Plant_Info_Analysis$CAMEPlantPres=="NANANA"), ]$CAMEPlantPres <- "No Insects Observed"#
Plant_Info_Analysis[which(Plant_Info_Analysis$CAMEPlantPres=="000"), ]$CAMEPlantPres <- "No Insects Observed"#
#
# Insect damage only#
Plant_Info_Analysis[which(Plant_Info_Analysis$CAMEPlantPres=="001"), ]$CAMEPlantPres <- "Moth Damage Only,\nNo Insects Observed"#
#
# Invasive Moth only#
Plant_Info_Analysis[which(Plant_Info_Analysis$CAMEPlantPres=="100"), ]$CAMEPlantPres <- "Invasive Moth"#
Plant_Info_Analysis[which(Plant_Info_Analysis$CAMEPlantPres=="101"), ]$CAMEPlantPres <- "Invasive Moth"#
#
# Native Moth Only#
Plant_Info_Analysis[which(Plant_Info_Analysis$CAMEPlantPres=="011"), ]$CAMEPlantPres <- "Native Moth"#
Plant_Info_Analysis[which(Plant_Info_Analysis$CAMEPlantPres=="010"), ]$CAMEPlantPres <- "Native Moth"#
#
# Native and Invasive Moths#
Plant_Info_Analysis[which(Plant_Info_Analysis$CAMEPlantPres=="110"), ]$CAMEPlantPres <- "Invasive and Native Moths"#
Plant_Info_Analysis[which(Plant_Info_Analysis$CAMEPlantPres=="111"), ]$CAMEPlantPres <- "Invasive and Native Moths"#
#
Plant_Info_Analysis$CAMEPlantPres %<>% factor(levels=c(#
	"No Insects Observed",             #
	"Moth Damage Only,\nNo Insects Observed",#
	"Native Moth",                           #
	"Invasive Moth",                         #
	"Invasive and Native Moths"#
))#
#
# --------------------------------------------------------------------------- ##
# Survival#
# --------------------------------------------------------------------------- ##
Plant_Info_Survival <- Plant_Info_Analysis %>% #
	filter(DaysAlive!=0) %>%#
	dplyr::select(-c(First_Size, Parent)) %>% #
	.[complete.cases(.),] %>%#
	renameSpecies#
Plant_Info_Survival$Island %<>% as.factor#
Plant_Info_Survival$IslandFullNames <- Plant_Info_Survival$Island#
levels(Plant_Info_Survival$IslandFullNames) <- c(#
	 "Island 1",#
	 "Island 2",#
	 "Island 3",#
	 "Island 4",#
	 "Island 5",#
	 "Coastal\nGrassland",#
	 "Beach\nDunes"#
)#
Plant_Info_Survival$DeadFactor <- factor(#
	Plant_Info_Survival$Dead, #
	levels=c("0","1"), #
	ordered=T#
)#
levels(Plant_Info_Survival$DeadFactor) <- c("No","Yes")#
Plant_Info_Survival_stricta <- Plant_Info_Survival %>% #
	filter(Species=="Opuntia stricta")#
Plant_Info_Survival_pusilla <- Plant_Info_Survival %>% #
	filter(Species=="Opuntia pusilla")#
#
write.csv(Plant_Info_Survival_stricta, "../data/Plant_Info_Survival_stricta.csv")#
write.csv(Plant_Info_Survival_pusilla, "../data/Plant_Info_Survival_pusilla.csv")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# prep parent survey data#
# use this dataset to use parent size that is consistent for all offpsring#
A <- Plant_Surveys_by_Year %>% #
	#filter(Species=="Opuntia stricta") %>%#
	dplyr::select(PlantID, Date, Size_t) %>% #
	setnames("Date", "Parent.Obs.Date") %>%#
	setnames("Size_t", "Parent.Size_t")#
# prep offspring survey data#
# use this dataset to figure out first size of offspring#
B <- Plant_Surveys_by_Plant %>% #
	#filter(Species=="Opuntia stricta") %>%#
	dplyr::select(PlantID, Date, Size_t) %>% #
	setnames("Date", "Offspring.Obs.Date") %>%#
	setnames("Size_t", "Offspring.Size_t")#
# merge parent data with offspring info#
C <- Plant_Info_Analysis %>%#
	merge(#
		A, #
		by.x="Parent", #
		by.y="PlantID", #
		all=T#
	) %>%#
	# merge first offspring size#
	filter(!is.na(PlantID)) %>%#
	merge(#
		B,#
		by="PlantID", #
		all.x=T#
		) %>%#
		filter(!is.na(Parent))#
D <- C %>%#
	group_by(PlantID) %>%#
	# remove NAs#
	filter(!is.na(Parent.Size_t)) %>%#
	filter(!is.na(Offspring.Size_t)) %>%#
	filter(!is.na(Parent.Obs.Date)) %>%#
	# remove Parent survey dates that are after offspring was observed#
	filter(Parent.Obs.Date <= First.Survey.Date) %>%#
	# find Parent observation date (WITH a size obs) closest to (or equal to) date that the offspring was observed#
	filter(Parent.Obs.Date==max(Parent.Obs.Date)) %>%#
	# find Offspring observation date (WITH a size obs) closest to (or equal to) date it was first observed#
	filter(Offspring.Obs.Date==min(Offspring.Obs.Date)) %>%#
	setnames("First.Survey.Date", "Date")	#
D %<>% addSamplingYear#
# figure out parent size#
parent_size <- D %>% #
	group_by(Parent, SamplingYear, Parent.Size_t, Offspring.Size_t) %>%#
	# still need to count number of clones per size class#
	summarise(n.clones=length(unique(PlantID))) %>%#
	group_by(Parent, SamplingYear, Parent.Size_t, Offspring.Size_t) %>%#
	summarise(#
		n.clones = n.clones[1],#
		n.offspring.segments = Offspring.Size_t * n.clones#
		) %>%#
	as.data.frame %>% #
	group_by(Parent, SamplingYear) %>%#
	# calculate Parent size as observed parent size plus all offspring; this ensures that a parent cannot have size equal to or less than offspring#
	mutate(Parent_Size_t = Parent.Size_t[1] + sum(n.offspring.segments)) %>%#
	ungroup %>%#
	dplyr::select(Parent, SamplingYear, Parent_Size_t) %>%#
	unique#
# merge offspring info with parent size info#
D %<>% #
	as.data.frame %>%#
   	dplyr::select(Parent, SamplingYear, PlantID, Offspring.Size_t) %>%#
	merge(parent_size, by=c("Parent", "SamplingYear"))#
#
SizeClass <- c(0:5,10,140)#
Parent_Size_Class <- cut(D$Parent_Size_t, SizeClass, include.lowest=T, labels=FALSE)#
E <- cbind(D, Parent_Size_Class)#
Offspring_Size_Class <- cut(E$Offspring.Size_t, SizeClass, include.lowest=T, labels=FALSE)#
clone_production <- cbind(E, Offspring_Size_Class)#
# figure out percentage of segments PER STAGE that became clones#
# so number of clones doesn't matter?#
#
table(clone_production$Offspring_Size_Class, clone_production$Parent_Size_Class)#
#
# need to know number of segments produced per size class#
#
loss_to_clones <- clone_production %>% #
	group_by(Parent, SamplingYear) %>%#
	summarise(#
		Clones_t = length(unique(PlantID)),#
		Size_t_w_clone = paste(unique(Parent_Size_t), collapse=","),#
		Loss_to_Offspring = sum(Offspring.Size_t)#
	)#
#
Plant_Surveys_by_Yearw_clones <- merge(#
		Plant_Surveys_by_Year, #
		loss_to_clones, #
		by.x=c("PlantID", "SamplingYear"), #
		by.y=c("Parent", "SamplingYear"),#
		all=T#
	) %>% #
	as.data.frame#
# replace Clones_t = NA#
Plant_Surveys_by_Yearw_clones[which(is.na(Plant_Surveys_by_Yearw_clones$Clones_t)), ]$Clones_t <- 0#
# replace Size_t_w_clones = NA with recorded Size_t#
Plant_Surveys_by_Yearw_clones[which(is.na(Plant_Surveys_by_Yearw_clones$Size_t_w_clone)), ]$Size_t_w_clone <- Plant_Surveys_by_Yearw_clones[which(is.na(Plant_Surveys_by_Yearw_clones$Size_t_w_clone)), ]$Size_t#
Plant_Surveys_by_Yearw_clones$Size_t_w_clone %<>% as.numeric#
# replace loss to clones = NA with 0#
Plant_Surveys_by_Yearw_clones[which(is.na(Plant_Surveys_by_Yearw_clones$Loss_to_Offspring)), ]$Loss_to_Offspring <- 0#
#
# presence of clonal reproduction#
Plant_Surveys_by_Yearw_clones$ClonePres_t <- ifelse(#
	Plant_Surveys_by_Yearw_clones$Loss_to_Offspring >0,#
	1,#
	0#
)
setwd('/Users/KSauby/Documents/Projects')
setwd("./dataproc")#
#setwd("./modresproc")#
#devtools::test()#
devtools::document()#
devtools::install()
