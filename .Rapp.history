21.4*.813
21.4 -21.4*.813
library(lubridaste)
library(lubrida=te)
library(lubridate)
-v
install.packages("rgeos", repos="http://R-Forge.R-project.org")#
require(rgeos)
library(rgeos)
require(rgeos)
library(rgeos)
install.packages("rgdal", repos="http://R-Forge.R-project.org")#
require(rgdal)
R CMD INSTALL ~/Downloads/rgdal_0.9-1.tar.gz --configure-args='--with-gdal-config=/Library/Frameworks/GDAL.framework/Programs/gdal-config#
 --with-proj-include=/Library/Frameworks/PROJ.framework/Headers#
 --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'
R CMD INSTALL ~/Downloads/rgdal_0.9-1.tar.gz --configure-args='--with-gdal-config=/Library/Frameworks/GDAL.framework/Programs/gdal-config--with-proj-include=/Library/Frameworks/PROJ.framework/Headers--with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'
library(lme3)
library(lme4)
300/241
.244*30
1.25*300
1.25*240
7*12
7849-7527
322/1353
8028-7527
501/1353
8028-7957
1353-501
852/71
7956-7878
8176-8029
8176-8092
250*.75
250*.25
42*2 + 17*2
118/19
21/6.2
59.5*.75
59.5*.5 + 59.5
71/12
597/80
597/8
432/8
15*8 + 9*3
?seq_len
7.25/3
7.25/4
for(i in 0:9){x=cos(2*pi/10*i);y=x+1;z=(y-2)*22;pie(c(y,8-y),col=c(0,7),init.angl=135-z,bo=F,la=NA)}
install.packages("ProjectTemplate")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("data.table")
install.packages("corrgram")
install.packages("survival")
install.packages("shapefiles")
install.packages("rgdal")
install.packages("PBSmapping")
install.packages("sp")
install.packages("gdistance")
install.packages("chron")
install.packages("unmarked")
install.packages("lme4")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")#
require(rgeos)
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
library(rgdal)
install.packages("http://cran.r-project.org/src/contrib/rgdal_0.9-1.tar.gz", repos = NULL, type="source", configure.args = "--with-gdal-config=/Library/Frameworks/GDAL.framework/Versions/1.10/unix/bin/gdal-config --with-proj-include=/Library/Frameworks/PROJ.framework/unix/include --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib")
18/1.618
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/marsico-time-series')
library(ProjectTemplate)#
setwd("/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/marsico-time-series")#
# load project#
load.project()
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/marsico-time-series/munge')
################################################################################
#-----------------------------------------------------------------------------##
# timeseries#
#-----------------------------------------------------------------------------##
################################################################################
#
# read in data#
timeseries <- timeseries.25Jan2015JK.mod %>%#
	as.data.table#
#
# rename Mexico Beach and Sweetwater#
timeseries[Location == "MexicoBeach", 	Location := "MB"]#
timeseries[Location == "Sweetwater", 	Location := "TSP"]#
timeseries[Location == "Nokuse",	 	Location := "N"]#
#
# create unique PlantID variable#
timeseries %<>% mutate(PlantID = paste(Location, ID, sep=""))#
#
# remame column namesnames#
timeseries %<>%#
	setnames("Height", "Height_t") %>%#
	setnames("Pads", "Size_t") %>%#
	setnames("MEPR", "ME_t") %>%#
	setnames("CACA", "CA_t") %>%#
	setnames("DACT", "DA_t") %>%#
	setnames("CHVI", "CH_t") %>%#
	setnames("Width", "Width_t") %>%#
	setnames("Fruit", "Fruit_t")#
#
# Rename Species factor labels#
timeseries[Species == "humifusa", Species := "Opuntia humifusa"]#
timeseries[Species == "stricta", Species := "Opuntia stricta"]#
#
# format as factor#
timeseries$Location %<>% as.factor#
timeseries$Species %<>% as.factor#
#
# Change Zeros to NAs#
	# timeseries[timeseries$PlantSize_t==0, ]#
	# timeseries[timeseries$PlantHeight_t==0, ]#
	# timeseries[timeseries$Width_t==0, ]#
#
	# There should never be observations of 0 pads, 0 height, or 0 width#
	# replace 0 with NA#
cnames <- c("Size_t", "Height_t", "Width_t")#
for (cname in cnames) {#
	timeseries[, cname := Zero_is_NA_Function(timeseries[[cname]]), with=FALSE]#
}#
#
################################################################################
# Process TIME#
################################################################################
#
timeseries$Date %<>% as.Date("%m/%d/%y")#
#
timeseries %<>% #
	mutate(#
		Month 			= month(Date),#
		MonthYear 		= as.character(as.yearmon(Date)),#
		DaysSinceStart 	= as.numeric(Date - min(Date)),#
		VisitNum 		= 0#
	)	 #
#
# check first duplicate data entries#
timeseries %>% #
	group_by(Location, ID, Date) %>%#
	summarise(n.obs = length(Species)) %>%#
	filter(n.obs > 1)#
#-----------------------------------------------------------------------------##
# create "Visit Number" field#
#-----------------------------------------------------------------------------##
timeseries[Date >= "2009-01-21" & Date <= "2009-01-26", VisitNum := 1]#
timeseries[Date >= "2009-04-25" & Date <= "2009-04-30", VisitNum := 2]#
timeseries[Date >= "2009-07-23" & Date <= "2009-07-28", VisitNum := 3]#
timeseries[Date >= "2009-10-23" & Date <= "2009-10-28", VisitNum := 4]#
timeseries[Date >= "2010-05-14" & Date <= "2010-05-19", VisitNum := 5]#
timeseries[Date >= "2010-11-15" & Date <= "2010-11-20", VisitNum := 6]#
timeseries[Date >= "2011-05-12" & Date <= "2011-05-17", VisitNum := 7]#
timeseries[Date >= "2011-12-15" & Date <= "2012-01-17", VisitNum := 8]#
timeseries[Date >= "2012-05-13" & Date <= "2012-05-16", VisitNum := 9]#
timeseries[Date >= "2012-12-14" & Date <= "2012-12-19", VisitNum := 10]#
timeseries[Date >= "2013-05-18" & Date <= "2013-05-23", VisitNum := 11]#
timeseries[Date >= "2014-01-12" & Date <= "2014-01-17", VisitNum := 12]#
#
#-----------------------------------------------------------------------------##
# check for erroneous dates#
#-----------------------------------------------------------------------------##
print("Surveys where visit number = 0")#
print(filter(timeseries, VisitNum=="0"))#
# timeseries <- timeseries[which(timeseries$VisitNum!="0"), ]#
#
################################################################################
# Fruit Presence#
################################################################################
#
# make FruitPres variable#
timeseries %<>% #
	mutate(FruitPres_t = ifelse(Fruit_t>0, 1, 0)) %>%#
	# add NAs#
	.[is.na(Fruit_t), FruitPres_t := NA]#
################################################################################
# Classify sites as coastal or inland#
################################################################################
#
timeseries %<>%#
	mutate(Coastal = as.integer(NA)) %>%#
	# Nokuse and TSP are given 0 because they are not coastal#
	.[Location=="N" | Location=="TSP", Coastal := 0] %>%#
	.[Location!="N" & Location!="TSP", Coastal := 1]#
timeseries$Coastal %<>% as.factor#
#
################################################################################
# Insect presence during entire study#
################################################################################
#
#-----------------------------------------------------------------------------##
# INSECT ever present?#
#-----------------------------------------------------------------------------##
#
timeseries %<>%#
	group_by(PlantID) %>%#
	mutate(#
		CACAPresent = ifelse(sum(CA_t, na.rm=T) > 0, 1, 0),#
		MEPRPresent = ifelse(sum(ME_t, na.rm=T) > 0, 1, 0),#
		DACTPresent = ifelse(sum(DA_t, na.rm=T) > 0, 1, 0),#
		CHVIPresent = ifelse(sum(CH_t, na.rm=T) > 0, 1, 0)#
	)#
#
################################################################################
# Insect presence during current survey#
################################################################################
#
timeseries$NumInsectSpecies_t <- timeseries %>%#
	dplyr::select(ME_t, CA_t, CH_t, DA_t) %>%#
	apply(., 1, mysum#
)#
################################################################################
# SEASON#
################################################################################
#
timeseries$Season = "NA"#
#
# function modified from http://stackoverflow.com/questions/9500114/find-which-season-a-particular-date-belongs-to#
# solstice and equinox dates: http://en.wikipedia.org/wiki/Solstice#
#
timeseries[which(timeseries$Year==2009),]$Season <- getSeason2009(timeseries[which(timeseries$Year==2009),]$Date)#
#
timeseries[which(timeseries$Year==2010),]$Season <- getSeason2010(timeseries[which(timeseries$Year==2010),]$Date)#
#
timeseries[which(timeseries$Year==2011),]$Season <- getSeason2011(timeseries[which(timeseries$Year==2011),]$Date)#
#
timeseries[which(timeseries$Year==2012),]$Season <- getSeason2012(timeseries[which(timeseries$Year==2012),]$Date)#
#
timeseries[which(timeseries$Year==2013),]$Season <- getSeason2013(timeseries[which(timeseries$Year==2013),]$Date)#
#
timeseries[which(timeseries$Year==2014),]$Season <- getSeason2014(timeseries[which(timeseries$Year==2014),]$Date)#
#
################################################################################
# Classify Surveys as Complete#
################################################################################
#
timeseries$complete_insect_surveys <- ifelse(rowSums(is.na(#
	timeseries[, .(ME_t, CA_t, CH_t, DA_t)]))==0, 1, 0#
)#
#
timeseries$complete_surveys <- ifelse(rowSums(is.na(#
	timeseries[, #
	.(#
	# insects#
	ME_t,                #
	CA_t,#
	CH_t,#
	DA_t,#
	# number of segments#
	Size_t,#
	# flowers and fruit#
	Fruit_t#
	)]))==0, 1, 0#
)#
#
################################################################################
# Calculate Volume#
################################################################################
#
timeseries %<>% #
	mutate(#
		# calculate volume#
		Cone_t = pi * (((Width_t)/4)^2) * Height_t / 3,#
		Cylinder_Tall_t = pi * ((Width_t/2)^2) * Height_t#
		)
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/marsico-time-series/munge')
################################################################################
#-----------------------------------------------------------------------------##
# timeseries#
#-----------------------------------------------------------------------------##
################################################################################
#
# read in data#
timeseries <- timeseries.25Jan2015JK.mod %>%#
	as.data.table#
#
# rename Mexico Beach and Sweetwater#
timeseries[Location == "MexicoBeach", 	Location := "MB"]#
timeseries[Location == "Sweetwater", 	Location := "TSP"]#
timeseries[Location == "Nokuse",	 	Location := "N"]#
#
# create unique PlantID variable#
timeseries %<>% mutate(PlantID = paste(Location, ID, sep=""))#
#
# remame column namesnames#
timeseries %<>%#
	setnames("Height", "Height_t") %>%#
	setnames("Pads", "Size_t") %>%#
	setnames("MEPR", "ME_t") %>%#
	setnames("CACA", "CA_t") %>%#
	setnames("DACT", "DA_t") %>%#
	setnames("CHVI", "CH_t") %>%#
	setnames("Width", "Width_t") %>%#
	setnames("Fruit", "Fruit_t")#
#
# Rename Species factor labels#
timeseries[Species == "humifusa", Species := "Opuntia humifusa"]#
timeseries[Species == "stricta", Species := "Opuntia stricta"]#
#
# format as factor#
timeseries$Location %<>% as.factor#
timeseries$Species %<>% as.factor#
#
# Change Zeros to NAs#
	# timeseries[timeseries$PlantSize_t==0, ]#
	# timeseries[timeseries$PlantHeight_t==0, ]#
	# timeseries[timeseries$Width_t==0, ]#
#
	# There should never be observations of 0 pads, 0 height, or 0 width#
	# replace 0 with NA#
cnames <- c("Size_t", "Height_t", "Width_t")#
for (cname in cnames) {#
	timeseries[, cname := Zero_is_NA_Function(timeseries[[cname]]), with=FALSE]#
}#
#
################################################################################
# Process TIME#
################################################################################
#
timeseries$Date %<>% as.Date("%m/%d/%y")#
#
timeseries %<>% #
	mutate(#
		Month 			= month(Date),#
		MonthYear 		= as.character(as.yearmon(Date)),#
		DaysSinceStart 	= as.numeric(Date - min(Date)),#
		VisitNum 		= 0#
	)	 #
#
# check first duplicate data entries#
timeseries %>% #
	group_by(Location, ID, Date) %>%#
	summarise(n.obs = length(Species)) %>%#
	filter(n.obs > 1)#
#-----------------------------------------------------------------------------##
# create "Visit Number" field#
#-----------------------------------------------------------------------------##
timeseries[Date >= "2009-01-21" & Date <= "2009-01-26", VisitNum := 1]#
timeseries[Date >= "2009-04-25" & Date <= "2009-04-30", VisitNum := 2]#
timeseries[Date >= "2009-07-23" & Date <= "2009-07-28", VisitNum := 3]#
timeseries[Date >= "2009-10-23" & Date <= "2009-10-28", VisitNum := 4]#
timeseries[Date >= "2010-05-14" & Date <= "2010-05-19", VisitNum := 5]#
timeseries[Date >= "2010-11-15" & Date <= "2010-11-20", VisitNum := 6]#
timeseries[Date >= "2011-05-12" & Date <= "2011-05-17", VisitNum := 7]#
timeseries[Date >= "2011-12-15" & Date <= "2012-01-17", VisitNum := 8]#
timeseries[Date >= "2012-05-13" & Date <= "2012-05-16", VisitNum := 9]#
timeseries[Date >= "2012-12-14" & Date <= "2012-12-19", VisitNum := 10]#
timeseries[Date >= "2013-05-18" & Date <= "2013-05-23", VisitNum := 11]#
timeseries[Date >= "2014-01-12" & Date <= "2014-01-17", VisitNum := 12]#
#
#-----------------------------------------------------------------------------##
# check for erroneous dates#
#-----------------------------------------------------------------------------##
print("Surveys where visit number = 0")#
print(filter(timeseries, VisitNum=="0"))#
# timeseries <- timeseries[which(timeseries$VisitNum!="0"), ]#
#
################################################################################
# Fruit Presence#
################################################################################
#
# make FruitPres variable#
timeseries %<>% #
	mutate(FruitPres_t = ifelse(Fruit_t>0, 1, 0)) %>%#
	# add NAs#
	.[is.na(Fruit_t), FruitPres_t := NA]#
################################################################################
# Classify sites as coastal or inland#
################################################################################
#
timeseries %<>%#
	mutate(Coastal = as.integer(NA)) %>%#
	# Nokuse and TSP are given 0 because they are not coastal#
	.[Location=="N" | Location=="TSP", Coastal := 0] %>%#
	.[Location!="N" & Location!="TSP", Coastal := 1]#
timeseries$Coastal %<>% as.factor#
#
################################################################################
# Insect presence during entire study#
################################################################################
#
#-----------------------------------------------------------------------------##
# INSECT ever present?#
#-----------------------------------------------------------------------------##
#
timeseries %<>%#
	group_by(PlantID) %>%#
	mutate(#
		CACAPresent = ifelse(sum(CA_t, na.rm=T) > 0, 1, 0),#
		MEPRPresent = ifelse(sum(ME_t, na.rm=T) > 0, 1, 0),#
		DACTPresent = ifelse(sum(DA_t, na.rm=T) > 0, 1, 0),#
		CHVIPresent = ifelse(sum(CH_t, na.rm=T) > 0, 1, 0)#
	)#
#
################################################################################
# Insect presence during current survey#
################################################################################
#
timeseries$NumInsectSpecies_t <- timeseries %>%#
	dplyr::select(ME_t, CA_t, CH_t, DA_t) %>%#
	apply(., 1, mysum#
)#
################################################################################
# SEASON#
################################################################################
#
timeseries$Season = "NA"#
#
# function modified from http://stackoverflow.com/questions/9500114/find-which-season-a-particular-date-belongs-to#
# solstice and equinox dates: http://en.wikipedia.org/wiki/Solstice#
#
timeseries[which(timeseries$Year==2009),]$Season <- getSeason2009(timeseries[which(timeseries$Year==2009),]$Date)#
#
timeseries[which(timeseries$Year==2010),]$Season <- getSeason2010(timeseries[which(timeseries$Year==2010),]$Date)#
#
timeseries[which(timeseries$Year==2011),]$Season <- getSeason2011(timeseries[which(timeseries$Year==2011),]$Date)#
#
timeseries[which(timeseries$Year==2012),]$Season <- getSeason2012(timeseries[which(timeseries$Year==2012),]$Date)#
#
timeseries[which(timeseries$Year==2013),]$Season <- getSeason2013(timeseries[which(timeseries$Year==2013),]$Date)#
#
timeseries[which(timeseries$Year==2014),]$Season <- getSeason2014(timeseries[which(timeseries$Year==2014),]$Date)#
#
################################################################################
# Classify Surveys as Complete#
################################################################################
#
timeseries$complete_insect_surveys <- ifelse(rowSums(is.na(#
	timeseries[, .(ME_t, CA_t, CH_t, DA_t)]))==0, 1, 0#
)#
#
timeseries$complete_surveys <- ifelse(rowSums(is.na(#
	timeseries[, #
	.(#
	# insects#
	ME_t,                #
	CA_t,#
	CH_t,#
	DA_t,#
	# number of segments#
	Size_t,#
	# flowers and fruit#
	Fruit_t#
	)]))==0, 1, 0#
)#
#
################################################################################
# Calculate Volume#
################################################################################
#
timeseries %<>% #
	mutate(#
		# calculate volume#
		Cone_t = pi * (((Width_t)/4)^2) * Height_t / 3,#
		Cylinder_Tall_t = pi * ((Width_t/2)^2) * Height_t#
		)
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/marsico-time-series/munge')
filter(timeseries, VisitNum=="0")
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/marsico-time-series/munge')
date_errors <- filter(timeseries, VisitNum=="0")
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/marsico-time-series/munge')
dim(date_errors)[1]
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/marsico-time-series/munge')
################################################################################
#-----------------------------------------------------------------------------##
# timeseries#
#-----------------------------------------------------------------------------##
################################################################################
#
# read in data#
timeseries <- timeseries.25Jan2015JK.mod %>%#
	as.data.table#
#
# rename Mexico Beach and Sweetwater#
timeseries[Location == "MexicoBeach", 	Location := "MB"]#
timeseries[Location == "Sweetwater", 	Location := "TSP"]#
timeseries[Location == "Nokuse",	 	Location := "N"]#
#
# create unique PlantID variable#
timeseries %<>% mutate(PlantID = paste(Location, ID, sep=""))#
#
# remame column namesnames#
timeseries %<>%#
	setnames("Height", "Height_t") %>%#
	setnames("Pads", "Size_t") %>%#
	setnames("MEPR", "ME_t") %>%#
	setnames("CACA", "CA_t") %>%#
	setnames("DACT", "DA_t") %>%#
	setnames("CHVI", "CH_t") %>%#
	setnames("Width", "Width_t") %>%#
	setnames("Fruit", "Fruit_t")#
#
# Rename Species factor labels#
timeseries[Species == "humifusa", Species := "Opuntia humifusa"]#
timeseries[Species == "stricta", Species := "Opuntia stricta"]#
#
# format as factor#
timeseries$Location %<>% as.factor#
timeseries$Species %<>% as.factor#
#
# Change Zeros to NAs#
	# timeseries[timeseries$PlantSize_t==0, ]#
	# timeseries[timeseries$PlantHeight_t==0, ]#
	# timeseries[timeseries$Width_t==0, ]#
#
	# There should never be observations of 0 pads, 0 height, or 0 width#
	# replace 0 with NA#
cnames <- c("Size_t", "Height_t", "Width_t")#
for (cname in cnames) {#
	timeseries[, cname := Zero_is_NA_Function(timeseries[[cname]]), with=FALSE]#
}#
#
################################################################################
# Process TIME#
################################################################################
#
timeseries$Date %<>% as.Date("%m/%d/%y")#
#
timeseries %<>% #
	mutate(#
		Month 			= month(Date),#
		MonthYear 		= as.character(as.yearmon(Date)),#
		DaysSinceStart 	= as.numeric(Date - min(Date)),#
		VisitNum 		= 0#
	)	 #
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- timeseries %>% #
	group_by(Location, ID, Date) %>%#
	summarise(n.obs = length(Species)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
###########################
#
#-----------------------------------------------------------------------------##
# create "Visit Number" field#
#-----------------------------------------------------------------------------##
timeseries[Date >= "2009-01-21" & Date <= "2009-01-26", VisitNum := 1]#
timeseries[Date >= "2009-04-25" & Date <= "2009-04-30", VisitNum := 2]#
timeseries[Date >= "2009-07-23" & Date <= "2009-07-28", VisitNum := 3]#
timeseries[Date >= "2009-10-23" & Date <= "2009-10-28", VisitNum := 4]#
timeseries[Date >= "2010-05-14" & Date <= "2010-05-19", VisitNum := 5]#
timeseries[Date >= "2010-11-15" & Date <= "2010-11-20", VisitNum := 6]#
timeseries[Date >= "2011-05-12" & Date <= "2011-05-17", VisitNum := 7]#
timeseries[Date >= "2011-12-15" & Date <= "2012-01-17", VisitNum := 8]#
timeseries[Date >= "2012-05-13" & Date <= "2012-05-16", VisitNum := 9]#
timeseries[Date >= "2012-12-14" & Date <= "2012-12-19", VisitNum := 10]#
timeseries[Date >= "2013-05-18" & Date <= "2013-05-23", VisitNum := 11]#
timeseries[Date >= "2014-01-12" & Date <= "2014-01-17", VisitNum := 12]#
#
########################## ERROR MESSAGE#
# check for erroneous dates#
date_errors <- filter(timeseries, VisitNum=="0")#
# timeseries <- timeseries[which(timeseries$VisitNum!="0"), ]#
if (dim(date_errors)[1] > 0) {#
		stop("At least one observation was given a visit number of 0.")#
}#
########################## #
#
################################################################################
# Fruit Presence#
################################################################################
#
# make FruitPres variable#
timeseries %<>% #
	mutate(FruitPres_t = ifelse(Fruit_t>0, 1, 0)) %>%#
	# add NAs#
	.[is.na(Fruit_t), FruitPres_t := NA]#
################################################################################
# Classify sites as coastal or inland#
################################################################################
#
timeseries %<>%#
	mutate(Coastal = as.integer(NA)) %>%#
	# Nokuse and TSP are given 0 because they are not coastal#
	.[Location=="N" | Location=="TSP", Coastal := 0] %>%#
	.[Location!="N" & Location!="TSP", Coastal := 1]#
timeseries$Coastal %<>% as.factor#
#
################################################################################
# Insect presence during entire study#
################################################################################
#
#-----------------------------------------------------------------------------##
# INSECT ever present?#
#-----------------------------------------------------------------------------##
#
timeseries %<>%#
	group_by(PlantID) %>%#
	mutate(#
		CACAPresent = ifelse(sum(CA_t, na.rm=T) > 0, 1, 0),#
		MEPRPresent = ifelse(sum(ME_t, na.rm=T) > 0, 1, 0),#
		DACTPresent = ifelse(sum(DA_t, na.rm=T) > 0, 1, 0),#
		CHVIPresent = ifelse(sum(CH_t, na.rm=T) > 0, 1, 0)#
	)#
#
################################################################################
# Insect presence during current survey#
################################################################################
#
timeseries$NumInsectSpecies_t <- timeseries %>%#
	dplyr::select(ME_t, CA_t, CH_t, DA_t) %>%#
	apply(., 1, mysum#
)#
################################################################################
# SEASON#
################################################################################
#
timeseries$Season = "NA"#
#
# function modified from http://stackoverflow.com/questions/9500114/find-which-season-a-particular-date-belongs-to#
# solstice and equinox dates: http://en.wikipedia.org/wiki/Solstice#
#
timeseries[which(timeseries$Year==2009),]$Season <- getSeason2009(timeseries[which(timeseries$Year==2009),]$Date)#
#
timeseries[which(timeseries$Year==2010),]$Season <- getSeason2010(timeseries[which(timeseries$Year==2010),]$Date)#
#
timeseries[which(timeseries$Year==2011),]$Season <- getSeason2011(timeseries[which(timeseries$Year==2011),]$Date)#
#
timeseries[which(timeseries$Year==2012),]$Season <- getSeason2012(timeseries[which(timeseries$Year==2012),]$Date)#
#
timeseries[which(timeseries$Year==2013),]$Season <- getSeason2013(timeseries[which(timeseries$Year==2013),]$Date)#
#
timeseries[which(timeseries$Year==2014),]$Season <- getSeason2014(timeseries[which(timeseries$Year==2014),]$Date)#
#
################################################################################
# Classify Surveys as Complete#
################################################################################
#
timeseries$complete_insect_surveys <- ifelse(rowSums(is.na(#
	timeseries[, .(ME_t, CA_t, CH_t, DA_t)]))==0, 1, 0#
)#
#
timeseries$complete_surveys <- ifelse(rowSums(is.na(#
	timeseries[, #
	.(#
	# insects#
	ME_t,                #
	CA_t,#
	CH_t,#
	DA_t,#
	# number of segments#
	Size_t,#
	# flowers and fruit#
	Fruit_t#
	)]))==0, 1, 0#
)#
#
################################################################################
# Calculate Volume#
################################################################################
#
timeseries %<>% #
	mutate(#
		# calculate volume#
		Cone_t = pi * (((Width_t)/4)^2) * Height_t / 3,#
		Cylinder_Tall_t = pi * ((Width_t/2)^2) * Height_t#
		)
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/marsico-time-series/munge')
#' Process dataset#
#' #
#' @description Process data:#
#' \itemize{#
#'  \item rename locations, variables, and species#
#'  \item format variables#
#'  \item process date and check for duplicate entries#
#'  \item create "Visit Number" field#
#'  \item create "Fruit Presence" ariable#
#'  \item Classify sites as coastal or inland#
#'  \item Create variables for insect presence during the entire study and during the current study#
#'  \item Create season variable#
#'  \item Classify surveys as complete#
#'  \item calculate plant volume#
#' }#
#' @param dataset#
#' @export#
#
process_data <- function(dataset) {#
	# read in data#
	timeseries <- dataset %>% as.data.table#
	# rename Mexico Beach and Sweetwater#
	timeseries[Location == "MexicoBeach", 	Location := "MB"]#
	timeseries[Location == "Sweetwater", 	Location := "TSP"]#
	timeseries[Location == "Nokuse",	 	Location := "N"]#
	# create unique PlantID variable#
	timeseries %<>% mutate(PlantID = paste(Location, ID, sep=""))#
	# remame column namesnames#
	timeseries %<>%#
		setnames("Height", "Height_t") %>%#
		setnames("Pads", "Size_t") %>%#
		setnames("MEPR", "ME_t") %>%#
		setnames("CACA", "CA_t") %>%#
		setnames("DACT", "DA_t") %>%#
		setnames("CHVI", "CH_t") %>%#
		setnames("Width", "Width_t") %>%#
		setnames("Fruit", "Fruit_t")#
	# Rename Species factor labels#
	timeseries[Species == "humifusa", Species := "Opuntia humifusa"]#
	timeseries[Species == "stricta", Species := "Opuntia stricta"]#
	# format as factor#
	timeseries$Location %<>% as.factor#
	timeseries$Species %<>% as.factor#
	# Change Zeros to NAs#
		# timeseries[timeseries$PlantSize_t==0, ]#
		# timeseries[timeseries$PlantHeight_t==0, ]#
		# timeseries[timeseries$Width_t==0, ]#
#
		# There should never be observations of 0 pads, 0 height, or 0 width#
		# replace 0 with NA#
	cnames <- c("Size_t", "Height_t", "Width_t")#
	for (cname in cnames) {#
		timeseries[, cname := Zero_is_NA_Function(timeseries[[cname]]), with=FALSE]#
	}#
	#############################################################################
	# Process TIME#
	#############################################################################
	timeseries$Date %<>% as.Date("%m/%d/%y")#
	timeseries %<>% #
		mutate(#
			Month 			= month(Date),#
			MonthYear 		= as.character(as.yearmon(Date)),#
			DaysSinceStart 	= as.numeric(Date - min(Date)),#
			VisitNum 		= 0#
		)	 #
	########################## ERROR MESSAGE#
	# check first duplicate data entries#
	dups <- timeseries %>% #
		group_by(Location, ID, Date) %>%#
		summarise(n.obs = length(Species)) %>%#
		filter(n.obs > 1)#
#
	if (dim(dups)[1] > 0) {#
			stop("Duplicates observations for a PlantID, Date combination are #
				present in the dataset.")#
	}#
	#--------------------------------------------------------------------------##
	# create "Visit Number" field#
	#--------------------------------------------------------------------------##
	timeseries[Date >= "2009-01-21" & Date <= "2009-01-26", VisitNum := 1]#
	timeseries[Date >= "2009-04-25" & Date <= "2009-04-30", VisitNum := 2]#
	timeseries[Date >= "2009-07-23" & Date <= "2009-07-28", VisitNum := 3]#
	timeseries[Date >= "2009-10-23" & Date <= "2009-10-28", VisitNum := 4]#
	timeseries[Date >= "2010-05-14" & Date <= "2010-05-19", VisitNum := 5]#
	timeseries[Date >= "2010-11-15" & Date <= "2010-11-20", VisitNum := 6]#
	timeseries[Date >= "2011-05-12" & Date <= "2011-05-17", VisitNum := 7]#
	timeseries[Date >= "2011-12-15" & Date <= "2012-01-17", VisitNum := 8]#
	timeseries[Date >= "2012-05-13" & Date <= "2012-05-16", VisitNum := 9]#
	timeseries[Date >= "2012-12-14" & Date <= "2012-12-19", VisitNum := 10]#
	timeseries[Date >= "2013-05-18" & Date <= "2013-05-23", VisitNum := 11]#
	timeseries[Date >= "2014-01-12" & Date <= "2014-01-17", VisitNum := 12]#
	########################## ERROR MESSAGE#
	# check for erroneous dates#
	date_errors <- filter(timeseries, VisitNum=="0")#
	# timeseries <- timeseries[which(timeseries$VisitNum!="0"), ]#
	if (dim(date_errors)[1] > 0) {#
			stop("At least one observation was given a visit number of 0.")#
	}#
	#############################################################################
	# Fruit Presence#
	#############################################################################
	# make FruitPres variable#
	timeseries %<>% #
		mutate(FruitPres_t = ifelse(Fruit_t>0, 1, 0)) %>%#
		# add NAs#
		.[is.na(Fruit_t), FruitPres_t := NA]#
	#############################################################################
	# Classify sites as coastal or inland#
	#############################################################################
	timeseries %<>%#
		mutate(Coastal = as.integer(NA)) %>%#
		# Nokuse and TSP are given 0 because they are not coastal#
		.[Location=="N" | Location=="TSP", Coastal := 0] %>%#
		.[Location!="N" & Location!="TSP", Coastal := 1]#
	timeseries$Coastal %<>% as.factor#
	#############################################################################
	# Insect presence during entire study#
	#############################################################################
	#--------------------------------------------------------------------------##
	# INSECT ever present?#
	#--------------------------------------------------------------------------##
	timeseries %<>%#
		group_by(PlantID) %>%#
		mutate(#
			CACAPresent = ifelse(sum(CA_t, na.rm=T) > 0, 1, 0),#
			MEPRPresent = ifelse(sum(ME_t, na.rm=T) > 0, 1, 0),#
			DACTPresent = ifelse(sum(DA_t, na.rm=T) > 0, 1, 0),#
			CHVIPresent = ifelse(sum(CH_t, na.rm=T) > 0, 1, 0)#
		)#
	#############################################################################
	# Insect presence during current survey#
	#############################################################################
	timeseries$NumInsectSpecies_t <- timeseries %>%#
		dplyr::select(ME_t, CA_t, CH_t, DA_t) %>%#
		apply(., 1, mysum#
	)#
	#############################################################################
	# SEASON#
	#############################################################################
	timeseries$Season = "NA"#
	# function modified from http://stackoverflow.com/questions/9500114/find-which-season-a-particular-date-belongs-to#
	# solstice and equinox dates: http://en.wikipedia.org/wiki/Solstice#
	timeseries[which(timeseries$Year==2009),]$Season <- #
		getSeason2009(timeseries[which(timeseries$Year==2009),]$Date)#
	timeseries[which(timeseries$Year==2010),]$Season <- #
		getSeason2010(timeseries[which(timeseries$Year==2010),]$Date)#
	timeseries[which(timeseries$Year==2011),]$Season <- #
		getSeason2011(timeseries[which(timeseries$Year==2011),]$Date)#
	timeseries[which(timeseries$Year==2012),]$Season <- #
		getSeason2012(timeseries[which(timeseries$Year==2012),]$Date)#
	timeseries[which(timeseries$Year==2013),]$Season <- #
		getSeason2013(timeseries[which(timeseries$Year==2013),]$Date)#
	timeseries[which(timeseries$Year==2014),]$Season <- #
		getSeason2014(timeseries[which(timeseries$Year==2014),]$Date)#
	#############################################################################
	# Classify Surveys as Complete#
	#############################################################################
	timeseries$complete_insect_surveys <- ifelse(rowSums(is.na(#
		timeseries[, .(ME_t, CA_t, CH_t, DA_t)]))==0, 1, 0#
	)#
	timeseries$complete_surveys <- ifelse(rowSums(is.na(#
		timeseries[, #
		.(#
		# insects#
		ME_t,                #
		CA_t,#
		CH_t,#
		DA_t,#
		# number of segments#
		Size_t,#
		# flowers and fruit#
		Fruit_t#
		)]))==0, 1, 0#
	)#
	#############################################################################
	# Calculate Volume#
	#############################################################################
	timeseries %<>% #
		mutate(#
			# calculate volume#
			Cone_t = pi * (((Width_t)/4)^2) * Height_t / 3,#
			Cylinder_Tall_t = pi * ((Width_t/2)^2) * Height_t#
			)#
	#############################################################################
	return(timeseries)#
}
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/marsico-time-series/munge')
timeseries <- process_data(timeseries.25Jan2015JK.mod)
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/marsico-time-series/munge')
#' Create Dataset with All Surveys#
#' @description Create dataset from all surveys and calculate:#
#' \itemize{#
#'  \item lagged fruit values#
#'  \item lagged dates#
#'  \item lagged insect presence#
#'  \item relative growth rate#
#' }#
#' @param timeseries#
#' @export#
#
createAllSurveysDataset <- function(timeseries) {#
	timeseries_all_surveys <- timeseries#
	timeseries_all_surveys %<>% #
								# lag variables#
								lag_size_fruit_function %>%#
								lag_dates_function %>%#
								lag_insects_function %>%#
								# RGR#
								RGR_function#
	# Save#
	setwd("/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/marsico-time-series/")#
	cache("timeseries_all_surveys")#
	return(timeseries_all_surveys)#
}	#
#' Create Dataset with Fall/Winter Surveys#
#' @description Create dataset from fall/winter surveys and calculate:#
#' \itemize{#
#'  \item lagged fruit values#
#'  \item lagged dates#
#'  \item lagged insect presence#
#'  \item relative growth rate#
#' }#
#' @param timeseries#
#' @export#
createFallWinterSurveysDataset <- function(timeseries) {#
	timeseries_winter <- timeseries#
	timeseries_winter$Visit <- "NA"#
	timeseries_winter %<>% #
		as.data.frame %>%#
		group_by(Date) %>% #
		mutate(#
			Visit = replace(Visit, which(Date >= "2009-01-21" & #
				Date < "2010-11-15"), "Year2010"),#
			Visit = replace(Visit, which(Date >= "2010-11-15" & #
				Date < "2011-12-15"), "Year2011"),#
			Visit = replace(Visit, which(Date >= "2011-12-15" & #
				Date < "2012-12-14"), "Year2012"),#
			Visit = replace(Visit, which(Date >= "2012-12-14" & #
				Date < "2014-01-12"), "Year2014"))#
	new = timeseries_winter %>%#
		select(Visit, PlantID, ME_t, CA_t, CH_t, DA_t) %>%#
		group_by(Visit, PlantID) %>%#
		summarise(#
			CAyr_t 			= ifelse(sum(CA_t, na.rm=T)>0, 1, 0),#
			MEyr_t 			= ifelse(sum(ME_t, na.rm=T)>0, 1, 0),#
			CHyr_t 			= ifelse(sum(CH_t, na.rm=T)>0, 1, 0),#
			DAyr_t 			= ifelse(sum(DA_t, na.rm=T)>0, 1, 0),#
			Insectyr_t 		= ifelse(#
				sum(DA_t, CA_t, CH_t, ME_t, na.rm=T) > 0, 1, 0),#
			NatInsectyr_t 	= ifelse(sum(DA_t, CH_t, ME_t, na.rm=T)>0, 1, 0)#
		)#
	# use only winter data#
	timeseries_winter %<>%#
		mutate(Month=month(Date)) %>%#
		arrange(Date) %>%#
		filter(Month==10 | Month==11 | Month==12 | Month==1) %>%#
		merge(new, by=c("Visit", "PlantID"), all.x=T)#
	# create lag and RGR variables#
	timeseries_winter %<>%#
						# lag variables#
						lag_size_fruit_function %>%#
						lag_dates_function %>%#
						lag_insects_yr_function %>%#
						# RGR#
						as.data.frame %>%#
						RGR_function#
	# Save#
	setwd("/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/marsico-time-series/")#
	cache("timeseries_winter")#
	return(timeseries_winter)#
}	#
#' Create Dataset with Spring/Summer Surveys#
#' @description Create dataset from spring/summer surveys and calculate:#
#' \itemize{#
#'  \item lagged fruit values#
#'  \item lagged dates#
#'  \item lagged insect presence#
#'  \item relative growth rate#
#' }#
#' @param timeseries#
#' @export#
createSpringSummerSurveysDataset <- function(timeseries) {#
	timeseries_spring <- timeseries#
	timeseries_spring$Visit <- "NA"#
	timeseries_spring %<>% #
		as.data.frame %>%#
		group_by(Date) %>% #
		mutate(#
			Visit = replace(Visit, which(Date >= "2009-04-01" & #
				Date < "2010-05-01"), "Year1"),#
			Visit = replace(Visit, which(Date >= "2010-05-01" & #
				Date < "2011-05-01"), "Year2"),#
			Visit = replace(Visit, which(Date >= "2011-05-01" & #
				Date < "2012-05-01"), "Year3"),#
			Visit = replace(Visit, which(Date >= "2012-05-01" & #
				Date < "2013-05-01"), "Year4"),#
			Visit = replace(Visit, which(Date > "2013-05-01" ), "Year5"))#
	new = timeseries_spring %>%#
		select(Visit, PlantID, ME_t, CA_t, CH_t, DA_t) %>%#
		group_by(Visit, PlantID) %>%#
		summarise(#
			CAyr_t 			= ifelse(sum(CA_t, na.rm=T)>0, 1, 0),#
			MEyr_t 			= ifelse(sum(ME_t, na.rm=T)>0, 1, 0),#
			CHyr_t 			= ifelse(sum(CH_t, na.rm=T)>0, 1, 0),#
			DAyr_t 			= ifelse(sum(DA_t, na.rm=T)>0, 1, 0),#
			Insectyr_t 		= ifelse(#
				sum(DA_t, CA_t, CH_t, ME_t, na.rm=T) > 0, 1, 0),#
			NatInsectyr_t 	= ifelse(sum(DA_t, CH_t, ME_t, na.rm=T)>0, 1, 0)#
		)#
	# use only spring data#
	timeseries_spring %<>%#
		mutate(Month=month(Date)) %>%#
		arrange(Date) %>%#
		filter(Month==4 | Month==5) %>%#
		merge(new, by=c("Visit", "PlantID"), all.x=T)#
	# create lag and RGR variables#
	timeseries_spring %<>%#
						# lag variables#
						lag_size_fruit_function %>%#
						lag_dates_function %>%#
						lag_insects_yr_function %>%#
						# RGR#
						as.data.frame %>%#
						RGR_function#
	# Save#
	setwd("/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/marsico-time-series/")#
	cache("timeseries_spring")#
	return(timeseries_spring)#
}
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/marsico-time-series/munge')
#' Process dataset#
#' #
#' @description Process data:#
#' \itemize{#
#'  \item rename locations, variables, and species#
#'  \item format variables#
#'  \item process date and check for duplicate entries#
#'  \item create "Visit Number" field#
#'  \item create "Fruit Presence" ariable#
#'  \item Classify sites as coastal or inland#
#'  \item Create variables for insect presence during the entire study and during the current study#
#'  \item Create season variable#
#'  \item Classify surveys as complete#
#'  \item calculate plant volume#
#' 	\item create PlantID2#
#' }#
#' @param dataset#
#' @export#
#
processData <- function(dataset) {#
	# read in data#
	timeseries <- dataset %>% as.data.table#
	# rename Mexico Beach and Sweetwater#
	timeseries[Location == "MexicoBeach", 	Location := "MB"]#
	timeseries[Location == "Sweetwater", 	Location := "TSP"]#
	timeseries[Location == "Nokuse",	 	Location := "N"]#
	# create unique PlantID variable#
	timeseries %<>% mutate(PlantID = paste(Location, ID, sep=""))#
	# remame column namesnames#
	timeseries %<>%#
		setnames("Height", "Height_t") %>%#
		setnames("Pads", "Size_t") %>%#
		setnames("MEPR", "ME_t") %>%#
		setnames("CACA", "CA_t") %>%#
		setnames("DACT", "DA_t") %>%#
		setnames("CHVI", "CH_t") %>%#
		setnames("Width", "Width_t") %>%#
		setnames("Fruit", "Fruit_t")#
	# Rename Species factor labels#
	timeseries[Species == "humifusa", Species := "Opuntia humifusa"]#
	timeseries[Species == "stricta", Species := "Opuntia stricta"]#
	# format as factor#
	timeseries$Location %<>% as.factor#
	timeseries$Species %<>% as.factor#
	# Change Zeros to NAs#
		# timeseries[timeseries$PlantSize_t==0, ]#
		# timeseries[timeseries$PlantHeight_t==0, ]#
		# timeseries[timeseries$Width_t==0, ]#
#
		# There should never be observations of 0 pads, 0 height, or 0 width#
		# replace 0 with NA#
	cnames <- c("Size_t", "Height_t", "Width_t")#
	for (cname in cnames) {#
		timeseries[, cname := Zero_is_NA_Function(timeseries[[cname]]), with=FALSE]#
	}#
	#############################################################################
	# Process TIME#
	#############################################################################
	timeseries$Date %<>% as.Date("%m/%d/%y")#
	timeseries %<>% #
		mutate(#
			Month 			= month(Date),#
			MonthYear 		= as.character(as.yearmon(Date)),#
			DaysSinceStart 	= as.numeric(Date - min(Date)),#
			VisitNum 		= 0#
		)	 #
	########################## ERROR MESSAGE#
	# check first duplicate data entries#
	dups <- timeseries %>% #
		group_by(Location, ID, Date) %>%#
		summarise(n.obs = length(Species)) %>%#
		filter(n.obs > 1)#
#
	if (dim(dups)[1] > 0) {#
			stop("Duplicates observations for a PlantID, Date combination are #
				present in the dataset.")#
	}#
	#--------------------------------------------------------------------------##
	# create "Visit Number" field#
	#--------------------------------------------------------------------------##
	timeseries[Date >= "2009-01-21" & Date <= "2009-01-26", VisitNum := 1]#
	timeseries[Date >= "2009-04-25" & Date <= "2009-04-30", VisitNum := 2]#
	timeseries[Date >= "2009-07-23" & Date <= "2009-07-28", VisitNum := 3]#
	timeseries[Date >= "2009-10-23" & Date <= "2009-10-28", VisitNum := 4]#
	timeseries[Date >= "2010-05-14" & Date <= "2010-05-19", VisitNum := 5]#
	timeseries[Date >= "2010-11-15" & Date <= "2010-11-20", VisitNum := 6]#
	timeseries[Date >= "2011-05-12" & Date <= "2011-05-17", VisitNum := 7]#
	timeseries[Date >= "2011-12-15" & Date <= "2012-01-17", VisitNum := 8]#
	timeseries[Date >= "2012-05-13" & Date <= "2012-05-16", VisitNum := 9]#
	timeseries[Date >= "2012-12-14" & Date <= "2012-12-19", VisitNum := 10]#
	timeseries[Date >= "2013-05-18" & Date <= "2013-05-23", VisitNum := 11]#
	timeseries[Date >= "2014-01-12" & Date <= "2014-01-17", VisitNum := 12]#
	########################## ERROR MESSAGE#
	# check for erroneous dates#
	date_errors <- filter(timeseries, VisitNum=="0")#
	# timeseries <- timeseries[which(timeseries$VisitNum!="0"), ]#
	if (dim(date_errors)[1] > 0) {#
			stop("At least one observation was given a visit number of 0.")#
	}#
	#############################################################################
	# Fruit Presence#
	#############################################################################
	# make FruitPres variable#
	timeseries %<>% #
		mutate(FruitPres_t = ifelse(Fruit_t>0, 1, 0)) %>%#
		# add NAs#
		.[is.na(Fruit_t), FruitPres_t := NA]#
	#############################################################################
	# Classify sites as coastal or inland#
	#############################################################################
	timeseries %<>%#
		mutate(Coastal = as.integer(NA)) %>%#
		# Nokuse and TSP are given 0 because they are not coastal#
		.[Location=="N" | Location=="TSP", Coastal := 0] %>%#
		.[Location!="N" & Location!="TSP", Coastal := 1]#
	timeseries$Coastal %<>% as.factor#
	#############################################################################
	# Insect presence during entire study#
	#############################################################################
	#--------------------------------------------------------------------------##
	# INSECT ever present?#
	#--------------------------------------------------------------------------##
	timeseries %<>%#
		group_by(PlantID) %>%#
		mutate(#
			CACAPresent = ifelse(sum(CA_t, na.rm=T) > 0, 1, 0),#
			MEPRPresent = ifelse(sum(ME_t, na.rm=T) > 0, 1, 0),#
			DACTPresent = ifelse(sum(DA_t, na.rm=T) > 0, 1, 0),#
			CHVIPresent = ifelse(sum(CH_t, na.rm=T) > 0, 1, 0)#
		)#
	#############################################################################
	# Insect presence during current survey#
	#############################################################################
	timeseries$NumInsectSpecies_t <- timeseries %>%#
		dplyr::select(ME_t, CA_t, CH_t, DA_t) %>%#
		apply(., 1, mysum#
	)#
	#############################################################################
	# SEASON#
	#############################################################################
	timeseries$Season = "NA"#
	# function modified from http://stackoverflow.com/questions/9500114/find-which-season-a-particular-date-belongs-to#
	# solstice and equinox dates: http://en.wikipedia.org/wiki/Solstice#
	timeseries[which(timeseries$Year==2009),]$Season <- #
		getSeason2009(timeseries[which(timeseries$Year==2009),]$Date)#
	timeseries[which(timeseries$Year==2010),]$Season <- #
		getSeason2010(timeseries[which(timeseries$Year==2010),]$Date)#
	timeseries[which(timeseries$Year==2011),]$Season <- #
		getSeason2011(timeseries[which(timeseries$Year==2011),]$Date)#
	timeseries[which(timeseries$Year==2012),]$Season <- #
		getSeason2012(timeseries[which(timeseries$Year==2012),]$Date)#
	timeseries[which(timeseries$Year==2013),]$Season <- #
		getSeason2013(timeseries[which(timeseries$Year==2013),]$Date)#
	timeseries[which(timeseries$Year==2014),]$Season <- #
		getSeason2014(timeseries[which(timeseries$Year==2014),]$Date)#
	#############################################################################
	# Classify Surveys as Complete#
	#############################################################################
	timeseries$complete_insect_surveys <- ifelse(rowSums(is.na(#
		timeseries[, .(ME_t, CA_t, CH_t, DA_t)]))==0, 1, 0#
	)#
	timeseries$complete_surveys <- ifelse(rowSums(is.na(#
		timeseries[, #
		.(#
		# insects#
		ME_t,                #
		CA_t,#
		CH_t,#
		DA_t,#
		# number of segments#
		Size_t,#
		# flowers and fruit#
		Fruit_t#
		)]))==0, 1, 0#
	)#
	#############################################################################
	# Calculate Volume#
	#############################################################################
	timeseries %<>% #
		mutate(#
			# calculate volume#
			Cone_t = pi * (((Width_t)/4)^2) * Height_t / 3,#
			Cylinder_Tall_t = pi * ((Width_t/2)^2) * Height_t#
			)#
	#############################################################################
	#' Create PlantID2#
	#############################################################################
	timeseries$PlantID2 <- factor(timeseries$PlantID,#
		levels=c(#
			# BLSP humifusa#
			"BLSPOH2",#
			"BLSPOH4",#
			"BLSPOH5",#
			"BLSPOH6",#
			"BLSPOH7",#
			"BLSPOH8",#
			"BLSPOH9",  #
			"BLSPOH10",#
			"BLSPOH11",#
			"BLSPOH11B",#
			"BLSPOH11C",#
			"BLSPOH12",#
			"BLSPOH13",#
			"BLSPOH14",       #
			"BLSPOH15",#
			"BLSPOH16",#
			"BLSPOH17",#
			"BLSPOH18",#
			"BLSPOH19",#
			"BLSPOH20",       #
			# HBSP humifusa#
			"HBSPOH1",#
			"HBSPOH2",#
			"HBSPOH3",#
			"HBSPOH4",#
			"HBSPOH5",        #
			"HBSPOH6",#
			"HBSPOH7",#
			"HBSPOH8",#
			"HBSPOH9",#
			"HBSPOH10",#
			"HBSPOH11",#
			"HBSPOH12",#
			"HBSPOH13",#
			"HBSPOH14",#
			"HBSPOH15",       #
			"HBSPOH16",#
			"HBSPOH17",#
			"HBSPOH18",#
			# HBSP stricta#
			"HBSPOS1",#
			"HBSPOS2",#
			"HBSPOS3",#
			"HBSPOS4",#
			"HBSPOS5",#
			"HBSPOS6",#
			"HBSPOS6B",#
			"HBSPOS7",       #
			"HBSPOS8",#
			"HBSPOS9",#
			"HBSPOS10",#
			"HBSPOS11" ,       #
			"HBSPOS12",#
			"HBSPOS13",#
			"HBSPOS14",#
			"HBSPOS15",#
			"HBSPOS16",#
			"HBSPOS17",#
			"HBSPOS18" ,   #
			# Mexico Beach#
			"MBOS1",#
			"MBOS4",#
			"MBOS5",#
			"MBOS6",#
			"MBOS7",#
			"MBOS10",#
			"MBOS11",#
			"MBOS12",#
			"MBOS13" ,#
			"MBOS13B",#
			"MBOS14",#
			"MBOS15",#
			"MBOS16",#
			"MBOS17",#
			"MBOS18",#
			"MBOS18B",#
			"MBOS19",#
			"MBOS20",#
			# N#
			"NOH1",       #
			"NOH1B",#
			"NOH2",#
			"NOH3" ,      #
			"NOH4",#
			"NOH5",#
			"NOH6",#
			"NOH7",#
			"NOH7B",#
			"NOH8",#
			"NOH8B",      #
			"NOH9",#
			"NOH9B",#
			"NOH10",#
			"NOH11",#
			"NOH11B",#
			"NOH12",#
			"NOH13",#
			"NOH14",#
			"NOH14B",     #
			"NOH15",#
			"NOH16",#
			"NOH16B",#
			"NOH17",#
			"NOH17B",#
			"NOH18",#
			"NOH19" ,     #
			"NOH19B",#
			"NOH20",#
			"NOH20B",#
			# SASP humifusa#
			"SASPOH1",#
			"SASPOH2",#
			"SASPOH3",#
			"SASPOH4",#
			"SASPOH5" ,        #
			"SASPOH6",#
			"SASPOH6B",#
			"SASPOH7",#
			"SASPOH8",#
			"SASPOH9",#
			"SASPOH10",#
			"SASPOH11",#
			"SASPOH11B",#
			"SASPOH12"  ,      #
			"SASPOH13",#
			"SASPOH14",#
			"SASPOH15",#
			# SASP stricta#
			"SASPOS1",#
			"SASPOS2",#
			"SASPOS3" ,        #
			"SASPOS4",#
			"SASPOS5",#
			"SASPOS6",#
			"SASPOS7",#
			"SASPOS7B",#
			"SASPOS8",#
			"SASPOS9" ,        #
			"SASPOS9B",#
			"SASPOS10" ,       #
			"SASPOS11",#
			"SASPOS12",#
			"SASPOS13",#
			"SASPOS14",#
			"SASPOS15",#
			# TSP#
			"TSPOH1",#
			"TSPOH1B",#
			"TSPOH2"  , #
			"TSPOH3",#
			"TSPOH4",#
			"TSPOH5",#
			"TSPOH6",#
			"TSPOH7",#
			"TSPOH8" ,  #
			"TSPOH9",#
			"TSPOH10",#
			"TSPOH11",#
			"TSPOH12",#
			"TSPOH13",#
			"TSPOH14" , #
			"TSPOH15",#
			"TSPOH16",#
			"TSPOH17",#
			"TSPOH18",#
			"TSPOH19",#
			"TSPOH20"#
		)#
	)	#
	levels(timeseries$PlantID2) <- #
	c(#
		paste("BLSP", 1:20),#
		paste("HBSP", 1:18),#
		paste("HBSP", 1:19),#
		paste("MB", 1:18),#
		paste("N", 1:30),#
		paste("SASP", 1:17),#
		paste("SASP", 1:17),#
		paste("TSP", 1:21)#
	)#
	#############################################################################
	return(timeseries)#
}
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/marsico-time-series/munge')
timeseries <- ProcessData(timeseries.25Jan2015JK.mod)#
timeseries <- createPlantID2(timeseries)#
#
timeseries_all_surveys <- createAllSurveysDataset(timeseries)#
timeseries_winter <- createFallWinterSurveysDataset(timeseries)#
timeseries_spring <- createSpringSummerSurveysDataset(timeseries)
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/marsico-time-series/munge')
timeseries <- processData(timeseries.25Jan2015JK.mod)#
timeseries <- createPlantID2(timeseries)#
#
timeseries_all_surveys <- createAllSurveysDataset(timeseries)#
timeseries_winter <- createFallWinterSurveysDataset(timeseries)#
timeseries_spring <- createSpringSummerSurveysDataset(timeseries)
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/marsico-time-series/munge')
timeseries <- processData(timeseries.25Jan2015JK.mod)#
#
timeseries_all_surveys <- createAllSurveysDataset(timeseries)#
timeseries_winter <- createFallWinterSurveysDataset(timeseries)#
timeseries_spring <- createSpringSummerSurveysDataset(timeseries)
? as.Date.numeric
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
#' Calculate lag dates: Previous_Survey_Date, DaysSincePrevSurvey, DaysSinceStart#
#' @param x#
#' @description calculate lag dates.#
#' @importFrom utils head#
#' @export#
#' @import chron#
#
lag_dates_function <- function(x=x){#
	# print warning about duplicates in the dataset#
	duplicates <- x %>% #
		group_by(PlantID, Date) %>%#
		summarise(n.obs = length(Species)) %>%#
		filter(n.obs > 1)#
		if (dim(duplicates)[1] > 0) {#
			stop("Duplicates observations for a PlantID, Date combination are present in the dataset.")#
		} else {#
			x %<>% #
				arrange(Date) %>%#
				group_by(PlantID) %>%#
				mutate(#
					# previous dates#
					Previous_Survey_Date 	= base::as.Date(c(NA, head(Date, -1))),#
					DaysSincePrevSurvey 	= Date - Previous_Survey_Date,#
					DaysSinceStart 			= Date - Date[1]#
				)#
			x$DaysSincePrevSurvey 	%<>% as.numeric#
			x$DaysSinceStart 		%<>% as.numeric#
			return(x)#
		}#
}#
#
#' Calculate insect presence at previous time step#
#' @param x#
#' @description calculate lag insects.#
#' @export#
#
lag_insects_function <- function(x=x){#
	x %>% #
		arrange(Date) %>%#
		group_by(PlantID) %>%#
		mutate(#
			# new insect variables#
			Insect_t 		= ifelse(sum(DA_t, CA_t, CH_t, ME_t, na.rm=T)>0, 1, 0),#
			NatInsect_t 	= ifelse(sum(DA_t, CH_t, ME_t, na.rm=T)>0, 1, 0),#
			# lagged insects#
			CA_t_1 		= c(NA, head(CA_t, -1)),#
			ME_t_1 		= c(NA, head(ME_t, -1)),#
			CH_t_1 		= c(NA, head(CH_t, -1)),#
			DA_t_1 		= c(NA, head(DA_t, -1)),#
			Insect_t_1 		= c(NA, head(Insect_t, -1)),#
			NatInsect_t_1 	= c(NA, head(NatInsect_t, -1))#
		) %>%#
		as.data.frame#
}#
#' Calculate insect presence during the previous year#
#' @param x#
#' @description calculate lag insects during the previous year.#
#' @export#
#
lag_insects_yr_function <- function(x=x){#
	x %>% #
		arrange(Date) %>%#
		group_by(PlantID) %>%#
		mutate(#
			# new insect variables#
			Insectyr_t 		= ifelse(sum(DAyr_t, CAyr_t, CHyr_t, MEyr_t, na.rm=T)>0, 1, 0),#
			NatInsectyr_t 	= ifelse(sum(DAyr_t, CHyr_t, MEyr_t, na.rm=T)>0, 1, 0),#
			# lagged insects#
			CAyr_t_1 		= c(NA, head(CAyr_t, -1)),#
			MEyr_t_1 		= c(NA, head(MEyr_t, -1)),#
			CHyr_t_1 		= c(NA, head(CHyr_t, -1)),#
			DAyr_t_1 		= c(NA, head(DAyr_t, -1)),#
			Insectyr_t_1 		= c(NA, head(Insectyr_t, -1)),#
			NatInsectyr_t_1 	= c(NA, head(NatInsectyr_t, -1))#
		) %>%#
		as.data.frame#
}#
#' Calculate size and fruit production variables at the previous time step#
#' @param x#
#' @description calculate lag size and fruit.#
#' @export#
#
lag_size_fruit_function <- function(x=x){#
	x %>% #
		arrange(Date) %>%#
		group_by(PlantID) %>%#
		mutate(#
			# size#
			Size_t_1 			= c(NA, head(Size_t, -1)),#
			Height_t_1 			= c(NA, head(Height_t, -1)),#
			Cone_t_1 			= c(NA, head(Cone_t, -1)),#
			Cylinder_Tall_t_1 	= c(NA, head(Cylinder_Tall_t, -1)),#
			# fruit#
			Fruit_t_1 			= c(NA, head(Fruit_t, -1)),#
			FruitPres_t_1 		= c(NA, head(FruitPres_t, -1))#
		)#
}
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/marsico-time-series/munge')
timeseries <- processData(timeseries.25Jan2015JK.mod)#
#
timeseries_all_surveys <- createAllSurveysDataset(timeseries)#
timeseries_winter <- createFallWinterSurveysDataset(timeseries)#
timeseries_spring <- createSpringSummerSurveysDataset(timeseries)
setwd('/Users/KSauby/Documents/Projects')
setwd("./dataproc")#
#setwd("./modresproc")#
devtools::document()#
devtools::install()
setwd('/Users/KSauby/Documents/Projects')
setwd("./dataproc")#
#setwd("./modresproc")#
devtools::document()#
devtools::install()
