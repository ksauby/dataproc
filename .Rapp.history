setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Clone_Production')
Plant_Surveys_RGR_lag2_stricta %>% dplyr::select(#
	CA_t, CA_t_1, CA_t_2, #
	ME_t, ME_t_1, ME_t_2, #
	Old_Moth_Evidence_t, Old_Moth_Evidence_t_1, Old_Moth_Evidence_t_2#
) %>% #
corrgram(upper.panel="panel.conf", lower.panel="panel.pts")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys_RGR_lag2 <- Plant_Surveys_by_Year %>% 	#
	as.data.frame %>%#
 	droplevels %>% #
 	dplyr::select(#
 		Species,#
		PlantID,#
		Stage,#
 		Date,#
		SamplingYear,#
 		Network,#
 		Island,#
		Size_t,#
		Size_t_1,#
		Fruit_Flowers_t,#
		FruitFlowerPres_t,#
		RGR_Size365,#
		CA_t,#
		ME_t,#
		Insect_t,#
		Old_Moth_Evidence_t,#
		CA_t_1,#
		ME_t_1,#
		Insect_t_1,#
		Old_Moth_Evidence_t_1,#
		CA_t_2,#
		ME_t_2,#
		Insect_t_2,#
		Old_Moth_Evidence_t_2,#
		CAhistory,#
		MEhistory,#
		Insecthistory,#
		OldMothhistory,#
		RecruitmentMode,#
		Clones_t,#
		Loss_to_Offspring#
 	) %>%#
	.[complete.cases(.),]
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys_RGR_lag2_stricta <- Plant_Surveys_RGR_lag2 %>% #
	filter(Species=="Opuntia stricta")#
Plant_Surveys_RGR_lag2_stricta %<>% #
	mutate(#
		Ln_Size_t_1_st = arm::rescale(log(Size_t_1)),	#
		LossToOffspring_st = arm::rescale(Loss_to_Offspring),#
		FruitFlowers_st = arm::rescale(Fruit_Flowers_t),#
		RGR_Size365_st = arm::rescale(RGR_Size365)		#
	)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Clone_Production')
Plant_Surveys_RGR_lag2_stricta %>% dplyr::select(#
	CA_t, CA_t_1, CA_t_2, #
	ME_t, ME_t_1, ME_t_2, #
	Old_Moth_Evidence_t, Old_Moth_Evidence_t_1, Old_Moth_Evidence_t_2#
) %>% #
corrgram(upper.panel="panel.conf", lower.panel="panel.pts")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Clone_Production')
Plant_Surveys_RGR_stricta %>% dplyr::select(#
	CA_t, CA_t_1, CA_t_2, #
	ME_t, ME_t_1, ME_t_2, #
	Old_Moth_Evidence_t, Old_Moth_Evidence_t_1, Old_Moth_Evidence_t_2#
) %>% #
corrgram(upper.panel="panel.conf", lower.panel="panel.pts")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys_RGR <- Plant_Surveys_by_Year %>% 	#
	as.data.frame %>%#
 	droplevels %>% #
 	dplyr::select(#
 		Species,#
		PlantID,#
		Stage,#
 		Date,#
		SamplingYear,#
 		Network,#
 		Island,#
		Size_t,#
		Size_t_1,#
		Fruit_Flowers_t,#
		FruitFlowerPres_t,#
		RGR_Size365,#
		CA_t,#
		ME_t,#
		Insect_t,#
		Old_Moth_Evidence_t,#
		CA_t_1,#
		ME_t_1,#
		Insect_t_1,#
		Old_Moth_Evidence_t_1,#
		CAhistory,#
		MEhistory,#
		Insecthistory,#
		OldMothhistory,#
		RecruitmentMode,#
		Clones_t,#
		Loss_to_Offspring#
 	) %>%#
	.[complete.cases(.),]#
Plant_Surveys_RGR_lag2 <- Plant_Surveys_by_Year %>% 	#
	as.data.frame %>%#
 	droplevels %>% #
 	dplyr::select(#
 		Species,#
		PlantID,#
		Stage,#
 		Date,#
		SamplingYear,#
 		Network,#
 		Island,#
		Size_t,#
		Size_t_1,#
		Fruit_Flowers_t,#
		FruitFlowerPres_t,#
		RGR_Size365,#
		CA_t,#
		ME_t,#
		Insect_t,#
		Old_Moth_Evidence_t,#
		CA_t_1,#
		ME_t_1,#
		Insect_t_1,#
		Old_Moth_Evidence_t_1,#
		CA_t_2,#
		ME_t_2,#
		Insect_t_2,#
		Old_Moth_Evidence_t_2,#
		CAhistory,#
		MEhistory,#
		Insecthistory,#
		OldMothhistory,#
		RecruitmentMode,#
		Clones_t,#
		Loss_to_Offspring#
 	) %>%#
	.[complete.cases(.),]#
# --------------------------------------------------------------------------- ##
Plant_Surveys_RGR_stricta <- Plant_Surveys_RGR %>% #
	filter(Species=="Opuntia stricta")#
Plant_Surveys_RGR_stricta %<>% #
	mutate(#
		Ln_Size_t_1_st = arm::rescale(log(Size_t_1)),	#
		LossToOffspring_st = arm::rescale(Loss_to_Offspring),#
		FruitFlowers_st = arm::rescale(Fruit_Flowers_t),#
		RGR_Size365_st = arm::rescale(RGR_Size365)		#
	)#
#
Plant_Surveys_RGR_lag2_stricta <- Plant_Surveys_RGR_lag2 %>% #
	filter(Species=="Opuntia stricta")#
Plant_Surveys_RGR_lag2_stricta %<>% #
	mutate(#
		Ln_Size_t_1_st = arm::rescale(log(Size_t_1)),	#
		LossToOffspring_st = arm::rescale(Loss_to_Offspring),#
		FruitFlowers_st = arm::rescale(Fruit_Flowers_t),#
		RGR_Size365_st = arm::rescale(RGR_Size365)		#
	)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Clone_Production')
Plant_Surveys_RGR_stricta %>% dplyr::select(#
	CA_t, CA_t_1, CA_t_2, #
	ME_t, ME_t_1, ME_t_2, #
	Old_Moth_Evidence_t, Old_Moth_Evidence_t_1, Old_Moth_Evidence_t_2#
) %>% #
corrgram(upper.panel="panel.conf", lower.panel="panel.pts")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Clone_Production')
Plant_Surveys_RGR_stricta %>% dplyr::select(#
	CA_t, CA_t_1, #
	ME_t, ME_t_1, #
	Old_Moth_Evidence_t, Old_Moth_Evidence_t_1#
) %>% #
corrgram(upper.panel="panel.conf", lower.panel="panel.pts")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Clone_Production')
Plant_Surveys_RGR_lag2_stricta %>% dplyr::select(#
	CA_t, CA_t_1, CA_t_2, #
	ME_t, ME_t_1, ME_t_2, #
	Old_Moth_Evidence_t, Old_Moth_Evidence_t_1, Old_Moth_Evidence_t_2#
) %>% #
corrgram(upper.panel="panel.conf", lower.panel="panel.pts")
Plant_Surveys_RGR_lag2_stricta$ME_t
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Clone_Production')
Plant_Surveys_RGR_stricta %>% dplyr::select(#
	CA_t, CA_t_1, #
	ME_t, ME_t_1, #
	Old_Moth_Evidence_t, Old_Moth_Evidence_t_1#
) %>% #
corrgram(upper.panel="panel.conf", lower.panel="panel.pts")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
Plant_Surveys_All <- Demographic.Plant.Surveys#
Plant_Info_All <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# those marked dead/missing, then not dead/missing#
# find a 10 in concatenated?#
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
if (dim(dups)[1] > 0) {stop("Duplicates observations for a PlantID, Date combination are present in the dataset.")}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% filter(is.na(PlantID))#
if (dim(dups)[1] > 0) {stop("NA values for PlantID.")}#
# --------------- Demographic Plot Surveys ---------------------------------- ##
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
# --------------- Demographic Plant Surveys --------------------------------- ##
Plant_Surveys %<>% processPlantSurveys#
# --------------- Demographic Plant Info ------------------------------------ ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
# --------------- Demographic Plant Surveys --------------------------------- ##
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info)#
Plant_Surveys %<>% processPlantSurveysafterMergewPlantInfo %>%#
	filter(InDemographicStudy=="yes")#
Plant_Surveys_by_Plant <- Plant_Surveys %>% processSurveysMergedbyPlant#
# --------------------------------------------------------------------------- ##
# Moth Evidence - ANY evidence of moths, including moth presence or daa#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Plant %<>% mutate(#
	Moth_Evidence_t = max(#
		CA_t,#
		ME_t,#
		Old_Moth_Evidence_t,#
		Unknown_Moth_t,#
		na.rm=T#
	),#
	Insect_Evidence_t = max(#
		CA_t,#
		ME_t,#
		Old_Moth_Evidence_t,#
		Unknown_Moth_t,#
		Gerstaeckeria_t,#
		CH_t,#
		DA_t,#
		na.rm=T#
	)#
)#
# --------------------------------------------------------------------------- ##
# create Fecundity and RGR dataset - only measured size during the spring and summer#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year <- Plant_Surveys_by_Plant %>% #
	group_by(SamplingYear, PlantID) %>%#
	summarise(#
		Species = Species[1],#
		Network = Network[1],#
		Island = Island[1],#
		ReproductiveMode = ReproductiveMode[1],#
		Date = min(Date),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		Fruit_Flowers_t = max(Fruit_Flowers_t, na.rm=T),#
		FruitFlowerPres_t = max(FruitFlowerPres_t, na.rm=T),#
		Size_t = max(Size_t, na.rm=T),#
		Height_t = max(Height_t, na.rm=T),#
		Fruit_t = max(Fruit_t, na.rm=T),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		CA_t = max(CA_t, na.rm=T),#
		ME_t = max(ME_t, na.rm=T),#
		DA_t = max(DA_t, na.rm=T),#
		CH_t = max(CH_t, na.rm=T),#
		Gerstaeckeria_t = max(Gerstaeckeria_t, na.rm=T),#
		Unknown_Moth_t = max(Unknown_Moth_t, na.rm=T),#
		Old_Moth_Evidence_t = max(Old_Moth_Evidence_t, na.rm=T),#
		Moth_Evidence_t = max(Moth_Evidence_t, na.rm=T),#
		Insect_Evidence_t = max(Insect_Evidence_t, na.rm=T),#
		Dead = max(Dead, na.rm=T),#
		Missing = max(Missing, na.rm=T)#
	) %>% #
	mutate(PrevSamplingYear = SamplingYear - 1)#
# --------------------------------------------------------------------------- ##
# create PrevYear#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Year <- year(Plant_Surveys_by_Year$Date)#
Plant_Surveys_by_Year$PrevYear <- year(Plant_Surveys_by_Year$Date) - 1#
#
# --------------------------------------------------------------------------- ##
# Insect Presence During the Study - for Datasets for Life Table Response Experiments#
# --------------------------------------------------------------------------- ##
network_summary_time_t <- Plant_Surveys_by_Year %>%#
	group_by(Network, Year) %>%#
	summarise(#
		OldMothNetworkPres_t = max(Old_Moth_Evidence_t, na.rm=T),#
		#InsectNetworkPres = max(Insect_t, na.rm=T),#
		MENetworkPres_t = max(ME_t, na.rm=T),#
		CANetworkPres_t = max(CA_t, na.rm=T),#
		MothNetworkPres_t = max(Moth_Evidence_t, na.rm=T)#
	) %>%#
	calculateLagGroupedDF(#
		vars=c("OldMothNetworkPres_t", "MENetworkPres_t", "CANetworkPres_t", "MothNetworkPres_t"), #
		arrange.variable="Year", #
		grouping.variable=c("Network")#
	)#
network_summary <- Plant_Surveys_by_Year %>%#
	group_by(Network) %>%#
	summarise(#
		OldMothNetworkPres = max(Old_Moth_Evidence_t, na.rm=T),#
		#InsectNetworkPres = max(Insect_t, na.rm=T),#
		MENetworkPres = max(ME_t, na.rm=T),#
		CANetworkPres = max(CA_t, na.rm=T),#
		MothNetworkPres = max(Moth_Evidence_t, na.rm=T)#
	)#
Plant_summary <- Plant_Surveys_by_Year %>%#
	group_by(PlantID) %>%#
	summarise(#
		OldMothPlantPres = max(Old_Moth_Evidence_t, na.rm=T),#
		#InsectPlantPres = max(Insect_t, na.rm=T),#
		MEPlantPres = max(ME_t, na.rm=T),#
		CAPlantPres = max(CA_t, na.rm=T),#
		MothPlantPres = max(Moth_Evidence_t, na.rm=T)#
	)#
Plant_Surveys_by_Year %<>% #
	merge(network_summary, by="Network") %>% #
	merge(Plant_summary, by="PlantID") %>%#
	merge(network_summary_time_t, by=c("Year", "Network"))#
#
# --------------------------------------------------------------------------- ##
# ReproductiveMode Dummy Variables#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Clonal 		<- 0#
Plant_Surveys_by_Year$Woody 		<- 0#
Plant_Surveys_by_Year$Seedling 		<- 0#
Plant_Surveys_by_Year$UnknownRepro 	<- 0#
#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$ReproductiveMode=="Clonal"), ]$Clonal			<- 1#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$ReproductiveMode=="WoodyTrunk"), ]$Woody			<- 1#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$ReproductiveMode=="Seedling"), ]$Seedling		  <- 1#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$ReproductiveMode==""), ]$UnknownRepro	   <- 1#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$ReproductiveMode==""), ]$ReproductiveMode <- "Unknown"#
#
# --------------------------------------------------------------------------- ##
# RecruitmentMode#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$RecruitmentMode <- Plant_Surveys_by_Year$ReproductiveMode#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$ReproductiveMode=="WoodyTrunk"), ]$RecruitmentMode <- "Unknown"#
#
# --------------------------------------------------------------------------- ##
# Patch Names#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$IslandFullNames <- Plant_Surveys_by_Year$Island#
levels(Plant_Surveys_by_Year$IslandFullNames) <- c(#
	 "Island 1",#
	 "Island 2",#
	 "Island 3",#
	 "Island 4",#
	 "Island 5",#
	 "Coastal\nGrassland",#
	 "Beach\nDunes"#
)#
# --------------------------------------------------------------------------- ##
# Insect Presence/Absence#
# --------------------------------------------------------------------------- ##
#
Plant_Surveys_by_Year$MothOccupancy_t <- with(#
	Plant_Surveys_by_Year, #
	paste(CA_t, ME_t, Old_Moth_Evidence_t, Unknown_Moth_t, sep="")#
)#
#
# No insects#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="NANANANA"), ]$MothOccupancy_t <- "No Insects Observed"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="0000"), ]$MothOccupancy_t <- "No Insects Observed"#
#
# Insect damage only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="0010"), ]$MothOccupancy_t <- "Moth Damage Only,\nNo Insects Observed"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="NANA1NA"), ]$MothOccupancy_t <- "Moth Damage Only,\nNo Insects Observed"#
#
# Invasive Moth only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1NANANA"), ]$MothOccupancy_t <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1NA1NA"), ]$MothOccupancy_t <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1000"), ]$MothOccupancy_t <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1010"), ]$MothOccupancy_t <- "Invasive Moth"#
#
# Native Moth Only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="0110"), ]$MothOccupancy_t <- "Native Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="0100"), ]$MothOccupancy_t <- "Native Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="NA1NANA"), ]$MothOccupancy_t <- "Native Moth"#
#
# Native and Invasive Moths#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1100"), ]$MothOccupancy_t <- "Invasive and Native Moths"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1110"), ]$MothOccupancy_t <- "Invasive and Native Moths"#
#
Plant_Surveys_by_Year$MothOccupancy_t %<>% factor(levels=c(#
	"No Insects Observed",             #
	"Moth Damage Only,\nNo Insects Observed",#
	"Native Moth",                           #
	"Invasive Moth",                         #
	"Invasive and Native Moths"#
))#
# --------------------------------------------------------------------------- ##
# Insect Presence/Absence During Study#
# --------------------------------------------------------------------------- ##
#
Plant_Surveys_by_Year$MothOccupancy <- with(#
	Plant_Surveys_by_Year, #
	paste(CAPlantPres, MEPlantPres, OldMothPlantPres, sep="")#
)#
#
# No insects#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="NANANA"), ]$MothOccupancy <- "No Insects Observed"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="000"), ]$MothOccupancy <- "No Insects Observed"#
#
# Insect damage only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="001"), ]$MothOccupancy <- "Moth Damage Only,\nNo Insects Observed"#
#
# Invasive Moth only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="100"), ]$MothOccupancy <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="101"), ]$MothOccupancy <- "Invasive Moth"#
#
# Native Moth Only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="011"), ]$MothOccupancy <- "Native Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="010"), ]$MothOccupancy <- "Native Moth"#
#
# Native and Invasive Moths#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="110"), ]$MothOccupancy <- "Invasive and Native Moths"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="111"), ]$MothOccupancy <- "Invasive and Native Moths"#
#
Plant_Surveys_by_Year$MothOccupancy %<>% factor(levels=c(#
	"No Insects Observed",             #
	"Moth Damage Only,\nNo Insects Observed",#
	"Native Moth",                           #
	"Invasive Moth",                         #
	"Invasive and Native Moths"#
))#
# --------------------------------------------------------------------------- ##
# Second Plant ID#
# --------------------------------------------------------------------------- ##
#
Plant_Surveys_by_Year %<>% mutate(#
	PlantIDb = paste(#
		Island,#
		PlantID,#
		sep=", "#
	),#
	PlantIDc = paste(#
		Island,#
		PlantID,#
		sep="\n"#
	)#
)#
# --------------------------------------------------------------------------- ##
# Alive Variable#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Alive <- abs(Plant_Surveys_by_Year$Dead - 1)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# --------------------------------------------------------------------------- ##
Plant_Info_Analysis <- Plant_Info %>%#
	group_by(PlantID) %>%#
	summarise(#
		Island = Island[1],#
		Network = Network[1],#
		Species = Species[1],#
		ReproductiveMode = ReproductiveMode[1],#
		Parent = Parent[1],#
		DaysAlive = DaysAlive[1],#
		Dead = min(ConfirmedDeadMissing),#
		First.Survey.Date = min(First.Survey.Date)#
	) %>%#
	filter(!is.na(Network))#
Plant_Info_Analysis$DaysAlive %<>% as.numeric#
#
Plant_Info_Analysis %<>% mutate(#
	Parent = replace(#
		Parent,#
		which(is.na(Parent)),#
		"Unknown"#
	),#
	ReproductiveMode = replace(#
		ReproductiveMode,#
		which(is.na(ReproductiveMode)),#
		"Unknown"#
	)#
)	#
Plant_Info_Analysis %<>% arrange(desc(Island), desc(Parent))#
# --------------------------------------------------------------------------- ##
Plant_Info_Analysis %<>% #
	merge(network_summary, by="Network") %>%#
	merge(Plant_summary, by="PlantID")#
#
Plant_Info_Analysis$Parent %<>% NA_Function#
Plant_Info_Analysis$Parent[which(Plant_Info_Analysis$Parent=="")] <- NA#
First_Size <- Plant_Surveys_by_Year %>%#
	group_by(PlantID) %>%#
	summarise(#
		First.Survey.Date = min(Date),#
		First_Size = Size_t[which(Date==First.Survey.Date)],#
		min.Size = min(Size_t, na.rm=T),#
		max.Size = max(Size_t, na.rm=T)#
	)#
#
Plant_Info_Analysis %<>% merge(First_Size, by=c("First.Survey.Date", "PlantID"))#
Plant_Info_stricta <- Plant_Info_Analysis %>% filter(Species=="stricta")#
Plant_Info_pusilla <- Plant_Info_Analysis %>% filter(Species=="pusilla")#
#
write.csv(Plant_Info_Analysis, "../data/Plant_Info_Analysis.csv")#
write.csv(Plant_Info_stricta, "../data/Plant_Info_Analysis_stricta.csv")#
write.csv(Plant_Info_pusilla, "../data/Plant_Info_Analysis_pusilla.csv")#
# --------------------------------------------------------------------------- ##
# Insect Presence/Absence During Study#
# --------------------------------------------------------------------------- ##
#
Plant_Info_Analysis$MothOccupancy <- with(#
	Plant_Info_Analysis, #
	paste(CAPlantPres, MEPlantPres, OldMothPlantPres, sep="")#
)#
#
# No insects#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="NANANA"), ]$MothOccupancy <- "No Insects Observed"#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="000"), ]$MothOccupancy <- "No Insects Observed"#
#
# Insect damage only#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="001"), ]$MothOccupancy <- "Moth Damage Only,\nNo Insects Observed"#
#
# Invasive Moth only#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="100"), ]$MothOccupancy <- "Invasive Moth"#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="101"), ]$MothOccupancy <- "Invasive Moth"#
#
# Native Moth Only#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="011"), ]$MothOccupancy <- "Native Moth"#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="010"), ]$MothOccupancy <- "Native Moth"#
#
# Native and Invasive Moths#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="110"), ]$MothOccupancy <- "Invasive and Native Moths"#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="111"), ]$MothOccupancy <- "Invasive and Native Moths"#
#
Plant_Info_Analysis$MothOccupancy %<>% factor(levels=c(#
	"No Insects Observed",             #
	"Moth Damage Only,\nNo Insects Observed",#
	"Native Moth",                           #
	"Invasive Moth",                         #
	"Invasive and Native Moths"#
))#
#
# --------------------------------------------------------------------------- ##
# Survival#
# --------------------------------------------------------------------------- ##
Plant_Info_Survival <- Plant_Info_Analysis %>% #
	filter(DaysAlive!=0) %>%#
	dplyr::select(-c(First_Size, Parent)) %>% #
	.[complete.cases(.),] %>%#
	renameSpecies#
Plant_Info_Survival$Island %<>% as.factor#
Plant_Info_Survival$IslandFullNames <- Plant_Info_Survival$Island#
levels(Plant_Info_Survival$IslandFullNames) <- c(#
	 "Island 1",#
	 "Island 2",#
	 "Island 3",#
	 "Island 4",#
	 "Island 5",#
	 "Coastal\nGrassland",#
	 "Beach\nDunes"#
)#
Plant_Info_Survival$DeadFactor <- factor(#
	Plant_Info_Survival$Dead, #
	levels=c("0","1"), #
	ordered=T#
)#
levels(Plant_Info_Survival$DeadFactor) <- c("No","Yes")#
Plant_Info_Survival_stricta <- Plant_Info_Survival %>% #
	filter(Species=="Opuntia stricta")#
Plant_Info_Survival_pusilla <- Plant_Info_Survival %>% #
	filter(Species=="Opuntia pusilla")#
#
write.csv(Plant_Info_Survival_stricta, "../data/Plant_Info_Survival_stricta.csv")#
write.csv(Plant_Info_Survival_pusilla, "../data/Plant_Info_Survival_pusilla.csv")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# prep parent survey data#
# use this dataset to use parent size that is consistent for all offpsring#
A <- Plant_Surveys_by_Year %>% #
	#filter(Species=="Opuntia stricta") %>%#
	dplyr::select(PlantID, Date, Size_t) %>% #
	setnames("Date", "Parent.Obs.Date") %>%#
	setnames("Size_t", "Parent.Size_t")#
# prep offspring survey data#
# use this dataset to figure out first size of offspring#
B <- Plant_Surveys_by_Plant %>% #
	#filter(Species=="Opuntia stricta") %>%#
	dplyr::select(PlantID, Date, Size_t) %>% #
	setnames("Date", "Offspring.Obs.Date") %>%#
	setnames("Size_t", "Offspring.Size_t")#
# merge parent data with offspring info#
C <- Plant_Info_Analysis %>%#
	merge(#
		A, #
		by.x="Parent", #
		by.y="PlantID", #
		all=T#
	) %>%#
	# merge first offspring size#
	filter(!is.na(PlantID)) %>%#
	merge(#
		B,#
		by="PlantID", #
		all.x=T#
		) %>%#
		filter(!is.na(Parent))#
D <- C %>%#
	group_by(PlantID) %>%#
	# remove NAs#
	filter(!is.na(Parent.Size_t)) %>%#
	filter(!is.na(Offspring.Size_t)) %>%#
	filter(!is.na(Parent.Obs.Date)) %>%#
	# remove Parent survey dates that are after offspring was observed#
	filter(Parent.Obs.Date <= First.Survey.Date) %>%#
	# find Parent observation date (WITH a size obs) closest to (or equal to) date that the offspring was observed#
	filter(Parent.Obs.Date==max(Parent.Obs.Date)) %>%#
	# find Offspring observation date (WITH a size obs) closest to (or equal to) date it was first observed#
	filter(Offspring.Obs.Date==min(Offspring.Obs.Date)) %>%#
	setnames("First.Survey.Date", "Date")	#
D %<>% addSamplingYear#
# figure out parent size#
parent_size <- D %>% #
	group_by(Parent, SamplingYear, Parent.Size_t, Offspring.Size_t) %>%#
	# still need to count number of clones per size class#
	summarise(n.clones=length(unique(PlantID))) %>%#
	group_by(Parent, SamplingYear, Parent.Size_t, Offspring.Size_t) %>%#
	summarise(#
		n.clones = n.clones[1],#
		n.offspring.segments = Offspring.Size_t * n.clones#
		) %>%#
	as.data.frame %>% #
	group_by(Parent, SamplingYear) %>%#
	# calculate Parent size as observed parent size plus all offspring; this ensures that a parent cannot have size equal to or less than offspring#
	mutate(Parent_Size_t = Parent.Size_t[1] + sum(n.offspring.segments)) %>%#
	ungroup %>%#
	dplyr::select(Parent, SamplingYear, Parent_Size_t) %>%#
	unique#
# merge offspring info with parent size info#
D %<>% #
	as.data.frame %>%#
   	dplyr::select(Parent, SamplingYear, PlantID, Offspring.Size_t) %>%#
	merge(parent_size, by=c("Parent", "SamplingYear"))#
#
SizeClass <- c(0:5,10,140)#
Parent_Size_Class <- cut(D$Parent_Size_t, SizeClass, include.lowest=T, labels=FALSE)#
E <- cbind(D, Parent_Size_Class)#
Offspring_Size_Class <- cut(E$Offspring.Size_t, SizeClass, include.lowest=T, labels=FALSE)#
clone_production <- cbind(E, Offspring_Size_Class)#
# figure out percentage of segments PER STAGE that became clones#
# so number of clones doesn't matter?#
#
table(clone_production$Offspring_Size_Class, clone_production$Parent_Size_Class)#
#
# need to know number of segments produced per size class#
#
loss_to_clones <- clone_production %>% #
	group_by(Parent, SamplingYear) %>%#
	summarise(#
		Clones_t = length(unique(PlantID)),#
		Size_t_w_clone = paste(unique(Parent_Size_t), collapse=","),#
		Loss_to_Offspring = sum(Offspring.Size_t)#
	)#
#
Plant_Surveys_by_Yearw_clones <- merge(#
		Plant_Surveys_by_Year, #
		loss_to_clones, #
		by.x=c("PlantID", "SamplingYear"), #
		by.y=c("Parent", "SamplingYear"),#
		all=T#
	) %>% #
	as.data.frame#
# replace Clones_t = NA#
Plant_Surveys_by_Yearw_clones[which(is.na(Plant_Surveys_by_Yearw_clones$Clones_t)), ]$Clones_t <- 0#
# replace Size_t_w_clones = NA with recorded Size_t#
Plant_Surveys_by_Yearw_clones[which(is.na(Plant_Surveys_by_Yearw_clones$Size_t_w_clone)), ]$Size_t_w_clone <- Plant_Surveys_by_Yearw_clones[which(is.na(Plant_Surveys_by_Yearw_clones$Size_t_w_clone)), ]$Size_t#
Plant_Surveys_by_Yearw_clones$Size_t_w_clone %<>% as.numeric#
# replace loss to clones = NA with 0#
Plant_Surveys_by_Yearw_clones[which(is.na(Plant_Surveys_by_Yearw_clones$Loss_to_Offspring)), ]$Loss_to_Offspring <- 0#
#
# presence of clonal reproduction#
Plant_Surveys_by_Yearw_clones$ClonePres_t <- ifelse(#
	Plant_Surveys_by_Yearw_clones$Loss_to_Offspring >0,#
	1,#
	0#
)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys_by_Year <- Plant_Surveys_by_Yearw_clones %>%#
	dplyr::select(-Size_t) %>%#
	setnames("Size_t_w_clone", "Size_t") %>%#
	# lag variables#
	calculateSizeLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateDateLags %>%#
	createNewInsectVariables(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	 calculateInsectLags(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	 calculateInsectLags2(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	 calculateInsectLags3(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	as.data.frame %>%#
	calculateRGR ## this leads to a few values with PlantID = NA#
#
Plant_Surveys_by_Year %<>%#
	setnames("ME_t_1_1", "ME_t_2") %>%#
	setnames("CA_t_1_1", "CA_t_2") %>%#
	setnames("Old_Moth_Evidence_t_1_1", "Old_Moth_Evidence_t_2") %>%#
	setnames("Insect_t_1_1", "Insect_t_2") %>%#
	setnames("ME_t_1_1_1", "ME_t_3") %>%#
	setnames("CA_t_1_1_1", "CA_t_3") %>%#
	setnames("Old_Moth_Evidence_t_1_1_1", "Old_Moth_Evidence_t_3") %>%#
	setnames("Insect_t_1_1_1", "Insect_t_3")#
# --------------------------------------------------------------------------- ##
########################## ERROR MESSAGE#
	# check for PlantID = NA#
	dups <- Plant_Surveys_by_Year %>% #
		filter(is.na(PlantID))#
#
	if (dim(dups)[1] > 0) {#
			stop("NA values for PlantID.")#
	}#
# --------------------------------------------------------------------------- ##
# fix variable formats#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year[,c(#
	"Insect_Evidence_t",#
	"Moth_Evidence_t",#
	"Gerstaeckeria_t",#
	"Unknown_Moth_t",#
	"Old_Moth_Evidence_t",#
	"NatInsect_t",#
	"Insect_t",#
	"DA_t",#
	"CH_t",#
	"ME_t",#
	"CA_t",                #
	"Size_t",#
	"FruitPres_t",#
	"FruitFlowerPres_t",#
	"Fruit_t",#
	"Size_t_1",#
	"DaysSincePrevSurvey",#
	"DaysSinceStart",#
	"CA_t_1",#
	"ME_t_1",#
	"CH_t_1",#
	"DA_t_1",#
	"Insect_t_1",#
	"NatInsect_t_1",#
	"Old_Moth_Evidence_t_1",#
    "Unknown_Moth_t_1",#
	"Gerstaeckeria_t_1",#
	"Moth_Evidence_t_1",#
	"Insect_Evidence_t_1",#
	"Clones_t",#
	"Loss_to_Offspring",#
	"CA_t_2",#
	"ME_t_2",#
	"Old_Moth_Evidence_t_2",#
	"Insect_t_2",#
	"CA_t_3",#
	"ME_t_3",#
	"Old_Moth_Evidence_t_3",#
	"Insect_t_3"#
)] %<>% apply(., 2, as.integer)#
Plant_Surveys_by_Year[,c(#
	"Height_t",#
	"Height_t_1",#
 	"RGR_Height",#
 	"RGR_Height365",#
 	"RGR_Size",#
 	"RGR_Size365",#
	"DaysSinceStart"#
)] %<>% apply(., 2, as.numeric)#
Plant_Surveys_by_Year[,c(#
	"Size_t",#
	"CA_t",#
	"ME_t",#
	"Old_Moth_Evidence_t",#
	"Fruit_Flowers_t"#
)] %<>% apply(., 2, NA_Function)#
# --------------------------------------------------------------------------- ##
# Insect history#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %<>%#
rowwise() %>%#
mutate(#
	CAhistory = sum(CA_t, CA_t_1, CA_t_2, CA_t_3, na.rm=T),#
	MEhistory = sum(ME_t, ME_t_1, ME_t_2, ME_t_3, na.rm=T),#
	Insecthistory = sum(Insect_t, Insect_t_1, Insect_t_2, Insect_t_3, na.rm=T),#
	OldMothhistory = sum(#
		Old_Moth_Evidence_t, #
		Old_Moth_Evidence_t_1, #
		Old_Moth_Evidence_t_2, #
		Old_Moth_Evidence_t_3, #
		na.rm=T#
	)#
)#
# --------------------------------------------------------------------------- ##
# Classify plants by Stage#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Stage <- Plant_Surveys_by_Year$ReproductiveMode#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Stage!="Seedling"), ]$Stage <- "Adult"#
Plant_Surveys_by_Year[which(is.na(Plant_Surveys_by_Year$Stage)), ]$Stage <- "Adult"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Dead==1), ]$Stage <- "Dead"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Missing==1), ]$Stage <- "Dead"#
#
# fix Seedling category#
stages <- Plant_Surveys_by_Year$Stage#
temp <- split(Plant_Surveys_by_Year, stages)#
temp$Seedling %<>% #
	group_by(PlantID) %>%#
	mutate(FirstObs = min(Date)) %>%#
	as.data.frame %>%#
	mutate(#
		# individuals remain a seedling only for one year, then automatically transition to a "juvenile" stage#
		Stage = replace(#
			Stage,#
			which(Date > FirstObs),#
			"Juvenile"#
		),#
		# once the plant reaches two segments, it is no longer a juvenile#
		Stage = replace(#
			Stage,#
			which(Size_t > 1),#
			"Adult"#
		)#
	) %>%#
	group_by(PlantID) %>%#
	mutate(FirstAdult = min(Date[which(Size_t > 1)])) %>%#
	# once plants reach "Adult", they remain "Adult", even if they retrogress to one segment#
	mutate(#
		Stage = replace(#
			Stage,#
			which(Date > FirstAdult),#
			"Adult"#
		)#
	) %>%#
	dplyr::select(-c(FirstObs, FirstAdult)) %>%#
	as.data.frame#
Plant_Surveys_by_Year <- do.call(rbind.fill, temp)#
# --------------------------------------------------------------------------- ##
# process original plant data (before new PlantIDs were given) for occupancy surveys#
# --------------------------------------------------------------------------- ##
Original_Plant_Data %<>% processOriginalPlantData#
#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %>% write.csv("../data/Plant_Surveys_by_Year.csv")#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %>% #
	filter(is.na(Size_t)) %>% #
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_SizeNAs.csv")#
#
Plant_Surveys_by_Year %>% #
	filter(is.na(CA_t)) %>%#
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_CANAs.csv")#
#
Plant_Surveys_by_Year %>%#
	filter(is.na(ME_t)) %>%#
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_MENAs.csv")#
#
Plant_Surveys_by_Year %>% #
	filter(is.na(Old_Moth_Evidence_t)) %>% #
	filter(Stage!="Dead") %>% #
	write.csv("../data/PlantSurveys_OldMothNAs.csv")
str(Plant_Surveys_by_Year)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0, DemographicSurvey!="NA")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# count plants per demographic plot per demographic survey#
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Tag_Number) %>%#
	summarise(#
		N_plants = length(unique(PlotPlantID)),#
		Island = Island[1],#
		Easting = Easting[1],#
		Northing = Northing[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Tag_Number, SamplingYear)
str(Plant_Surveys_by_Year)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network) %>%#
	summarise(#
		N_plants = length(unique(PlotPlantID)),#
		Island = Island[1],#
		Easting = Easting[1],#
		Northing = Northing[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network) %>%#
	summarise(#
		N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t),#
		Island = Island[1],#
		Easting = Easting[1],#
		Northing = Northing[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network) %>%#
	summarise(#
		N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear)
head(temp_A)
Plant_Surveys_by_Year %>% filter(is.na(Size_t)) %>% dim
Plant_Surveys_by_Year %>% filter(is.na(Size_t)) %>% head
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys_by_Year %>% filter(is.na(Size_t)) %>% write.csv("plants_w_no_size.csv")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network) %>%#
	summarise(#
		N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear)
head(temp_A)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network, Species) %>%#
	summarise(#
		N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear)
head(temp_A)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network, Species) %>%#
	summarise(#
		N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear) %>%#
	reshape2::melt(id.vars=c("SamplingYear", "Network", "Island"))
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network, Species) %>%#
	summarise(#
		#N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear) %>%#
	reshape2::melt(id.vars=c("SamplingYear", "Network", "Island"))
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network, Species) %>%#
	summarise(#
		#N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear)
head(temp_A)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network, Species) %>%#
	summarise(#
		#N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear) %>%#
	reshape2::melt(., id.vars=c("SamplingYear", "Network", "Island"))
?melt
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network, Species) %>%#
	summarise(#
		#N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear) %>%#
	dcast(SamplingYear + Network + Island ~ Species))
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network, Species) %>%#
	summarise(#
		#N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear) %>%#
	dcast(., SamplingYear + Network + Island ~ Species))
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network, Species) %>%#
	summarise(#
		#N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear) %>%#
	dcast(., SamplingYear + Network + Island ~ Species)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network, Species) %>%#
	summarise(#
		#N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear) %>%#
	dcast(., SamplingYear + Network + Island ~ Species, value.var="N_segments")
head(temp_A)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys_by_Year %>% merge(temp_A, by=c("SamplingYear", "Network")) %>% head
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network, Species) %>%#
	summarise(#
		#N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear) %>%#
	dcast(., SamplingYear + Network + Island ~ Species, value.var="N_segments") %>%#
	setnames("Opuntia pusilla", "pusilla_density") %>%#
	setnames("Opuntia stricta", "stricta_density")
head(temp_A)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------- DATA CHECKING#
# compare these numbers to the numbers after data is further processed#
#
# number of CACA observations#
length(Plot_Surveys[which(Plot_Surveys$CACA_on_Stricta=="Yes"), ]$CACA_on_Stricta)#
# number of MEPR observations#
length(Plot_Surveys[which(Plot_Surveys$MEPR_on_Stricta=="Yes"), ]$MEPR_on_Stricta)#
# don't exclude all plots for the demography study#
#
# --------------------------------------------------------------------------- ##
# --------------- Occupancy Plot Info --------------------------------------- ##
# --------------------------------------------------------------------------- ##
#
Plot_Info %<>% processOccupancyPlotInfo#
#
# check errors by keeping track of dataframe size#
Plot_Info_Size = as.data.frame(matrix(NA, 1, 1))#
Plot_Info_Size[, 1] = dim(Plot_Info)[1]#
#
Plot_Surveys %<>% processOccupancyPlotSurveys#
#
write.csv(Plot_Info, "../data/Plot_Info.csv")#
write.csv(Plot_Surveys, "../data/Plot_Surveys.csv")
str(Plot_Info)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp <- Plot_Info %>%#
	group_by(Network) %>%#
	summarise(n_plots = length(Tag_Number))
head(temp)
head(temp_A)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network, Species) %>%#
	summarise(#
		#N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear) %>%#
	dcast(., SamplingYear + Network + Island ~ Species, value.var="N_segments") %>%#
	setnames("Opuntia pusilla", "pusilla_density") %>%#
	setnames("Opuntia stricta", "stricta_density") %>%#
	merge(temp, by="Network")
head(temp_A)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A[which(temp_A$pusilla_density == 0), ]$pusilla_density <- 0#
temp_A[which(temp_A$stricta_density == 0), ]$stricta_density <- 0
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ----------------------------------------------- PLANTS PER PLOT SURVEY ---- ##
# need to control for # of plots in network#
temp <- Plot_Info %>%#
	group_by(Network) %>%#
	summarise(n_plots = length(Tag_Number))#
#
# count plants per demographic plot per demographic survey#
Plant_Surveys_by_Year %>% filter(is.na(Size_t)) %>% write.csv("plants_w_no_size.csv")#
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network, Species) %>%#
	summarise(#
		#N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear) %>%#
	dcast(., SamplingYear + Network + Island ~ Species, value.var="N_segments") %>%#
	setnames("Opuntia pusilla", "pusilla_density") %>%#
	setnames("Opuntia stricta", "stricta_density") %>%#
	merge(temp, by="Network")#
temp_A[which(temp_A$pusilla_density == 0), ]$pusilla_density <- 0#
temp_A[which(temp_A$stricta_density == 0), ]$stricta_density <- 0
head(temp)A
head(temp_A)
str(temp_A)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A[which(temp_A$pusilla_density == 0), ]
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A[which(is.na(temp_A$pusilla_density)), ]$pusilla_density <- 0#
temp_A[which(is.na(temp_A$stricta_density)), ]$stricta_density <- 0
head(temp_A)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A %>%#
rowwise() %>%#
mutate(#
	pusilla_density = pusilla_density/n_plots,#
	stricta_density = stricta_density/n_plots#
) %>% head
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ----------------------------------------------- PLANTS PER PLOT SURVEY ---- ##
# need to control for # of plots in network#
temp <- Plot_Info %>%#
	group_by(Network) %>%#
	summarise(n_plots = length(Tag_Number))#
#
# count plants per demographic plot per demographic survey#
Plant_Surveys_by_Year %>% filter(is.na(Size_t)) %>% write.csv("plants_w_no_size.csv")#
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network, Species) %>%#
	summarise(#
		#N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear) %>%#
	dcast(., SamplingYear + Network + Island ~ Species, value.var="N_segments") %>%#
	setnames("Opuntia pusilla", "pusilla_density") %>%#
	setnames("Opuntia stricta", "stricta_density") %>%#
	merge(temp, by="Network")#
temp_A[which(is.na(temp_A$pusilla_density)), ]$pusilla_density <- 0#
temp_A[which(is.na(temp_A$stricta_density)), ]$stricta_density <- 0#
#
temp_A %<>%#
rowwise() %>%#
mutate(#
	pusilla_density = pusilla_density/n_plots,#
	stricta_density = stricta_density/n_plots#
)#
#
Plant_Surveys_by_Year %<>% merge(temp_A, by=c("SamplingYear", "Network"))
head(Plant_Surveys_by_Year)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ----------------------------------------------- PLANTS PER PLOT SURVEY ---- ##
# need to control for # of plots in network#
temp <- Plot_Info %>%#
	group_by(Network) %>%#
	summarise(n_plots = length(Tag_Number))#
#
# count plants per demographic plot per demographic survey#
Plant_Surveys_by_Year %>% filter(is.na(Size_t)) %>% write.csv("plants_w_no_size.csv")#
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network, Species) %>%#
	summarise(#
		#N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear) %>%#
	dcast(., SamplingYear + Network + Island ~ Species, value.var="N_segments") %>%#
	setnames("Opuntia pusilla", "pusilla_density") %>%#
	setnames("Opuntia stricta", "stricta_density") %>%#
	merge(temp, by="Network")#
temp_A[which(is.na(temp_A$pusilla_density)), ]$pusilla_density <- 0#
temp_A[which(is.na(temp_A$stricta_density)), ]$stricta_density <- 0#
#
temp_A %<>%#
rowwise() %>%#
mutate(#
	pusilla_density = pusilla_density/n_plots,#
	stricta_density = stricta_density/n_plots,#
	cactus_density = (pusilla_density + stricta_density)/n_plots#
)#
#
Plant_Surveys_by_Year %<>% merge(temp_A, by=c("SamplingYear", "Network"))
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp <- Plot_Info %>%#
	group_by(Network) %>%#
	summarise(n_plots = length(Tag_Number))#
#
# count plants per demographic plot per demographic survey#
Plant_Surveys_by_Year %>% filter(is.na(Size_t)) %>% write.csv("plants_w_no_size.csv")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network, Species) %>%#
	summarise(#
		#N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear) %>%#
	dcast(., SamplingYear + Network + Island ~ Species, value.var="N_segments") %>%#
	setnames("Opuntia pusilla", "pusilla_density") %>%#
	setnames("Opuntia stricta", "stricta_density") %>%#
	merge(temp, by="Network")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A[which(is.na(temp_A$pusilla_density)), ]$pusilla_density <- 0#
temp_A[which(is.na(temp_A$stricta_density)), ]$stricta_density <- 0#
#
temp_A %<>%#
rowwise() %>%#
mutate(#
	pusilla_density = pusilla_density/n_plots,#
	stricta_density = stricta_density/n_plots,#
	cactus_density = (pusilla_density + stricta_density)/n_plots#
)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys_by_Year %<>% merge(temp_A, by=c("SamplingYear", "Network"))
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys_by_Year <- Plant_Surveys_by_Yearw_clones %>%#
	dplyr::select(-Size_t) %>%#
	setnames("Size_t_w_clone", "Size_t") %>%#
	# lag variables#
	calculateSizeLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateDateLags %>%#
	createNewInsectVariables(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	 calculateInsectLags(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	 calculateInsectLags2(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	 calculateInsectLags3(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	as.data.frame %>%#
	calculateRGR ## this leads to a few values with PlantID = NA#
#
Plant_Surveys_by_Year %<>%#
	setnames("ME_t_1_1", "ME_t_2") %>%#
	setnames("CA_t_1_1", "CA_t_2") %>%#
	setnames("Old_Moth_Evidence_t_1_1", "Old_Moth_Evidence_t_2") %>%#
	setnames("Insect_t_1_1", "Insect_t_2") %>%#
	setnames("ME_t_1_1_1", "ME_t_3") %>%#
	setnames("CA_t_1_1_1", "CA_t_3") %>%#
	setnames("Old_Moth_Evidence_t_1_1_1", "Old_Moth_Evidence_t_3") %>%#
	setnames("Insect_t_1_1_1", "Insect_t_3")#
# --------------------------------------------------------------------------- ##
########################## ERROR MESSAGE#
	# check for PlantID = NA#
	dups <- Plant_Surveys_by_Year %>% #
		filter(is.na(PlantID))#
#
	if (dim(dups)[1] > 0) {#
			stop("NA values for PlantID.")#
	}#
# --------------------------------------------------------------------------- ##
# fix variable formats#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year[,c(#
	"Insect_Evidence_t",#
	"Moth_Evidence_t",#
	"Gerstaeckeria_t",#
	"Unknown_Moth_t",#
	"Old_Moth_Evidence_t",#
	"NatInsect_t",#
	"Insect_t",#
	"DA_t",#
	"CH_t",#
	"ME_t",#
	"CA_t",                #
	"Size_t",#
	"FruitPres_t",#
	"FruitFlowerPres_t",#
	"Fruit_t",#
	"Size_t_1",#
	"DaysSincePrevSurvey",#
	"DaysSinceStart",#
	"CA_t_1",#
	"ME_t_1",#
	"CH_t_1",#
	"DA_t_1",#
	"Insect_t_1",#
	"NatInsect_t_1",#
	"Old_Moth_Evidence_t_1",#
    "Unknown_Moth_t_1",#
	"Gerstaeckeria_t_1",#
	"Moth_Evidence_t_1",#
	"Insect_Evidence_t_1",#
	"Clones_t",#
	"Loss_to_Offspring",#
	"CA_t_2",#
	"ME_t_2",#
	"Old_Moth_Evidence_t_2",#
	"Insect_t_2",#
	"CA_t_3",#
	"ME_t_3",#
	"Old_Moth_Evidence_t_3",#
	"Insect_t_3"#
)] %<>% apply(., 2, as.integer)#
Plant_Surveys_by_Year[,c(#
	"Height_t",#
	"Height_t_1",#
 	"RGR_Height",#
 	"RGR_Height365",#
 	"RGR_Size",#
 	"RGR_Size365",#
	"DaysSinceStart"#
)] %<>% apply(., 2, as.numeric)#
Plant_Surveys_by_Year[,c(#
	"Size_t",#
	"CA_t",#
	"ME_t",#
	"Old_Moth_Evidence_t",#
	"Fruit_Flowers_t"#
)] %<>% apply(., 2, NA_Function)#
# --------------------------------------------------------------------------- ##
# Insect history#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %<>%#
rowwise() %>%#
mutate(#
	CAhistory = sum(CA_t, CA_t_1, CA_t_2, CA_t_3, na.rm=T),#
	MEhistory = sum(ME_t, ME_t_1, ME_t_2, ME_t_3, na.rm=T),#
	Insecthistory = sum(Insect_t, Insect_t_1, Insect_t_2, Insect_t_3, na.rm=T),#
	OldMothhistory = sum(#
		Old_Moth_Evidence_t, #
		Old_Moth_Evidence_t_1, #
		Old_Moth_Evidence_t_2, #
		Old_Moth_Evidence_t_3, #
		na.rm=T#
	)#
)#
# --------------------------------------------------------------------------- ##
# Classify plants by Stage#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Stage <- Plant_Surveys_by_Year$ReproductiveMode#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Stage!="Seedling"), ]$Stage <- "Adult"#
Plant_Surveys_by_Year[which(is.na(Plant_Surveys_by_Year$Stage)), ]$Stage <- "Adult"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Dead==1), ]$Stage <- "Dead"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Missing==1), ]$Stage <- "Dead"#
#
# fix Seedling category#
stages <- Plant_Surveys_by_Year$Stage#
temp <- split(Plant_Surveys_by_Year, stages)#
temp$Seedling %<>% #
	group_by(PlantID) %>%#
	mutate(FirstObs = min(Date)) %>%#
	as.data.frame %>%#
	mutate(#
		# individuals remain a seedling only for one year, then automatically transition to a "juvenile" stage#
		Stage = replace(#
			Stage,#
			which(Date > FirstObs),#
			"Juvenile"#
		),#
		# once the plant reaches two segments, it is no longer a juvenile#
		Stage = replace(#
			Stage,#
			which(Size_t > 1),#
			"Adult"#
		)#
	) %>%#
	group_by(PlantID) %>%#
	mutate(FirstAdult = min(Date[which(Size_t > 1)])) %>%#
	# once plants reach "Adult", they remain "Adult", even if they retrogress to one segment#
	mutate(#
		Stage = replace(#
			Stage,#
			which(Date > FirstAdult),#
			"Adult"#
		)#
	) %>%#
	dplyr::select(-c(FirstObs, FirstAdult)) %>%#
	as.data.frame#
Plant_Surveys_by_Year <- do.call(rbind.fill, temp)#
# --------------------------------------------------------------------------- ##
# process original plant data (before new PlantIDs were given) for occupancy surveys#
# --------------------------------------------------------------------------- ##
Original_Plant_Data %<>% processOriginalPlantData#
#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %>% write.csv("../data/Plant_Surveys_by_Year.csv")#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %>% #
	filter(is.na(Size_t)) %>% #
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_SizeNAs.csv")#
#
Plant_Surveys_by_Year %>% #
	filter(is.na(CA_t)) %>%#
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_CANAs.csv")#
#
Plant_Surveys_by_Year %>%#
	filter(is.na(ME_t)) %>%#
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_MENAs.csv")#
#
Plant_Surveys_by_Year %>% #
	filter(is.na(Old_Moth_Evidence_t)) %>% #
	filter(Stage!="Dead") %>% #
	write.csv("../data/PlantSurveys_OldMothNAs.csv")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ----------------------------------------------- PLANTS PER PLOT SURVEY ---- ##
# need to control for # of plots in network#
temp <- Plot_Info %>%#
	group_by(Network) %>%#
	summarise(n_plots = length(Tag_Number))#
#
# count plants per demographic plot per demographic survey#
Plant_Surveys_by_Year %>% filter(is.na(Size_t)) %>% write.csv("plants_w_no_size.csv")#
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network, Species) %>%#
	summarise(#
		#N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear) %>%#
	dcast(., SamplingYear + Network + Island ~ Species, value.var="N_segments") %>%#
	setnames("Opuntia pusilla", "pusilla_density") %>%#
	setnames("Opuntia stricta", "stricta_density") %>%#
	merge(temp, by="Network")#
temp_A[which(is.na(temp_A$pusilla_density)), ]$pusilla_density <- 0#
temp_A[which(is.na(temp_A$stricta_density)), ]$stricta_density <- 0#
#
temp_A %<>%#
rowwise() %>%#
mutate(#
	pusilla_density = pusilla_density/n_plots,#
	stricta_density = stricta_density/n_plots,#
	cactus_density = (pusilla_density + stricta_density)/n_plots#
)#
#
Plant_Surveys_by_Year %<>% merge(temp_A, by=c("SamplingYear", "Network"))
head(Plant_Surveys_by_Year)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A %<>%#
rowwise() %>%#
mutate(#
	cactus_density = pusilla_density + stricta_density,#
	pusilla_density = pusilla_density/n_plots,#
	stricta_density = stricta_density/n_plots,#
	cactus_density = (pusilla_density + stricta_density)/n_plots#
)
head(temp_A)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A %<>%#
rowwise() %>%#
mutate(#
	cactus_density = pusilla_density + stricta_density,#
	pusilla_density_per_plot = pusilla_density/n_plots,#
	stricta_density_per_plot = stricta_density/n_plots,#
	cactus_density_per_plot = cactus_density/n_plots#
)
head(temp_A)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ----------------------------------------------- PLANTS PER PLOT SURVEY ---- ##
# need to control for # of plots in network#
temp <- Plot_Info %>%#
	group_by(Network) %>%#
	summarise(n_plots = length(Tag_Number))#
#
# count plants per demographic plot per demographic survey#
Plant_Surveys_by_Year %>% filter(is.na(Size_t)) %>% write.csv("plants_w_no_size.csv")#
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network, Species) %>%#
	summarise(#
		#N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear) %>%#
	dcast(., SamplingYear + Network + Island ~ Species, value.var="N_segments") %>%#
	setnames("Opuntia pusilla", "pusilla_density") %>%#
	setnames("Opuntia stricta", "stricta_density") %>%#
	merge(temp, by="Network")#
temp_A[which(is.na(temp_A$pusilla_density)), ]$pusilla_density <- 0#
temp_A[which(is.na(temp_A$stricta_density)), ]$stricta_density <- 0#
#
temp_A %<>%#
rowwise() %>%#
mutate(#
	cactus_density = pusilla_density + stricta_density,#
	pusilla_density_per_plot = pusilla_density/n_plots,#
	stricta_density_per_plot = stricta_density/n_plots,#
	cactus_density_per_plot = cactus_density/n_plots#
)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ----------------------------------------------- PLANTS PER PLOT SURVEY ---- ##
# need to control for # of plots in network#
temp <- Plot_Info %>%#
	group_by(Network) %>%#
	summarise(n_plots = length(Tag_Number))#
#
# count plants per demographic plot per demographic survey#
Plant_Surveys_by_Year %>% filter(is.na(Size_t)) %>% write.csv("plants_w_no_size.csv")#
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network, Species) %>%#
	summarise(#
		#N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear) %>%#
	dcast(., SamplingYear + Network + Island ~ Species, value.var="N_segments") %>%#
	setnames("Opuntia pusilla", "pusilla_density") %>%#
	setnames("Opuntia stricta", "stricta_density") %>%#
	merge(temp, by="Network")#
temp_A[which(is.na(temp_A$pusilla_density)), ]$pusilla_density <- 0#
temp_A[which(is.na(temp_A$stricta_density)), ]$stricta_density <- 0#
#
temp_A %<>%#
rowwise() %>%#
mutate(#
	cactus_density = pusilla_density + stricta_density,#
	pusilla_density_per_plot = pusilla_density/n_plots,#
	stricta_density_per_plot = stricta_density/n_plots,#
	cactus_density_per_plot = cactus_density/n_plots#
)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ----------------------------------------------- PLANTS PER PLOT SURVEY ---- ##
# need to control for # of plots in network#
temp <- Plot_Info %>%#
	group_by(Network) %>%#
	summarise(n_plots = length(Tag_Number))#
#
# count plants per demographic plot per demographic survey#
Plant_Surveys_by_Year %>% filter(is.na(Size_t)) %>% write.csv("plants_w_no_size.csv")#
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network, Species) %>%#
	summarise(#
		#N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear) %>%#
	dcast(., SamplingYear + Network + Island ~ Species, value.var="N_segments") %>%#
	setnames("Opuntia pusilla", "pusilla_density") %>%#
	setnames("Opuntia stricta", "stricta_density") %>%#
	merge(temp, by="Network")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ----------------------------------------------- PLANTS PER PLOT SURVEY ---- ##
# need to control for # of plots in network#
temp <- Plot_Info %>%#
	group_by(Network) %>%#
	summarise(n_plots = length(Tag_Number))#
#
# count plants per demographic plot per demographic survey#
Plant_Surveys_by_Year %>% filter(is.na(Size_t)) %>% write.csv("plants_w_no_size.csv")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys_by_Year <- Plant_Surveys_by_Yearw_clones %>%#
	dplyr::select(-Size_t) %>%#
	setnames("Size_t_w_clone", "Size_t") %>%#
	# lag variables#
	calculateSizeLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateDateLags %>%#
	createNewInsectVariables(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	 calculateInsectLags(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	 calculateInsectLags2(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	 calculateInsectLags3(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	as.data.frame %>%#
	calculateRGR ## this leads to a few values with PlantID = NA#
#
Plant_Surveys_by_Year %<>%#
	setnames("ME_t_1_1", "ME_t_2") %>%#
	setnames("CA_t_1_1", "CA_t_2") %>%#
	setnames("Old_Moth_Evidence_t_1_1", "Old_Moth_Evidence_t_2") %>%#
	setnames("Insect_t_1_1", "Insect_t_2") %>%#
	setnames("ME_t_1_1_1", "ME_t_3") %>%#
	setnames("CA_t_1_1_1", "CA_t_3") %>%#
	setnames("Old_Moth_Evidence_t_1_1_1", "Old_Moth_Evidence_t_3") %>%#
	setnames("Insect_t_1_1_1", "Insect_t_3")#
# --------------------------------------------------------------------------- ##
########################## ERROR MESSAGE#
	# check for PlantID = NA#
	dups <- Plant_Surveys_by_Year %>% #
		filter(is.na(PlantID))#
#
	if (dim(dups)[1] > 0) {#
			stop("NA values for PlantID.")#
	}#
# --------------------------------------------------------------------------- ##
# fix variable formats#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year[,c(#
	"Insect_Evidence_t",#
	"Moth_Evidence_t",#
	"Gerstaeckeria_t",#
	"Unknown_Moth_t",#
	"Old_Moth_Evidence_t",#
	"NatInsect_t",#
	"Insect_t",#
	"DA_t",#
	"CH_t",#
	"ME_t",#
	"CA_t",                #
	"Size_t",#
	"FruitPres_t",#
	"FruitFlowerPres_t",#
	"Fruit_t",#
	"Size_t_1",#
	"DaysSincePrevSurvey",#
	"DaysSinceStart",#
	"CA_t_1",#
	"ME_t_1",#
	"CH_t_1",#
	"DA_t_1",#
	"Insect_t_1",#
	"NatInsect_t_1",#
	"Old_Moth_Evidence_t_1",#
    "Unknown_Moth_t_1",#
	"Gerstaeckeria_t_1",#
	"Moth_Evidence_t_1",#
	"Insect_Evidence_t_1",#
	"Clones_t",#
	"Loss_to_Offspring",#
	"CA_t_2",#
	"ME_t_2",#
	"Old_Moth_Evidence_t_2",#
	"Insect_t_2",#
	"CA_t_3",#
	"ME_t_3",#
	"Old_Moth_Evidence_t_3",#
	"Insect_t_3"#
)] %<>% apply(., 2, as.integer)#
Plant_Surveys_by_Year[,c(#
	"Height_t",#
	"Height_t_1",#
 	"RGR_Height",#
 	"RGR_Height365",#
 	"RGR_Size",#
 	"RGR_Size365",#
	"DaysSinceStart"#
)] %<>% apply(., 2, as.numeric)#
Plant_Surveys_by_Year[,c(#
	"Size_t",#
	"CA_t",#
	"ME_t",#
	"Old_Moth_Evidence_t",#
	"Fruit_Flowers_t"#
)] %<>% apply(., 2, NA_Function)#
# --------------------------------------------------------------------------- ##
# Insect history#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %<>%#
rowwise() %>%#
mutate(#
	CAhistory = sum(CA_t, CA_t_1, CA_t_2, CA_t_3, na.rm=T),#
	MEhistory = sum(ME_t, ME_t_1, ME_t_2, ME_t_3, na.rm=T),#
	Insecthistory = sum(Insect_t, Insect_t_1, Insect_t_2, Insect_t_3, na.rm=T),#
	OldMothhistory = sum(#
		Old_Moth_Evidence_t, #
		Old_Moth_Evidence_t_1, #
		Old_Moth_Evidence_t_2, #
		Old_Moth_Evidence_t_3, #
		na.rm=T#
	)#
)#
# --------------------------------------------------------------------------- ##
# Classify plants by Stage#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Stage <- Plant_Surveys_by_Year$ReproductiveMode#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Stage!="Seedling"), ]$Stage <- "Adult"#
Plant_Surveys_by_Year[which(is.na(Plant_Surveys_by_Year$Stage)), ]$Stage <- "Adult"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Dead==1), ]$Stage <- "Dead"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Missing==1), ]$Stage <- "Dead"#
#
# fix Seedling category#
stages <- Plant_Surveys_by_Year$Stage#
temp <- split(Plant_Surveys_by_Year, stages)#
temp$Seedling %<>% #
	group_by(PlantID) %>%#
	mutate(FirstObs = min(Date)) %>%#
	as.data.frame %>%#
	mutate(#
		# individuals remain a seedling only for one year, then automatically transition to a "juvenile" stage#
		Stage = replace(#
			Stage,#
			which(Date > FirstObs),#
			"Juvenile"#
		),#
		# once the plant reaches two segments, it is no longer a juvenile#
		Stage = replace(#
			Stage,#
			which(Size_t > 1),#
			"Adult"#
		)#
	) %>%#
	group_by(PlantID) %>%#
	mutate(FirstAdult = min(Date[which(Size_t > 1)])) %>%#
	# once plants reach "Adult", they remain "Adult", even if they retrogress to one segment#
	mutate(#
		Stage = replace(#
			Stage,#
			which(Date > FirstAdult),#
			"Adult"#
		)#
	) %>%#
	dplyr::select(-c(FirstObs, FirstAdult)) %>%#
	as.data.frame#
Plant_Surveys_by_Year <- do.call(rbind.fill, temp)#
# --------------------------------------------------------------------------- ##
# process original plant data (before new PlantIDs were given) for occupancy surveys#
# --------------------------------------------------------------------------- ##
Original_Plant_Data %<>% processOriginalPlantData#
#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %>% write.csv("../data/Plant_Surveys_by_Year.csv")#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %>% #
	filter(is.na(Size_t)) %>% #
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_SizeNAs.csv")#
#
Plant_Surveys_by_Year %>% #
	filter(is.na(CA_t)) %>%#
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_CANAs.csv")#
#
Plant_Surveys_by_Year %>%#
	filter(is.na(ME_t)) %>%#
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_MENAs.csv")#
#
Plant_Surveys_by_Year %>% #
	filter(is.na(Old_Moth_Evidence_t)) %>% #
	filter(Stage!="Dead") %>% #
	write.csv("../data/PlantSurveys_OldMothNAs.csv")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ----------------------------------------------- PLANTS PER PLOT SURVEY ---- ##
# need to control for # of plots in network#
temp <- Plot_Info %>%#
	group_by(Network) %>%#
	summarise(n_plots = length(Tag_Number))#
#
# count plants per demographic plot per demographic survey#
Plant_Surveys_by_Year %>% filter(is.na(Size_t)) %>% write.csv("plants_w_no_size.csv")#
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network, Species) %>%#
	summarise(#
		#N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear) %>%#
	dcast(., SamplingYear + Network + Island ~ Species, value.var="N_segments") %>%#
	setnames("Opuntia pusilla", "pusilla_density") %>%#
	setnames("Opuntia stricta", "stricta_density") %>%#
	merge(temp, by="Network")#
temp_A[which(is.na(temp_A$pusilla_density)), ]$pusilla_density <- 0#
temp_A[which(is.na(temp_A$stricta_density)), ]$stricta_density <- 0
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_A %<>%#
rowwise() %>%#
mutate(#
	cactus_density = pusilla_density + stricta_density,#
	pusilla_density_per_plot = pusilla_density/n_plots,#
	stricta_density_per_plot = stricta_density/n_plots,#
	cactus_density_per_plot = cactus_density/n_plots#
)
head(temp_A)
head(temp_A) %>% as.data.frame
54/8
208/12
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# -------- CREATE RGR DATASETS ---------------------------------------------- ##
#
Plant_Surveys_RGR <- Plant_Surveys_by_Year %>% 	#
	as.data.frame %>%#
 	droplevels %>% #
 	dplyr::select(#
 		Species,#
		PlantID,#
		Stage,#
 		Date,#
		SamplingYear,#
 		Network,#
 		Island,#
		Size_t,#
		Size_t_1,#
		Fruit_Flowers_t,#
		FruitFlowerPres_t,#
		RGR_Size365,#
		CA_t,#
		ME_t,#
		Insect_t,#
		Old_Moth_Evidence_t,#
		CA_t_1,#
		ME_t_1,#
		Insect_t_1,#
		Old_Moth_Evidence_t_1,#
		CAhistory,#
		MEhistory,#
		Insecthistory,#
		OldMothhistory,#
		RecruitmentMode,#
		Clones_t,#
		Loss_to_Offspring,#
		cactus_density_per_plot#
 	) %>%#
	.[complete.cases(.),]#
Plant_Surveys_RGR_lag2 <- Plant_Surveys_by_Year %>% 	#
	as.data.frame %>%#
 	droplevels %>% #
 	dplyr::select(#
 		Species,#
		PlantID,#
		Stage,#
 		Date,#
		SamplingYear,#
 		Network,#
 		Island,#
		Size_t,#
		Size_t_1,#
		Fruit_Flowers_t,#
		FruitFlowerPres_t,#
		RGR_Size365,#
		CA_t,#
		ME_t,#
		Insect_t,#
		Old_Moth_Evidence_t,#
		CA_t_1,#
		ME_t_1,#
		Insect_t_1,#
		Old_Moth_Evidence_t_1,#
		CA_t_2,#
		ME_t_2,#
		Insect_t_2,#
		Old_Moth_Evidence_t_2,#
		CAhistory,#
		MEhistory,#
		Insecthistory,#
		OldMothhistory,#
		RecruitmentMode,#
		Clones_t,#
		Loss_to_Offspring,#
		cactus_density_per_plot#
 	) %>%#
	.[complete.cases(.),]#
# --------------------------------------------------------------------------- ##
Plant_Surveys_RGR_stricta <- Plant_Surveys_RGR %>% #
	filter(Species=="Opuntia stricta")#
Plant_Surveys_RGR_stricta %<>% #
	mutate(#
		Ln_Size_t_1_st = arm::rescale(log(Size_t_1)),	#
		LossToOffspring_st = arm::rescale(Loss_to_Offspring),#
		FruitFlowers_st = arm::rescale(Fruit_Flowers_t),#
		RGR_Size365_st = arm::rescale(RGR_Size365),#
		cactus_density_per_plot_st = arm::rescale(cactus_density_per_plot)		#
	)#
#
Plant_Surveys_RGR_lag2_stricta <- Plant_Surveys_RGR_lag2 %>% #
	filter(Species=="Opuntia stricta")#
Plant_Surveys_RGR_lag2_stricta %<>% #
	mutate(#
		Ln_Size_t_1_st = arm::rescale(log(Size_t_1)),	#
		LossToOffspring_st = arm::rescale(Loss_to_Offspring),#
		FruitFlowers_st = arm::rescale(Fruit_Flowers_t),#
		RGR_Size365_st = arm::rescale(RGR_Size365),#
		cactus_density_per_plot_st = arm::rescale(cactus_density_per_plot)		#
	)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys_by_Year <- Plant_Surveys_by_Yearw_clones %>%#
	dplyr::select(-Size_t) %>%#
	setnames("Size_t_w_clone", "Size_t") %>%#
	# lag variables#
	calculateSizeLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateDateLags %>%#
	createNewInsectVariables(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	 calculateInsectLags(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	 calculateInsectLags2(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	 calculateInsectLags3(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	as.data.frame %>%#
	calculateRGR ## this leads to a few values with PlantID = NA#
#
Plant_Surveys_by_Year %<>%#
	setnames("ME_t_1_1", "ME_t_2") %>%#
	setnames("CA_t_1_1", "CA_t_2") %>%#
	setnames("Old_Moth_Evidence_t_1_1", "Old_Moth_Evidence_t_2") %>%#
	setnames("Insect_t_1_1", "Insect_t_2") %>%#
	setnames("ME_t_1_1_1", "ME_t_3") %>%#
	setnames("CA_t_1_1_1", "CA_t_3") %>%#
	setnames("Old_Moth_Evidence_t_1_1_1", "Old_Moth_Evidence_t_3") %>%#
	setnames("Insect_t_1_1_1", "Insect_t_3")#
# --------------------------------------------------------------------------- ##
########################## ERROR MESSAGE#
	# check for PlantID = NA#
	dups <- Plant_Surveys_by_Year %>% #
		filter(is.na(PlantID))#
#
	if (dim(dups)[1] > 0) {#
			stop("NA values for PlantID.")#
	}#
# --------------------------------------------------------------------------- ##
# fix variable formats#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year[,c(#
	"Insect_Evidence_t",#
	"Moth_Evidence_t",#
	"Gerstaeckeria_t",#
	"Unknown_Moth_t",#
	"Old_Moth_Evidence_t",#
	"NatInsect_t",#
	"Insect_t",#
	"DA_t",#
	"CH_t",#
	"ME_t",#
	"CA_t",                #
	"Size_t",#
	"FruitPres_t",#
	"FruitFlowerPres_t",#
	"Fruit_t",#
	"Size_t_1",#
	"DaysSincePrevSurvey",#
	"DaysSinceStart",#
	"CA_t_1",#
	"ME_t_1",#
	"CH_t_1",#
	"DA_t_1",#
	"Insect_t_1",#
	"NatInsect_t_1",#
	"Old_Moth_Evidence_t_1",#
    "Unknown_Moth_t_1",#
	"Gerstaeckeria_t_1",#
	"Moth_Evidence_t_1",#
	"Insect_Evidence_t_1",#
	"Clones_t",#
	"Loss_to_Offspring",#
	"CA_t_2",#
	"ME_t_2",#
	"Old_Moth_Evidence_t_2",#
	"Insect_t_2",#
	"CA_t_3",#
	"ME_t_3",#
	"Old_Moth_Evidence_t_3",#
	"Insect_t_3"#
)] %<>% apply(., 2, as.integer)#
Plant_Surveys_by_Year[,c(#
	"Height_t",#
	"Height_t_1",#
 	"RGR_Height",#
 	"RGR_Height365",#
 	"RGR_Size",#
 	"RGR_Size365",#
	"DaysSinceStart"#
)] %<>% apply(., 2, as.numeric)#
Plant_Surveys_by_Year[,c(#
	"Size_t",#
	"CA_t",#
	"ME_t",#
	"Old_Moth_Evidence_t",#
	"Fruit_Flowers_t"#
)] %<>% apply(., 2, NA_Function)#
# --------------------------------------------------------------------------- ##
# Insect history#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %<>%#
rowwise() %>%#
mutate(#
	CAhistory = sum(CA_t, CA_t_1, CA_t_2, CA_t_3, na.rm=T),#
	MEhistory = sum(ME_t, ME_t_1, ME_t_2, ME_t_3, na.rm=T),#
	Insecthistory = sum(Insect_t, Insect_t_1, Insect_t_2, Insect_t_3, na.rm=T),#
	OldMothhistory = sum(#
		Old_Moth_Evidence_t, #
		Old_Moth_Evidence_t_1, #
		Old_Moth_Evidence_t_2, #
		Old_Moth_Evidence_t_3, #
		na.rm=T#
	)#
)#
# --------------------------------------------------------------------------- ##
# Classify plants by Stage#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Stage <- Plant_Surveys_by_Year$ReproductiveMode#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Stage!="Seedling"), ]$Stage <- "Adult"#
Plant_Surveys_by_Year[which(is.na(Plant_Surveys_by_Year$Stage)), ]$Stage <- "Adult"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Dead==1), ]$Stage <- "Dead"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Missing==1), ]$Stage <- "Dead"#
#
# fix Seedling category#
stages <- Plant_Surveys_by_Year$Stage#
temp <- split(Plant_Surveys_by_Year, stages)#
temp$Seedling %<>% #
	group_by(PlantID) %>%#
	mutate(FirstObs = min(Date)) %>%#
	as.data.frame %>%#
	mutate(#
		# individuals remain a seedling only for one year, then automatically transition to a "juvenile" stage#
		Stage = replace(#
			Stage,#
			which(Date > FirstObs),#
			"Juvenile"#
		),#
		# once the plant reaches two segments, it is no longer a juvenile#
		Stage = replace(#
			Stage,#
			which(Size_t > 1),#
			"Adult"#
		)#
	) %>%#
	group_by(PlantID) %>%#
	mutate(FirstAdult = min(Date[which(Size_t > 1)])) %>%#
	# once plants reach "Adult", they remain "Adult", even if they retrogress to one segment#
	mutate(#
		Stage = replace(#
			Stage,#
			which(Date > FirstAdult),#
			"Adult"#
		)#
	) %>%#
	dplyr::select(-c(FirstObs, FirstAdult)) %>%#
	as.data.frame#
Plant_Surveys_by_Year <- do.call(rbind.fill, temp)#
# --------------------------------------------------------------------------- ##
# process original plant data (before new PlantIDs were given) for occupancy surveys#
# --------------------------------------------------------------------------- ##
Original_Plant_Data %<>% processOriginalPlantData#
#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %>% write.csv("../data/Plant_Surveys_by_Year.csv")#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %>% #
	filter(is.na(Size_t)) %>% #
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_SizeNAs.csv")#
#
Plant_Surveys_by_Year %>% #
	filter(is.na(CA_t)) %>%#
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_CANAs.csv")#
#
Plant_Surveys_by_Year %>%#
	filter(is.na(ME_t)) %>%#
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_MENAs.csv")#
#
Plant_Surveys_by_Year %>% #
	filter(is.na(Old_Moth_Evidence_t)) %>% #
	filter(Stage!="Dead") %>% #
	write.csv("../data/PlantSurveys_OldMothNAs.csv")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys_by_Year <- Plant_Surveys_by_Yearw_clones %>%#
	dplyr::select(-Size_t) %>%#
	setnames("Size_t_w_clone", "Size_t") %>%#
	# lag variables#
	calculateSizeLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateDateLags %>%#
	createNewInsectVariables(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	 calculateInsectLags(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	 calculateInsectLags2(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	 calculateInsectLags3(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	as.data.frame %>%#
	calculateRGR ## this leads to a few values with PlantID = NA#
#
Plant_Surveys_by_Year %<>%#
	setnames("ME_t_1_1", "ME_t_2") %>%#
	setnames("CA_t_1_1", "CA_t_2") %>%#
	setnames("Old_Moth_Evidence_t_1_1", "Old_Moth_Evidence_t_2") %>%#
	setnames("Insect_t_1_1", "Insect_t_2") %>%#
	setnames("ME_t_1_1_1", "ME_t_3") %>%#
	setnames("CA_t_1_1_1", "CA_t_3") %>%#
	setnames("Old_Moth_Evidence_t_1_1_1", "Old_Moth_Evidence_t_3") %>%#
	setnames("Insect_t_1_1_1", "Insect_t_3")#
# --------------------------------------------------------------------------- ##
########################## ERROR MESSAGE#
	# check for PlantID = NA#
	dups <- Plant_Surveys_by_Year %>% #
		filter(is.na(PlantID))#
#
	if (dim(dups)[1] > 0) {#
			stop("NA values for PlantID.")#
	}#
# --------------------------------------------------------------------------- ##
# fix variable formats#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year[,c(#
	"Insect_Evidence_t",#
	"Moth_Evidence_t",#
	"Gerstaeckeria_t",#
	"Unknown_Moth_t",#
	"Old_Moth_Evidence_t",#
	"NatInsect_t",#
	"Insect_t",#
	"DA_t",#
	"CH_t",#
	"ME_t",#
	"CA_t",                #
	"Size_t",#
	"FruitPres_t",#
	"FruitFlowerPres_t",#
	"Fruit_t",#
	"Size_t_1",#
	"DaysSincePrevSurvey",#
	"DaysSinceStart",#
	"CA_t_1",#
	"ME_t_1",#
	"CH_t_1",#
	"DA_t_1",#
	"Insect_t_1",#
	"NatInsect_t_1",#
	"Old_Moth_Evidence_t_1",#
    "Unknown_Moth_t_1",#
	"Gerstaeckeria_t_1",#
	"Moth_Evidence_t_1",#
	"Insect_Evidence_t_1",#
	"Clones_t",#
	"Loss_to_Offspring",#
	"CA_t_2",#
	"ME_t_2",#
	"Old_Moth_Evidence_t_2",#
	"Insect_t_2",#
	"CA_t_3",#
	"ME_t_3",#
	"Old_Moth_Evidence_t_3",#
	"Insect_t_3"#
)] %<>% apply(., 2, as.integer)#
Plant_Surveys_by_Year[,c(#
	"Height_t",#
	"Height_t_1",#
 	"RGR_Height",#
 	"RGR_Height365",#
 	"RGR_Size",#
 	"RGR_Size365",#
	"DaysSinceStart"#
)] %<>% apply(., 2, as.numeric)#
Plant_Surveys_by_Year[,c(#
	"Size_t",#
	"CA_t",#
	"ME_t",#
	"Old_Moth_Evidence_t",#
	"Fruit_Flowers_t"#
)] %<>% apply(., 2, NA_Function)#
# --------------------------------------------------------------------------- ##
# Insect history#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %<>%#
rowwise() %>%#
mutate(#
	CAhistory = sum(CA_t, CA_t_1, CA_t_2, CA_t_3, na.rm=T),#
	MEhistory = sum(ME_t, ME_t_1, ME_t_2, ME_t_3, na.rm=T),#
	Insecthistory = sum(Insect_t, Insect_t_1, Insect_t_2, Insect_t_3, na.rm=T),#
	OldMothhistory = sum(#
		Old_Moth_Evidence_t, #
		Old_Moth_Evidence_t_1, #
		Old_Moth_Evidence_t_2, #
		Old_Moth_Evidence_t_3, #
		na.rm=T#
	)#
)#
# --------------------------------------------------------------------------- ##
# Classify plants by Stage#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Stage <- Plant_Surveys_by_Year$ReproductiveMode#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Stage!="Seedling"), ]$Stage <- "Adult"#
Plant_Surveys_by_Year[which(is.na(Plant_Surveys_by_Year$Stage)), ]$Stage <- "Adult"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Dead==1), ]$Stage <- "Dead"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Missing==1), ]$Stage <- "Dead"#
#
# fix Seedling category#
stages <- Plant_Surveys_by_Year$Stage#
temp <- split(Plant_Surveys_by_Year, stages)#
temp$Seedling %<>% #
	group_by(PlantID) %>%#
	mutate(FirstObs = min(Date)) %>%#
	as.data.frame %>%#
	mutate(#
		# individuals remain a seedling only for one year, then automatically transition to a "juvenile" stage#
		Stage = replace(#
			Stage,#
			which(Date > FirstObs),#
			"Juvenile"#
		),#
		# once the plant reaches two segments, it is no longer a juvenile#
		Stage = replace(#
			Stage,#
			which(Size_t > 1),#
			"Adult"#
		)#
	) %>%#
	group_by(PlantID) %>%#
	mutate(FirstAdult = min(Date[which(Size_t > 1)])) %>%#
	# once plants reach "Adult", they remain "Adult", even if they retrogress to one segment#
	mutate(#
		Stage = replace(#
			Stage,#
			which(Date > FirstAdult),#
			"Adult"#
		)#
	) %>%#
	dplyr::select(-c(FirstObs, FirstAdult)) %>%#
	as.data.frame#
Plant_Surveys_by_Year <- do.call(rbind.fill, temp)#
# --------------------------------------------------------------------------- ##
# process original plant data (before new PlantIDs were given) for occupancy surveys#
# --------------------------------------------------------------------------- ##
Original_Plant_Data %<>% processOriginalPlantData#
#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %>% write.csv("../data/Plant_Surveys_by_Year.csv")#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %>% #
	filter(is.na(Size_t)) %>% #
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_SizeNAs.csv")#
#
Plant_Surveys_by_Year %>% #
	filter(is.na(CA_t)) %>%#
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_CANAs.csv")#
#
Plant_Surveys_by_Year %>%#
	filter(is.na(ME_t)) %>%#
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_MENAs.csv")#
#
Plant_Surveys_by_Year %>% #
	filter(is.na(Old_Moth_Evidence_t)) %>% #
	filter(Stage!="Dead") %>% #
	write.csv("../data/PlantSurveys_OldMothNAs.csv")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ----------------------------------------------- PLANTS PER PLOT SURVEY ---- ##
# need to control for # of plots in network#
temp <- Plot_Info %>%#
	group_by(Network) %>%#
	summarise(n_plots = length(Tag_Number))#
#
# count plants per demographic plot per demographic survey#
Plant_Surveys_by_Year %>% filter(is.na(Size_t)) %>% write.csv("plants_w_no_size.csv")#
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network, Species) %>%#
	summarise(#
		#N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear) %>%#
	dcast(., SamplingYear + Network + Island ~ Species, value.var="N_segments") %>%#
	setnames("Opuntia pusilla", "pusilla_density") %>%#
	setnames("Opuntia stricta", "stricta_density") %>%#
	merge(temp, by="Network")#
temp_A[which(is.na(temp_A$pusilla_density)), ]$pusilla_density <- 0#
temp_A[which(is.na(temp_A$stricta_density)), ]$stricta_density <- 0#
#
temp_A %<>%#
rowwise() %>%#
mutate(#
	cactus_density = pusilla_density + stricta_density,#
	pusilla_density_per_plot = pusilla_density/n_plots,#
	stricta_density_per_plot = stricta_density/n_plots,#
	cactus_density_per_plot = cactus_density/n_plots#
)#
#
Plant_Surveys_by_Year %<>% merge(temp_A, by=c("SamplingYear", "Network"))
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# -------- CREATE RGR DATASETS ---------------------------------------------- ##
#
Plant_Surveys_RGR <- Plant_Surveys_by_Year %>% 	#
	as.data.frame %>%#
 	droplevels %>% #
 	dplyr::select(#
 		Species,#
		PlantID,#
		Stage,#
 		Date,#
		SamplingYear,#
 		Network,#
 		Island,#
		Size_t,#
		Size_t_1,#
		Fruit_Flowers_t,#
		FruitFlowerPres_t,#
		RGR_Size365,#
		CA_t,#
		ME_t,#
		Insect_t,#
		Old_Moth_Evidence_t,#
		CA_t_1,#
		ME_t_1,#
		Insect_t_1,#
		Old_Moth_Evidence_t_1,#
		CAhistory,#
		MEhistory,#
		Insecthistory,#
		OldMothhistory,#
		RecruitmentMode,#
		Clones_t,#
		Loss_to_Offspring,#
		cactus_density_per_plot#
 	) %>%#
	.[complete.cases(.),]#
Plant_Surveys_RGR_lag2 <- Plant_Surveys_by_Year %>% 	#
	as.data.frame %>%#
 	droplevels %>% #
 	dplyr::select(#
 		Species,#
		PlantID,#
		Stage,#
 		Date,#
		SamplingYear,#
 		Network,#
 		Island,#
		Size_t,#
		Size_t_1,#
		Fruit_Flowers_t,#
		FruitFlowerPres_t,#
		RGR_Size365,#
		CA_t,#
		ME_t,#
		Insect_t,#
		Old_Moth_Evidence_t,#
		CA_t_1,#
		ME_t_1,#
		Insect_t_1,#
		Old_Moth_Evidence_t_1,#
		CA_t_2,#
		ME_t_2,#
		Insect_t_2,#
		Old_Moth_Evidence_t_2,#
		CAhistory,#
		MEhistory,#
		Insecthistory,#
		OldMothhistory,#
		RecruitmentMode,#
		Clones_t,#
		Loss_to_Offspring,#
		cactus_density_per_plot#
 	) %>%#
	.[complete.cases(.),]#
# --------------------------------------------------------------------------- ##
Plant_Surveys_RGR_stricta <- Plant_Surveys_RGR %>% #
	filter(Species=="Opuntia stricta")#
Plant_Surveys_RGR_stricta %<>% #
	mutate(#
		Ln_Size_t_1_st = arm::rescale(log(Size_t_1)),	#
		LossToOffspring_st = arm::rescale(Loss_to_Offspring),#
		FruitFlowers_st = arm::rescale(Fruit_Flowers_t),#
		RGR_Size365_st = arm::rescale(RGR_Size365),#
		cactus_density_per_plot_st = arm::rescale(cactus_density_per_plot)		#
	)#
#
Plant_Surveys_RGR_lag2_stricta <- Plant_Surveys_RGR_lag2 %>% #
	filter(Species=="Opuntia stricta")#
Plant_Surveys_RGR_lag2_stricta %<>% #
	mutate(#
		Ln_Size_t_1_st = arm::rescale(log(Size_t_1)),	#
		LossToOffspring_st = arm::rescale(Loss_to_Offspring),#
		FruitFlowers_st = arm::rescale(Fruit_Flowers_t),#
		RGR_Size365_st = arm::rescale(RGR_Size365),#
		cactus_density_per_plot_st = arm::rescale(cactus_density_per_plot)		#
	)
str(Plant_Surveys_by_Year)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
Plant_Surveys_All <- Demographic.Plant.Surveys#
Plant_Info_All <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# those marked dead/missing, then not dead/missing#
# find a 10 in concatenated?#
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
if (dim(dups)[1] > 0) {stop("Duplicates observations for a PlantID, Date combination are present in the dataset.")}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% filter(is.na(PlantID))#
if (dim(dups)[1] > 0) {stop("NA values for PlantID.")}#
# --------------- Demographic Plot Surveys ---------------------------------- ##
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
# --------------- Demographic Plant Surveys --------------------------------- ##
Plant_Surveys %<>% processPlantSurveys#
# --------------- Demographic Plant Info ------------------------------------ ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
# --------------- Demographic Plant Surveys --------------------------------- ##
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info)#
Plant_Surveys %<>% processPlantSurveysafterMergewPlantInfo %>%#
	filter(InDemographicStudy=="yes")#
Plant_Surveys_by_Plant <- Plant_Surveys %>% processSurveysMergedbyPlant#
# --------------------------------------------------------------------------- ##
# Moth Evidence - ANY evidence of moths, including moth presence or daa#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Plant %<>% mutate(#
	Moth_Evidence_t = max(#
		CA_t,#
		ME_t,#
		Old_Moth_Evidence_t,#
		Unknown_Moth_t,#
		na.rm=T#
	),#
	Insect_Evidence_t = max(#
		CA_t,#
		ME_t,#
		Old_Moth_Evidence_t,#
		Unknown_Moth_t,#
		Gerstaeckeria_t,#
		CH_t,#
		DA_t,#
		na.rm=T#
	)#
)#
# --------------------------------------------------------------------------- ##
# create Fecundity and RGR dataset - only measured size during the spring and summer#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year <- Plant_Surveys_by_Plant %>% #
	group_by(SamplingYear, PlantID) %>%#
	summarise(#
		Species = Species[1],#
		Network = Network[1],#
		Island = Island[1],#
		ReproductiveMode = ReproductiveMode[1],#
		Date = min(Date),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		Fruit_Flowers_t = max(Fruit_Flowers_t, na.rm=T),#
		FruitFlowerPres_t = max(FruitFlowerPres_t, na.rm=T),#
		Size_t = max(Size_t, na.rm=T),#
		Height_t = max(Height_t, na.rm=T),#
		Fruit_t = max(Fruit_t, na.rm=T),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		CA_t = max(CA_t, na.rm=T),#
		ME_t = max(ME_t, na.rm=T),#
		DA_t = max(DA_t, na.rm=T),#
		CH_t = max(CH_t, na.rm=T),#
		Gerstaeckeria_t = max(Gerstaeckeria_t, na.rm=T),#
		Unknown_Moth_t = max(Unknown_Moth_t, na.rm=T),#
		Old_Moth_Evidence_t = max(Old_Moth_Evidence_t, na.rm=T),#
		Moth_Evidence_t = max(Moth_Evidence_t, na.rm=T),#
		Insect_Evidence_t = max(Insect_Evidence_t, na.rm=T),#
		Dead = max(Dead, na.rm=T),#
		Missing = max(Missing, na.rm=T)#
	) %>% #
	mutate(PrevSamplingYear = SamplingYear - 1)#
# --------------------------------------------------------------------------- ##
# create PrevYear#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Year <- year(Plant_Surveys_by_Year$Date)#
Plant_Surveys_by_Year$PrevYear <- year(Plant_Surveys_by_Year$Date) - 1#
#
# --------------------------------------------------------------------------- ##
# Insect Presence During the Study - for Datasets for Life Table Response Experiments#
# --------------------------------------------------------------------------- ##
network_summary_time_t <- Plant_Surveys_by_Year %>%#
	group_by(Network, Year) %>%#
	summarise(#
		OldMothNetworkPres_t = max(Old_Moth_Evidence_t, na.rm=T),#
		#InsectNetworkPres = max(Insect_t, na.rm=T),#
		MENetworkPres_t = max(ME_t, na.rm=T),#
		CANetworkPres_t = max(CA_t, na.rm=T),#
		MothNetworkPres_t = max(Moth_Evidence_t, na.rm=T)#
	) %>%#
	calculateLagGroupedDF(#
		vars=c("OldMothNetworkPres_t", "MENetworkPres_t", "CANetworkPres_t", "MothNetworkPres_t"), #
		arrange.variable="Year", #
		grouping.variable=c("Network")#
	)#
network_summary <- Plant_Surveys_by_Year %>%#
	group_by(Network) %>%#
	summarise(#
		OldMothNetworkPres = max(Old_Moth_Evidence_t, na.rm=T),#
		#InsectNetworkPres = max(Insect_t, na.rm=T),#
		MENetworkPres = max(ME_t, na.rm=T),#
		CANetworkPres = max(CA_t, na.rm=T),#
		MothNetworkPres = max(Moth_Evidence_t, na.rm=T)#
	)#
Plant_summary <- Plant_Surveys_by_Year %>%#
	group_by(PlantID) %>%#
	summarise(#
		OldMothPlantPres = max(Old_Moth_Evidence_t, na.rm=T),#
		#InsectPlantPres = max(Insect_t, na.rm=T),#
		MEPlantPres = max(ME_t, na.rm=T),#
		CAPlantPres = max(CA_t, na.rm=T),#
		MothPlantPres = max(Moth_Evidence_t, na.rm=T)#
	)#
Plant_Surveys_by_Year %<>% #
	merge(network_summary, by="Network") %>% #
	merge(Plant_summary, by="PlantID") %>%#
	merge(network_summary_time_t, by=c("Year", "Network"))#
#
# --------------------------------------------------------------------------- ##
# ReproductiveMode Dummy Variables#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Clonal 		<- 0#
Plant_Surveys_by_Year$Woody 		<- 0#
Plant_Surveys_by_Year$Seedling 		<- 0#
Plant_Surveys_by_Year$UnknownRepro 	<- 0#
#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$ReproductiveMode=="Clonal"), ]$Clonal			<- 1#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$ReproductiveMode=="WoodyTrunk"), ]$Woody			<- 1#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$ReproductiveMode=="Seedling"), ]$Seedling		  <- 1#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$ReproductiveMode==""), ]$UnknownRepro	   <- 1#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$ReproductiveMode==""), ]$ReproductiveMode <- "Unknown"#
#
# --------------------------------------------------------------------------- ##
# RecruitmentMode#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$RecruitmentMode <- Plant_Surveys_by_Year$ReproductiveMode#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$ReproductiveMode=="WoodyTrunk"), ]$RecruitmentMode <- "Unknown"#
#
# --------------------------------------------------------------------------- ##
# Patch Names#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$IslandFullNames <- Plant_Surveys_by_Year$Island#
levels(Plant_Surveys_by_Year$IslandFullNames) <- c(#
	 "Island 1",#
	 "Island 2",#
	 "Island 3",#
	 "Island 4",#
	 "Island 5",#
	 "Coastal\nGrassland",#
	 "Beach\nDunes"#
)#
# --------------------------------------------------------------------------- ##
# Insect Presence/Absence#
# --------------------------------------------------------------------------- ##
#
Plant_Surveys_by_Year$MothOccupancy_t <- with(#
	Plant_Surveys_by_Year, #
	paste(CA_t, ME_t, Old_Moth_Evidence_t, Unknown_Moth_t, sep="")#
)#
#
# No insects#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="NANANANA"), ]$MothOccupancy_t <- "No Insects Observed"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="0000"), ]$MothOccupancy_t <- "No Insects Observed"#
#
# Insect damage only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="0010"), ]$MothOccupancy_t <- "Moth Damage Only,\nNo Insects Observed"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="NANA1NA"), ]$MothOccupancy_t <- "Moth Damage Only,\nNo Insects Observed"#
#
# Invasive Moth only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1NANANA"), ]$MothOccupancy_t <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1NA1NA"), ]$MothOccupancy_t <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1000"), ]$MothOccupancy_t <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1010"), ]$MothOccupancy_t <- "Invasive Moth"#
#
# Native Moth Only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="0110"), ]$MothOccupancy_t <- "Native Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="0100"), ]$MothOccupancy_t <- "Native Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="NA1NANA"), ]$MothOccupancy_t <- "Native Moth"#
#
# Native and Invasive Moths#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1100"), ]$MothOccupancy_t <- "Invasive and Native Moths"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1110"), ]$MothOccupancy_t <- "Invasive and Native Moths"#
#
Plant_Surveys_by_Year$MothOccupancy_t %<>% factor(levels=c(#
	"No Insects Observed",             #
	"Moth Damage Only,\nNo Insects Observed",#
	"Native Moth",                           #
	"Invasive Moth",                         #
	"Invasive and Native Moths"#
))#
# --------------------------------------------------------------------------- ##
# Insect Presence/Absence During Study#
# --------------------------------------------------------------------------- ##
#
Plant_Surveys_by_Year$MothOccupancy <- with(#
	Plant_Surveys_by_Year, #
	paste(CAPlantPres, MEPlantPres, OldMothPlantPres, sep="")#
)#
#
# No insects#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="NANANA"), ]$MothOccupancy <- "No Insects Observed"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="000"), ]$MothOccupancy <- "No Insects Observed"#
#
# Insect damage only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="001"), ]$MothOccupancy <- "Moth Damage Only,\nNo Insects Observed"#
#
# Invasive Moth only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="100"), ]$MothOccupancy <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="101"), ]$MothOccupancy <- "Invasive Moth"#
#
# Native Moth Only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="011"), ]$MothOccupancy <- "Native Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="010"), ]$MothOccupancy <- "Native Moth"#
#
# Native and Invasive Moths#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="110"), ]$MothOccupancy <- "Invasive and Native Moths"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="111"), ]$MothOccupancy <- "Invasive and Native Moths"#
#
Plant_Surveys_by_Year$MothOccupancy %<>% factor(levels=c(#
	"No Insects Observed",             #
	"Moth Damage Only,\nNo Insects Observed",#
	"Native Moth",                           #
	"Invasive Moth",                         #
	"Invasive and Native Moths"#
))#
# --------------------------------------------------------------------------- ##
# Second Plant ID#
# --------------------------------------------------------------------------- ##
#
Plant_Surveys_by_Year %<>% mutate(#
	PlantIDb = paste(#
		Island,#
		PlantID,#
		sep=", "#
	),#
	PlantIDc = paste(#
		Island,#
		PlantID,#
		sep="\n"#
	)#
)#
# --------------------------------------------------------------------------- ##
# Alive Variable#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Alive <- abs(Plant_Surveys_by_Year$Dead - 1)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# --------------------------------------------------------------------------- ##
Plant_Info_Analysis <- Plant_Info %>%#
	group_by(PlantID) %>%#
	summarise(#
		Island = Island[1],#
		Network = Network[1],#
		Species = Species[1],#
		ReproductiveMode = ReproductiveMode[1],#
		Parent = Parent[1],#
		DaysAlive = DaysAlive[1],#
		Dead = min(ConfirmedDeadMissing),#
		First.Survey.Date = min(First.Survey.Date)#
	) %>%#
	filter(!is.na(Network))#
Plant_Info_Analysis$DaysAlive %<>% as.numeric#
#
Plant_Info_Analysis %<>% mutate(#
	Parent = replace(#
		Parent,#
		which(is.na(Parent)),#
		"Unknown"#
	),#
	ReproductiveMode = replace(#
		ReproductiveMode,#
		which(is.na(ReproductiveMode)),#
		"Unknown"#
	)#
)	#
Plant_Info_Analysis %<>% arrange(desc(Island), desc(Parent))#
# --------------------------------------------------------------------------- ##
Plant_Info_Analysis %<>% #
	merge(network_summary, by="Network") %>%#
	merge(Plant_summary, by="PlantID")#
#
Plant_Info_Analysis$Parent %<>% NA_Function#
Plant_Info_Analysis$Parent[which(Plant_Info_Analysis$Parent=="")] <- NA#
First_Size <- Plant_Surveys_by_Year %>%#
	group_by(PlantID) %>%#
	summarise(#
		First.Survey.Date = min(Date),#
		First_Size = Size_t[which(Date==First.Survey.Date)],#
		min.Size = min(Size_t, na.rm=T),#
		max.Size = max(Size_t, na.rm=T)#
	)#
#
Plant_Info_Analysis %<>% merge(First_Size, by=c("First.Survey.Date", "PlantID"))#
Plant_Info_stricta <- Plant_Info_Analysis %>% filter(Species=="stricta")#
Plant_Info_pusilla <- Plant_Info_Analysis %>% filter(Species=="pusilla")#
#
write.csv(Plant_Info_Analysis, "../data/Plant_Info_Analysis.csv")#
write.csv(Plant_Info_stricta, "../data/Plant_Info_Analysis_stricta.csv")#
write.csv(Plant_Info_pusilla, "../data/Plant_Info_Analysis_pusilla.csv")#
# --------------------------------------------------------------------------- ##
# Insect Presence/Absence During Study#
# --------------------------------------------------------------------------- ##
#
Plant_Info_Analysis$MothOccupancy <- with(#
	Plant_Info_Analysis, #
	paste(CAPlantPres, MEPlantPres, OldMothPlantPres, sep="")#
)#
#
# No insects#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="NANANA"), ]$MothOccupancy <- "No Insects Observed"#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="000"), ]$MothOccupancy <- "No Insects Observed"#
#
# Insect damage only#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="001"), ]$MothOccupancy <- "Moth Damage Only,\nNo Insects Observed"#
#
# Invasive Moth only#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="100"), ]$MothOccupancy <- "Invasive Moth"#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="101"), ]$MothOccupancy <- "Invasive Moth"#
#
# Native Moth Only#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="011"), ]$MothOccupancy <- "Native Moth"#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="010"), ]$MothOccupancy <- "Native Moth"#
#
# Native and Invasive Moths#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="110"), ]$MothOccupancy <- "Invasive and Native Moths"#
Plant_Info_Analysis[which(Plant_Info_Analysis$MothOccupancy=="111"), ]$MothOccupancy <- "Invasive and Native Moths"#
#
Plant_Info_Analysis$MothOccupancy %<>% factor(levels=c(#
	"No Insects Observed",             #
	"Moth Damage Only,\nNo Insects Observed",#
	"Native Moth",                           #
	"Invasive Moth",                         #
	"Invasive and Native Moths"#
))#
#
# --------------------------------------------------------------------------- ##
# Survival#
# --------------------------------------------------------------------------- ##
Plant_Info_Survival <- Plant_Info_Analysis %>% #
	filter(DaysAlive!=0) %>%#
	dplyr::select(-c(First_Size, Parent)) %>% #
	.[complete.cases(.),] %>%#
	renameSpecies#
Plant_Info_Survival$Island %<>% as.factor#
Plant_Info_Survival$IslandFullNames <- Plant_Info_Survival$Island#
levels(Plant_Info_Survival$IslandFullNames) <- c(#
	 "Island 1",#
	 "Island 2",#
	 "Island 3",#
	 "Island 4",#
	 "Island 5",#
	 "Coastal\nGrassland",#
	 "Beach\nDunes"#
)#
Plant_Info_Survival$DeadFactor <- factor(#
	Plant_Info_Survival$Dead, #
	levels=c("0","1"), #
	ordered=T#
)#
levels(Plant_Info_Survival$DeadFactor) <- c("No","Yes")#
Plant_Info_Survival_stricta <- Plant_Info_Survival %>% #
	filter(Species=="Opuntia stricta")#
Plant_Info_Survival_pusilla <- Plant_Info_Survival %>% #
	filter(Species=="Opuntia pusilla")#
#
write.csv(Plant_Info_Survival_stricta, "../data/Plant_Info_Survival_stricta.csv")#
write.csv(Plant_Info_Survival_pusilla, "../data/Plant_Info_Survival_pusilla.csv")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# prep parent survey data#
# use this dataset to use parent size that is consistent for all offpsring#
A <- Plant_Surveys_by_Year %>% #
	#filter(Species=="Opuntia stricta") %>%#
	dplyr::select(PlantID, Date, Size_t) %>% #
	setnames("Date", "Parent.Obs.Date") %>%#
	setnames("Size_t", "Parent.Size_t")#
# prep offspring survey data#
# use this dataset to figure out first size of offspring#
B <- Plant_Surveys_by_Plant %>% #
	#filter(Species=="Opuntia stricta") %>%#
	dplyr::select(PlantID, Date, Size_t) %>% #
	setnames("Date", "Offspring.Obs.Date") %>%#
	setnames("Size_t", "Offspring.Size_t")#
# merge parent data with offspring info#
C <- Plant_Info_Analysis %>%#
	merge(#
		A, #
		by.x="Parent", #
		by.y="PlantID", #
		all=T#
	) %>%#
	# merge first offspring size#
	filter(!is.na(PlantID)) %>%#
	merge(#
		B,#
		by="PlantID", #
		all.x=T#
		) %>%#
		filter(!is.na(Parent))#
D <- C %>%#
	group_by(PlantID) %>%#
	# remove NAs#
	filter(!is.na(Parent.Size_t)) %>%#
	filter(!is.na(Offspring.Size_t)) %>%#
	filter(!is.na(Parent.Obs.Date)) %>%#
	# remove Parent survey dates that are after offspring was observed#
	filter(Parent.Obs.Date <= First.Survey.Date) %>%#
	# find Parent observation date (WITH a size obs) closest to (or equal to) date that the offspring was observed#
	filter(Parent.Obs.Date==max(Parent.Obs.Date)) %>%#
	# find Offspring observation date (WITH a size obs) closest to (or equal to) date it was first observed#
	filter(Offspring.Obs.Date==min(Offspring.Obs.Date)) %>%#
	setnames("First.Survey.Date", "Date")	#
D %<>% addSamplingYear#
# figure out parent size#
parent_size <- D %>% #
	group_by(Parent, SamplingYear, Parent.Size_t, Offspring.Size_t) %>%#
	# still need to count number of clones per size class#
	summarise(n.clones=length(unique(PlantID))) %>%#
	group_by(Parent, SamplingYear, Parent.Size_t, Offspring.Size_t) %>%#
	summarise(#
		n.clones = n.clones[1],#
		n.offspring.segments = Offspring.Size_t * n.clones#
		) %>%#
	as.data.frame %>% #
	group_by(Parent, SamplingYear) %>%#
	# calculate Parent size as observed parent size plus all offspring; this ensures that a parent cannot have size equal to or less than offspring#
	mutate(Parent_Size_t = Parent.Size_t[1] + sum(n.offspring.segments)) %>%#
	ungroup %>%#
	dplyr::select(Parent, SamplingYear, Parent_Size_t) %>%#
	unique#
# merge offspring info with parent size info#
D %<>% #
	as.data.frame %>%#
   	dplyr::select(Parent, SamplingYear, PlantID, Offspring.Size_t) %>%#
	merge(parent_size, by=c("Parent", "SamplingYear"))#
#
SizeClass <- c(0:5,10,140)#
Parent_Size_Class <- cut(D$Parent_Size_t, SizeClass, include.lowest=T, labels=FALSE)#
E <- cbind(D, Parent_Size_Class)#
Offspring_Size_Class <- cut(E$Offspring.Size_t, SizeClass, include.lowest=T, labels=FALSE)#
clone_production <- cbind(E, Offspring_Size_Class)#
# figure out percentage of segments PER STAGE that became clones#
# so number of clones doesn't matter?#
#
table(clone_production$Offspring_Size_Class, clone_production$Parent_Size_Class)#
#
# need to know number of segments produced per size class#
#
loss_to_clones <- clone_production %>% #
	group_by(Parent, SamplingYear) %>%#
	summarise(#
		Clones_t = length(unique(PlantID)),#
		Size_t_w_clone = paste(unique(Parent_Size_t), collapse=","),#
		Loss_to_Offspring = sum(Offspring.Size_t)#
	)#
#
Plant_Surveys_by_Yearw_clones <- merge(#
		Plant_Surveys_by_Year, #
		loss_to_clones, #
		by.x=c("PlantID", "SamplingYear"), #
		by.y=c("Parent", "SamplingYear"),#
		all=T#
	) %>% #
	as.data.frame#
# replace Clones_t = NA#
Plant_Surveys_by_Yearw_clones[which(is.na(Plant_Surveys_by_Yearw_clones$Clones_t)), ]$Clones_t <- 0#
# replace Size_t_w_clones = NA with recorded Size_t#
Plant_Surveys_by_Yearw_clones[which(is.na(Plant_Surveys_by_Yearw_clones$Size_t_w_clone)), ]$Size_t_w_clone <- Plant_Surveys_by_Yearw_clones[which(is.na(Plant_Surveys_by_Yearw_clones$Size_t_w_clone)), ]$Size_t#
Plant_Surveys_by_Yearw_clones$Size_t_w_clone %<>% as.numeric#
# replace loss to clones = NA with 0#
Plant_Surveys_by_Yearw_clones[which(is.na(Plant_Surveys_by_Yearw_clones$Loss_to_Offspring)), ]$Loss_to_Offspring <- 0#
#
# presence of clonal reproduction#
Plant_Surveys_by_Yearw_clones$ClonePres_t <- ifelse(#
	Plant_Surveys_by_Yearw_clones$Loss_to_Offspring >0,#
	1,#
	0#
)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys_by_Year <- Plant_Surveys_by_Yearw_clones %>%#
	dplyr::select(-Size_t) %>%#
	setnames("Size_t_w_clone", "Size_t") %>%#
	# lag variables#
	calculateSizeLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateDateLags %>%#
	createNewInsectVariables(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	 calculateInsectLags(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	 calculateInsectLags2(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	 calculateInsectLags3(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	as.data.frame %>%#
	calculateRGR ## this leads to a few values with PlantID = NA#
#
Plant_Surveys_by_Year %<>%#
	setnames("ME_t_1_1", "ME_t_2") %>%#
	setnames("CA_t_1_1", "CA_t_2") %>%#
	setnames("Old_Moth_Evidence_t_1_1", "Old_Moth_Evidence_t_2") %>%#
	setnames("Insect_t_1_1", "Insect_t_2") %>%#
	setnames("ME_t_1_1_1", "ME_t_3") %>%#
	setnames("CA_t_1_1_1", "CA_t_3") %>%#
	setnames("Old_Moth_Evidence_t_1_1_1", "Old_Moth_Evidence_t_3") %>%#
	setnames("Insect_t_1_1_1", "Insect_t_3")#
# --------------------------------------------------------------------------- ##
########################## ERROR MESSAGE#
	# check for PlantID = NA#
	dups <- Plant_Surveys_by_Year %>% #
		filter(is.na(PlantID))#
#
	if (dim(dups)[1] > 0) {#
			stop("NA values for PlantID.")#
	}#
# --------------------------------------------------------------------------- ##
# fix variable formats#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year[,c(#
	"Insect_Evidence_t",#
	"Moth_Evidence_t",#
	"Gerstaeckeria_t",#
	"Unknown_Moth_t",#
	"Old_Moth_Evidence_t",#
	"NatInsect_t",#
	"Insect_t",#
	"DA_t",#
	"CH_t",#
	"ME_t",#
	"CA_t",                #
	"Size_t",#
	"FruitPres_t",#
	"FruitFlowerPres_t",#
	"Fruit_t",#
	"Size_t_1",#
	"DaysSincePrevSurvey",#
	"DaysSinceStart",#
	"CA_t_1",#
	"ME_t_1",#
	"CH_t_1",#
	"DA_t_1",#
	"Insect_t_1",#
	"NatInsect_t_1",#
	"Old_Moth_Evidence_t_1",#
    "Unknown_Moth_t_1",#
	"Gerstaeckeria_t_1",#
	"Moth_Evidence_t_1",#
	"Insect_Evidence_t_1",#
	"Clones_t",#
	"Loss_to_Offspring",#
	"CA_t_2",#
	"ME_t_2",#
	"Old_Moth_Evidence_t_2",#
	"Insect_t_2",#
	"CA_t_3",#
	"ME_t_3",#
	"Old_Moth_Evidence_t_3",#
	"Insect_t_3"#
)] %<>% apply(., 2, as.integer)#
Plant_Surveys_by_Year[,c(#
	"Height_t",#
	"Height_t_1",#
 	"RGR_Height",#
 	"RGR_Height365",#
 	"RGR_Size",#
 	"RGR_Size365",#
	"DaysSinceStart"#
)] %<>% apply(., 2, as.numeric)#
Plant_Surveys_by_Year[,c(#
	"Size_t",#
	"CA_t",#
	"ME_t",#
	"Old_Moth_Evidence_t",#
	"Fruit_Flowers_t"#
)] %<>% apply(., 2, NA_Function)#
# --------------------------------------------------------------------------- ##
# Insect history#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %<>%#
rowwise() %>%#
mutate(#
	CAhistory = sum(CA_t, CA_t_1, CA_t_2, CA_t_3, na.rm=T),#
	MEhistory = sum(ME_t, ME_t_1, ME_t_2, ME_t_3, na.rm=T),#
	Insecthistory = sum(Insect_t, Insect_t_1, Insect_t_2, Insect_t_3, na.rm=T),#
	OldMothhistory = sum(#
		Old_Moth_Evidence_t, #
		Old_Moth_Evidence_t_1, #
		Old_Moth_Evidence_t_2, #
		Old_Moth_Evidence_t_3, #
		na.rm=T#
	)#
)#
# --------------------------------------------------------------------------- ##
# Classify plants by Stage#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Stage <- Plant_Surveys_by_Year$ReproductiveMode#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Stage!="Seedling"), ]$Stage <- "Adult"#
Plant_Surveys_by_Year[which(is.na(Plant_Surveys_by_Year$Stage)), ]$Stage <- "Adult"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Dead==1), ]$Stage <- "Dead"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Missing==1), ]$Stage <- "Dead"#
#
# fix Seedling category#
stages <- Plant_Surveys_by_Year$Stage#
temp <- split(Plant_Surveys_by_Year, stages)#
temp$Seedling %<>% #
	group_by(PlantID) %>%#
	mutate(FirstObs = min(Date)) %>%#
	as.data.frame %>%#
	mutate(#
		# individuals remain a seedling only for one year, then automatically transition to a "juvenile" stage#
		Stage = replace(#
			Stage,#
			which(Date > FirstObs),#
			"Juvenile"#
		),#
		# once the plant reaches two segments, it is no longer a juvenile#
		Stage = replace(#
			Stage,#
			which(Size_t > 1),#
			"Adult"#
		)#
	) %>%#
	group_by(PlantID) %>%#
	mutate(FirstAdult = min(Date[which(Size_t > 1)])) %>%#
	# once plants reach "Adult", they remain "Adult", even if they retrogress to one segment#
	mutate(#
		Stage = replace(#
			Stage,#
			which(Date > FirstAdult),#
			"Adult"#
		)#
	) %>%#
	dplyr::select(-c(FirstObs, FirstAdult)) %>%#
	as.data.frame#
Plant_Surveys_by_Year <- do.call(rbind.fill, temp)#
# --------------------------------------------------------------------------- ##
# process original plant data (before new PlantIDs were given) for occupancy surveys#
# --------------------------------------------------------------------------- ##
Original_Plant_Data %<>% processOriginalPlantData#
#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %>% write.csv("../data/Plant_Surveys_by_Year.csv")#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %>% #
	filter(is.na(Size_t)) %>% #
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_SizeNAs.csv")#
#
Plant_Surveys_by_Year %>% #
	filter(is.na(CA_t)) %>%#
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_CANAs.csv")#
#
Plant_Surveys_by_Year %>%#
	filter(is.na(ME_t)) %>%#
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_MENAs.csv")#
#
Plant_Surveys_by_Year %>% #
	filter(is.na(Old_Moth_Evidence_t)) %>% #
	filter(Stage!="Dead") %>% #
	write.csv("../data/PlantSurveys_OldMothNAs.csv")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ----------------------------------------------- PLANTS PER PLOT SURVEY ---- ##
# need to control for # of plots in network#
temp <- Plot_Info %>%#
	group_by(Network) %>%#
	summarise(n_plots = length(Tag_Number))#
#
# count plants per demographic plot per demographic survey#
Plant_Surveys_by_Year %>% filter(is.na(Size_t)) %>% write.csv("plants_w_no_size.csv")#
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network, Species) %>%#
	summarise(#
		#N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear) %>%#
	dcast(., SamplingYear + Network + Island ~ Species, value.var="N_segments") %>%#
	setnames("Opuntia pusilla", "pusilla_density") %>%#
	setnames("Opuntia stricta", "stricta_density") %>%#
	merge(temp, by="Network")#
temp_A[which(is.na(temp_A$pusilla_density)), ]$pusilla_density <- 0#
temp_A[which(is.na(temp_A$stricta_density)), ]$stricta_density <- 0#
#
temp_A %<>%#
rowwise() %>%#
mutate(#
	cactus_density = pusilla_density + stricta_density,#
	pusilla_density_per_plot = pusilla_density/n_plots,#
	stricta_density_per_plot = stricta_density/n_plots,#
	cactus_density_per_plot = cactus_density/n_plots#
)#
#
Plant_Surveys_by_Year %<>% merge(temp_A, by=c("SamplingYear", "Network"))
str(Plant_Surveys_by_Year)
head(Plant_Surveys_by_Year)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# -------- CREATE RGR DATASETS ---------------------------------------------- ##
#
Plant_Surveys_RGR <- Plant_Surveys_by_Year %>% 	#
	as.data.frame %>%#
 	droplevels %>% #
 	dplyr::select(#
 		Species,#
		PlantID,#
		Stage,#
 		Date,#
		SamplingYear,#
 		Network,#
 		Island,#
		Size_t,#
		Size_t_1,#
		Fruit_Flowers_t,#
		FruitFlowerPres_t,#
		RGR_Size365,#
		CA_t,#
		ME_t,#
		Insect_t,#
		Old_Moth_Evidence_t,#
		CA_t_1,#
		ME_t_1,#
		Insect_t_1,#
		Old_Moth_Evidence_t_1,#
		CAhistory,#
		MEhistory,#
		Insecthistory,#
		OldMothhistory,#
		RecruitmentMode,#
		Clones_t,#
		Loss_to_Offspring,#
		cactus_density_per_plot#
 	) %>%#
	.[complete.cases(.),]
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys_by_Year <- Plant_Surveys_by_Yearw_clones %>%#
	dplyr::select(-Size_t) %>%#
	setnames("Size_t_w_clone", "Size_t") %>%#
	# lag variables#
	calculateSizeLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateDateLags %>%#
	createNewInsectVariables(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	 calculateInsectLags(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	 calculateInsectLags2(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	 calculateInsectLags3(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	as.data.frame %>%#
	calculateRGR ## this leads to a few values with PlantID = NA#
#
Plant_Surveys_by_Year %<>%#
	setnames("ME_t_1_1", "ME_t_2") %>%#
	setnames("CA_t_1_1", "CA_t_2") %>%#
	setnames("Old_Moth_Evidence_t_1_1", "Old_Moth_Evidence_t_2") %>%#
	setnames("Insect_t_1_1", "Insect_t_2") %>%#
	setnames("ME_t_1_1_1", "ME_t_3") %>%#
	setnames("CA_t_1_1_1", "CA_t_3") %>%#
	setnames("Old_Moth_Evidence_t_1_1_1", "Old_Moth_Evidence_t_3") %>%#
	setnames("Insect_t_1_1_1", "Insect_t_3")#
# --------------------------------------------------------------------------- ##
########################## ERROR MESSAGE#
	# check for PlantID = NA#
	dups <- Plant_Surveys_by_Year %>% #
		filter(is.na(PlantID))#
#
	if (dim(dups)[1] > 0) {#
			stop("NA values for PlantID.")#
	}#
# --------------------------------------------------------------------------- ##
# fix variable formats#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year[,c(#
	"Insect_Evidence_t",#
	"Moth_Evidence_t",#
	"Gerstaeckeria_t",#
	"Unknown_Moth_t",#
	"Old_Moth_Evidence_t",#
	"NatInsect_t",#
	"Insect_t",#
	"DA_t",#
	"CH_t",#
	"ME_t",#
	"CA_t",                #
	"Size_t",#
	"FruitPres_t",#
	"FruitFlowerPres_t",#
	"Fruit_t",#
	"Size_t_1",#
	"DaysSincePrevSurvey",#
	"DaysSinceStart",#
	"CA_t_1",#
	"ME_t_1",#
	"CH_t_1",#
	"DA_t_1",#
	"Insect_t_1",#
	"NatInsect_t_1",#
	"Old_Moth_Evidence_t_1",#
    "Unknown_Moth_t_1",#
	"Gerstaeckeria_t_1",#
	"Moth_Evidence_t_1",#
	"Insect_Evidence_t_1",#
	"Clones_t",#
	"Loss_to_Offspring",#
	"CA_t_2",#
	"ME_t_2",#
	"Old_Moth_Evidence_t_2",#
	"Insect_t_2",#
	"CA_t_3",#
	"ME_t_3",#
	"Old_Moth_Evidence_t_3",#
	"Insect_t_3"#
)] %<>% apply(., 2, as.integer)#
Plant_Surveys_by_Year[,c(#
	"Height_t",#
	"Height_t_1",#
 	"RGR_Height",#
 	"RGR_Height365",#
 	"RGR_Size",#
 	"RGR_Size365",#
	"DaysSinceStart"#
)] %<>% apply(., 2, as.numeric)#
Plant_Surveys_by_Year[,c(#
	"Size_t",#
	"CA_t",#
	"ME_t",#
	"Old_Moth_Evidence_t",#
	"Fruit_Flowers_t"#
)] %<>% apply(., 2, NA_Function)#
# --------------------------------------------------------------------------- ##
# Insect history#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %<>%#
rowwise() %>%#
mutate(#
	CAhistory = sum(CA_t, CA_t_1, CA_t_2, CA_t_3, na.rm=T),#
	MEhistory = sum(ME_t, ME_t_1, ME_t_2, ME_t_3, na.rm=T),#
	Insecthistory = sum(Insect_t, Insect_t_1, Insect_t_2, Insect_t_3, na.rm=T),#
	OldMothhistory = sum(#
		Old_Moth_Evidence_t, #
		Old_Moth_Evidence_t_1, #
		Old_Moth_Evidence_t_2, #
		Old_Moth_Evidence_t_3, #
		na.rm=T#
	)#
)#
# --------------------------------------------------------------------------- ##
# Classify plants by Stage#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Stage <- Plant_Surveys_by_Year$ReproductiveMode#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Stage!="Seedling"), ]$Stage <- "Adult"#
Plant_Surveys_by_Year[which(is.na(Plant_Surveys_by_Year$Stage)), ]$Stage <- "Adult"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Dead==1), ]$Stage <- "Dead"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Missing==1), ]$Stage <- "Dead"#
#
# fix Seedling category#
stages <- Plant_Surveys_by_Year$Stage#
temp <- split(Plant_Surveys_by_Year, stages)#
temp$Seedling %<>% #
	group_by(PlantID) %>%#
	mutate(FirstObs = min(Date)) %>%#
	as.data.frame %>%#
	mutate(#
		# individuals remain a seedling only for one year, then automatically transition to a "juvenile" stage#
		Stage = replace(#
			Stage,#
			which(Date > FirstObs),#
			"Juvenile"#
		),#
		# once the plant reaches two segments, it is no longer a juvenile#
		Stage = replace(#
			Stage,#
			which(Size_t > 1),#
			"Adult"#
		)#
	) %>%#
	group_by(PlantID) %>%#
	mutate(FirstAdult = min(Date[which(Size_t > 1)])) %>%#
	# once plants reach "Adult", they remain "Adult", even if they retrogress to one segment#
	mutate(#
		Stage = replace(#
			Stage,#
			which(Date > FirstAdult),#
			"Adult"#
		)#
	) %>%#
	dplyr::select(-c(FirstObs, FirstAdult)) %>%#
	as.data.frame#
Plant_Surveys_by_Year <- do.call(rbind.fill, temp)#
# --------------------------------------------------------------------------- ##
# process original plant data (before new PlantIDs were given) for occupancy surveys#
# --------------------------------------------------------------------------- ##
Original_Plant_Data %<>% processOriginalPlantData#
#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %>% write.csv("../data/Plant_Surveys_by_Year.csv")#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %>% #
	filter(is.na(Size_t)) %>% #
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_SizeNAs.csv")#
#
Plant_Surveys_by_Year %>% #
	filter(is.na(CA_t)) %>%#
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_CANAs.csv")#
#
Plant_Surveys_by_Year %>%#
	filter(is.na(ME_t)) %>%#
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_MENAs.csv")#
#
Plant_Surveys_by_Year %>% #
	filter(is.na(Old_Moth_Evidence_t)) %>% #
	filter(Stage!="Dead") %>% #
	write.csv("../data/PlantSurveys_OldMothNAs.csv")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ----------------------------------------------- PLANTS PER PLOT SURVEY ---- ##
# need to control for # of plots in network#
temp <- Plot_Info %>%#
	group_by(Network) %>%#
	summarise(n_plots = length(Tag_Number))#
#
# count plants per demographic plot per demographic survey#
Plant_Surveys_by_Year %>% filter(is.na(Size_t)) %>% write.csv("plants_w_no_size.csv")#
temp_A <- Plant_Surveys_by_Year %>%#
	filter(Dead==0 & Missing==0) %>%#
	group_by(SamplingYear, Network, Species) %>%#
	summarise(#
		#N_plants = length(unique(PlantID)),#
		N_segments = sum(Size_t, na.rm=T),#
		Island = Island[1]#
	) %>%#
	as.data.frame %>%#
	arrange(Network, SamplingYear) %>%#
	dcast(., SamplingYear + Network + Island ~ Species, value.var="N_segments") %>%#
	setnames("Opuntia pusilla", "pusilla_density") %>%#
	setnames("Opuntia stricta", "stricta_density") %>%#
	merge(temp, by="Network")#
temp_A[which(is.na(temp_A$pusilla_density)), ]$pusilla_density <- 0#
temp_A[which(is.na(temp_A$stricta_density)), ]$stricta_density <- 0#
#
temp_A %<>%#
rowwise() %>%#
mutate(#
	cactus_density = pusilla_density + stricta_density,#
	pusilla_density_per_plot = pusilla_density/n_plots,#
	stricta_density_per_plot = stricta_density/n_plots,#
	cactus_density_per_plot = cactus_density/n_plots#
)#
#
Plant_Surveys_by_Year %<>% merge(temp_A, by=c("SamplingYear", "Network", "Island"))
head(Plant_Surveys_by_Year)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# -------- CREATE RGR DATASETS ---------------------------------------------- ##
#
Plant_Surveys_RGR <- Plant_Surveys_by_Year %>% 	#
	as.data.frame %>%#
 	droplevels %>% #
 	dplyr::select(#
 		Species,#
		PlantID,#
		Stage,#
 		Date,#
		SamplingYear,#
 		Network,#
 		Island,#
		Size_t,#
		Size_t_1,#
		Fruit_Flowers_t,#
		FruitFlowerPres_t,#
		RGR_Size365,#
		CA_t,#
		ME_t,#
		Insect_t,#
		Old_Moth_Evidence_t,#
		CA_t_1,#
		ME_t_1,#
		Insect_t_1,#
		Old_Moth_Evidence_t_1,#
		CAhistory,#
		MEhistory,#
		Insecthistory,#
		OldMothhistory,#
		RecruitmentMode,#
		Clones_t,#
		Loss_to_Offspring,#
		cactus_density_per_plot#
 	) %>%#
	.[complete.cases(.),]
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys_RGR_lag2 <- Plant_Surveys_by_Year %>% 	#
	as.data.frame %>%#
 	droplevels %>% #
 	dplyr::select(#
 		Species,#
		PlantID,#
		Stage,#
 		Date,#
		SamplingYear,#
 		Network,#
 		Island,#
		Size_t,#
		Size_t_1,#
		Fruit_Flowers_t,#
		FruitFlowerPres_t,#
		RGR_Size365,#
		CA_t,#
		ME_t,#
		Insect_t,#
		Old_Moth_Evidence_t,#
		CA_t_1,#
		ME_t_1,#
		Insect_t_1,#
		Old_Moth_Evidence_t_1,#
		CA_t_2,#
		ME_t_2,#
		Insect_t_2,#
		Old_Moth_Evidence_t_2,#
		CAhistory,#
		MEhistory,#
		Insecthistory,#
		OldMothhistory,#
		RecruitmentMode,#
		Clones_t,#
		Loss_to_Offspring,#
		cactus_density_per_plot#
 	) %>%#
	.[complete.cases(.),]#
# --------------------------------------------------------------------------- ##
Plant_Surveys_RGR_stricta <- Plant_Surveys_RGR %>% #
	filter(Species=="Opuntia stricta")#
Plant_Surveys_RGR_stricta %<>% #
	mutate(#
		Ln_Size_t_1_st = arm::rescale(log(Size_t_1)),	#
		LossToOffspring_st = arm::rescale(Loss_to_Offspring),#
		FruitFlowers_st = arm::rescale(Fruit_Flowers_t),#
		RGR_Size365_st = arm::rescale(RGR_Size365),#
		cactus_density_per_plot_st = arm::rescale(cactus_density_per_plot)		#
	)#
#
Plant_Surveys_RGR_lag2_stricta <- Plant_Surveys_RGR_lag2 %>% #
	filter(Species=="Opuntia stricta")#
Plant_Surveys_RGR_lag2_stricta %<>% #
	mutate(#
		Ln_Size_t_1_st = arm::rescale(log(Size_t_1)),	#
		LossToOffspring_st = arm::rescale(Loss_to_Offspring),#
		FruitFlowers_st = arm::rescale(Fruit_Flowers_t),#
		RGR_Size365_st = arm::rescale(RGR_Size365),#
		cactus_density_per_plot_st = arm::rescale(cactus_density_per_plot)		#
	)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys_RGR_pusilla <- Plant_Surveys_RGR %>% #
	filter(Species=="Opuntia pusilla")#
Plant_Surveys_RGR_pusilla %<>% #
	mutate(#
		Ln_Size_t_1_st = arm::rescale(log(Size_t_1)),#
		LossToOffspring_st = arm::rescale(Loss_to_Offspring),#
		FruitFlowers_st = arm::rescale(Fruit_Flowers_t),#
		RGR_Size365_st = arm::rescale(RGR_Size365),#
		cactus_density_per_plot_st = arm::rescale(cactus_density_per_plot)#
	)#
# --------------------------------------------------------------------------- ##
Plant_Surveys_RGR_stricta %>% write.csv("../data/Plant_Surveys_RGR_stricta.csv")#
Plant_Surveys_RGR_pusilla %>% write.csv("../data/Plant_Surveys_RGR_pusilla.csv")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys_RGR_lag2_stricta %>% write.csv("../data/Plant_Surveys_RGR_lag2_stricta.csv")
head(Plant_Surveys_RGR_stricta)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Clone_Production')
Plant_Surveys_RGR_stricta %>% dplyr::select(#
	LossToOffspring_st,#
	cactus_density_per_plot_st#
) %>% #
corrgram(upper.panel="panel.conf", lower.panel="panel.pts")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Clone_Production')
Plant_Surveys_RGR_stricta %>% dplyr::select(#
	CA_t, CA_t_1, #
	ME_t, ME_t_1, #
	Old_Moth_Evidence_t, Old_Moth_Evidence_t_1,#
	Insect_t, Insect_t_1#
) %>% #
corrgram(upper.panel="panel.conf", lower.panel="panel.pts")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Clone_Production')
Plant_Surveys_RGR_stricta %>% dplyr::select(#
	LossToOffspring_st,#
	cactus_density_per_plot_st#
) %>% #
corrgram(upper.panel="panel.conf", lower.panel="panel.pts")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Clone_Production')
rmarkdown::render('Appendix_clone_production_model_selection.Rmd')
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/Manuscript/Demography/Appendix/Clone_Production')
rmarkdown::render('Appendix_clone_production_model_selection.Rmd')
str(Plant_Surveys_by_Year)
with(Plant_Surveys_by_Year, table(RecruitmentMode, Species))
ls()
head(Plant_Info)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
Plant_Surveys_All <- Demographic.Plant.Surveys#
Plant_Info_All <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# those marked dead/missing, then not dead/missing#
# find a 10 in concatenated?#
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
if (dim(dups)[1] > 0) {stop("Duplicates observations for a PlantID, Date combination are present in the dataset.")}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% filter(is.na(PlantID))#
if (dim(dups)[1] > 0) {stop("NA values for PlantID.")}#
# --------------- Demographic Plot Surveys ---------------------------------- ##
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
# --------------- Demographic Plant Surveys --------------------------------- ##
Plant_Surveys %<>% processPlantSurveys#
# --------------- Demographic Plant Info ------------------------------------ ##
Plant_Info %<>% processPlantInfo(Plot_Info)
head(Plant_Info)
unique(Plant_Info$ReproductiveMode)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info$RecruitmentMode <- Plant_Info$ReproductiveMode#
Plant_Info[which(Plant_Info$ReproductiveMode=="WoodyTrunk"), ]$RecruitmentMode <- "Unknown"#
Plant_Info[which(is.na(Plant_Info$ReproductiveMode)), ]$RecruitmentMode
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info[which(is.na(Plant_Info$ReproductiveMode)), ]$RecruitmentMode <- "Unknown"
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
#' Process Plant Survey Data#
#'#
#' @description Steps:#
#' \itemize{#
#'  \item Fix column names#
#'  \item format dates#
#'  \item format PlantIDs#
#'  \item format convert "999" values to NA#
#'  \item format change "yes"/"no" values of the insect survey, missing, and dead columns to 0/1#
#'  \item format numeric columns#
#'  \item add total segment column#
#'  \item add fruit count column#
#'  \item add fruit/flower count column#
#'  \item check for observations of 0 pads, 0 height, or 0 width; if there are observations, stop#
#' 	}#
#' Column Names:#
#' \itemize{#
#'  \item PlantMeasureID Record number if Microsoft Access database#
#'  \item First_Observer_Initials Initials of primary observer (should always be KS, for Kristen Sauby)#
#'  \item Second_Observer_Initials Initials of secondary observer; CJP - Cory Penca; YP - Yani Paulay; KS - Kristen Sauby; JW: Juliana Welch; CW: Cedric Worman; AP: Adam Payton#
#'  \item Date Date#
#'  \item PlantID Unique number for the individual plant#
#'  \item Plant_collected Were plant samples collected?#
#'  \item Time#
#'  \item PlantPictures identifying numbers of photos taken#
#'  \item PlantPictures_Direction direction that the photo(s) was(were) taken#
#
#'  \item CA_t Presence/absence (1/0) of Cactoblastis cactorum#
#'  \item CACA_collected Were samples of Cactoblastis cactorum collected?#
#'  \item CACA_quantity Number of Cactoblastis cactorum samples collected#
#
#'  \item ME_t Presence/absence (1/0) of Melitara prodenialis#
#'  \item MEPR_collected Were samples of Melitara prodenialis collected?#
#'  \item MEPR_quantity Number of Melitara prodenialis samples collected#
#
#'  \item CH_t Presence/absence (1/0) of Chelinidea vittiger#
#'  \item CHVI_collected Were samples of Chelinidea vittiger collected?#
#'  \item CHVI_quantity Number of Chelinidea vittiger samples collected#
#
#'  \item DA_t Presence/absence (1/0) of Dactylopius species#
#'  \item DACT_collected Were samples of Dactylopius species collected?#
#'  \item DACT_quantity Number of Dactylopius species samples collected#
#
#'  \item Unknown_Moth_t Presence/absence (1/0) of unknown moth#
#'  \item UnknownMoth_collected Were samples of unknown moth collected?#
#'  \item UnknownMoth_quantity Number of unknown moth samples collected#
#
#'  \item Old_Moth_Evidence_t Evidence of past moth infestation#
#'  \item Old_Moth_Evidence_recent Whether evidence of past moth infestation appears recent or old#
#
#'  \item Fungus Presence/absence (1/0) of plant fungal infection#
#'  \item Gerstaeckeria Presence/absence (1/0) of Gerstaeckeria#
#'  \item Plant_Segments_total Number of segments#
#'  \item Plant_Segments_w_leaves New, green segments with leaves#
#'  \item Plant_Segments_wo_leaves Green segments without leaves#
#'  \item Plant_Segments_woody number of woody segments/trunks; these segments are entirely brown on the outside      #
#'  \item Height_t maximum height in cm#
#'  \item Width_t maximum width in cm#
#'  \item Perpen_Width width, perpendicular to max width, in cm#
#'  \item Num_FlowerBuds Number of flower buds#
#'  \item Num_Fruit_red Number of red fruit#
#'  \item Num_Fruit_green Number of green fruit#
#'  \item Num_Flowers Number of flowers#
#'  \item Num_Fruit use this when number is recorded but distinction by color is not made#
#'  \item Pollinators#
#'  \item Spiders#
#'  \item Ants#
#'  \item Other_collected_quantity#
#'  \item Plant_Notes#
#'  \item Insect_Notes        #
#'  \item Other_Notes#
#'  \item Dead Whether the plant is observed to be dead; 0 or 1#
#'  \item Missing#
#'  \item OutsideOfPlot "Yes" if plant is no longer in plot#
#'  \item PlotPlantID Unique number for the individual plant; if a plant is counted in multiple plots, a letter is appended to the plant ID here (e.g., 9606a) and then removed for analysis#
#'  \item Size_t The sum of Plant_Segments_total, Plant_Segments_w_leaves, Plant_Segments_wo_leaves, and Plant_Segments_woody#
#
#'  \item Fruit_t The sum of Num_Fruit_red, Num_Fruit_green, and Num_Fruit#
#'  \item Fruit_Flowers_t The sum of Num_FlowerBuds, Num_Flowers, Num_Fruit_red, Num_Fruit_green, and Num_Fruit#
#' 	}#
#'#
#' @export#
#
processPlantSurveys <- function(Plant_Surveys) {#
	# ------------------------------------------------------------- CHANGE NAMES#
	# remame size and height#
	Plant_Surveys %<>%	as.data.table %>%#
		setnames("Max_Height", 				"Height_t") %>%#
		setnames("Max_Width", 				"Width_t") %>%#
		setnames("CACA_Larvae", 			"CA_t") %>%#
		setnames("MEPR_Larvae", 			"ME_t") %>%#
		setnames("CHVI_Evidence", 			"CH_t") %>%#
		setnames("DACT_Evidence", 			"DA_t") %>%#
		setnames("UnknownMoth_Evidence", 	"Unknown_Moth_t") %>%#
		setnames("Old_Moth_Evidence", 		"Old_Moth_Evidence_t") %>%#
		setnames("DateSurveyed", 			"Date") %>%#
		setnames("Gerstaeckeria", 			"Gerstaeckeria_t") %>%#
		as.data.frame#
	# formatting/preparation necessary for prepping Demographic Plant Info#
	Plant_Surveys$Date %<>% Format_Date_Function#
	Plant_Surveys %<>% arrange(Date)#
	Plant_Surveys %<>% Format_PlantIDs_Function#
	# ------------------------------------------------ CONVERT ALL "999s" to NAs#
	Plant_Surveys[,c(#
		"Plant_Segments_total", #
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		"Perpen_Width",#
		"Width_t",#
		"Height_t",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------- INSECT SURVEYS, MISSING, DEAD - CHANGE YES, NO to 0, 1#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Gerstaeckeria_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, Yes_Function#
	)#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Gerstaeckeria_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>%#
		apply(2, No_Function#
	)#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Gerstaeckeria_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------------------------------------------------- MAKE NUMERIC#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Gerstaeckeria_t",#
		"Old_Moth_Evidence_t",#
		"Plant_Segments_total",#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		"Height_t",#
		"Width_t",#
		"Perpen_Width",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, as.numeric#
	)#
	# ------------------------------------------------- ADD TOTAL SEGMENT COLUMN#
	# do this so that plants that have no segments recorded (all NAs) have a total segment count = NA#
	# for those plants that have fewer than four NAs (at least one segment column has a number), sum the segments#
	Plant_Surveys$Size_t <- Plant_Surveys %>%#
							dplyr::select(#
								Plant_Segments_total,#
								Plant_Segments_w_leaves,#
								Plant_Segments_wo_leaves,#
								Plant_Segments_woody#
							) %>%#
							apply(1, mysum)#
	Plant_Surveys$Size_t %<>% Zero_is_NA_Function#
	# --------------------------------------------------------- ADD FRUIT COLUMN#
	Plant_Surveys$Fruit_t <- Plant_Surveys %>%#
							dplyr::select(#
								Num_Fruit_red,#
								Num_Fruit_green,#
								Num_Fruit#
							) %>%#
							apply(1, mysum)#
	Plant_Surveys$Fruit_Flowers_t <- Plant_Surveys %>%#
							dplyr::select(#
								Num_FlowerBuds,#
								Num_Flowers,#
								Num_Fruit_red,#
								Num_Fruit_green,#
								Num_Fruit#
							) %>%#
							apply(1, mysum)#
	# ----------------------------------------------------------- ERROR MESSAGES#
	# There should never be observations of 0 pads, 0 height, or 0 width#
	# replace 0 with NA#
	dups <- Plant_Surveys %>% filter(Size_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Size_t equal 0.")}#
#
	dups <- Plant_Surveys %>% filter(Height_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Height_t equal 0.")}#
#
	dups <- Plant_Surveys %>% filter(Width_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Width_t equal 0.")}#
#
	dups <- Plant_Surveys %>% filter(Perpen_Width==0)#
	if (dim(dups)[1] > 0) {stop("Values for Perpen_Width equal 0.")}#
	return(Plant_Surveys)#
}#
#
#' Process Original Plant Survey Data#
#'#
#' @description I collected this data in December 2012, then gave the plants new Plant IDs. This data cannot be used for the demography study but can be used to determine plot occupancy.#
#' Steps:#
#' \itemize{#
#'  \item Fix column names#
#'  \item format dates#
#'  \item format PlantIDs#
#'  \item format convert "999" values to NA#
#'  \item format change "yes"/"no" values of the insect survey, missing, and dead columns to 0/1#
#'  \item format numeric columns#
#'  \item check for observations of 0 pads, 0 height, or 0 width; if there are observations, stop#
#' 	}#
#
#' 	}#
#'#
#' @export#
#
processOriginalPlantData <- function(Original_Plant_Data) {#
	# ------------------------------------------------------------- CHANGE NAMES#
	# remame size and height#
	Original_Plant_Data %<>% as.data.table %>%#
		setnames("Max_Height", 				"Height_t") %>%#
		setnames("Max_Width", 				"Width_t") %>%#
		setnames("CACA_Larvae", 			"CA_t") %>%#
		setnames("MEPR_Larvae", 			"ME_t") %>%#
		setnames("CHVI_Evidence", 			"CH_t") %>%#
		setnames("DACT_Evidence", 			"DA_t") %>%#
		setnames("UnknownMoth_Evidence", 	"Unknown_Moth_t") %>%#
		setnames("Old_Moth_Evidence", 		"Old_Moth_Evidence_t") %>%#
		as.data.frame#
	# formatting/preparation necessary for prepping Demographic Plant Info#
	Original_Plant_Data$Date %<>% Format_Date_Function#
	Original_Plant_Data %<>% arrange(Date)#
	# ------------------------------------------------ CONVERT ALL "999s" to NAs#
	Original_Plant_Data[,c(#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_Leaves",#
		"Perpen_Width",#
		"Width_t",#
		"Height_t",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------- INSECT SURVEYS, MISSING, DEAD - CHANGE YES, NO to 0, 1#
	Original_Plant_Data[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t")] %<>% #
		apply(2, Yes_Function#
	)#
	Original_Plant_Data[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t")] %<>%#
		apply(2, No_Function#
	)#
	Original_Plant_Data[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------------------------------------------------- MAKE NUMERIC#
	Original_Plant_Data[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_Leaves",#
		"Height_t",#
		"Width_t",#
		"Perpen_Width",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit")] %<>% #
		apply(2, as.numeric#
	)#
	# ----------------------------------------------------------- ERROR MESSAGES#
	# There should never be observations of 0 pads, 0 height, or 0 width#
	# replace 0 with NA#
	dups <- Original_Plant_Data %>% filter(Height_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Height_t equal 0.")}#
#
	dups <- Original_Plant_Data %>% filter(Width_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Width_t equal 0.")}#
#
	dups <- Original_Plant_Data %>% filter(Perpen_Width==0)#
	if (dim(dups)[1] > 0) {stop("Values for Perpen_Width equal 0.")}#
	return(Original_Plant_Data)#
}#
#' Merge Plant Info and Plant Surveys data files#
#'#
#' @description Add Island, Cluster, and Host Species information to the Plant_Surveys dataset.#
#' @param Plant_Surveys Plant Survey Dataset#
#' @param Plant_Info  Plant Information Dataset#
#'#
#' @export#
#
mergePlantSurveysPlantInfo <- function(Plant_Surveys, Plant_Info) {#
	Plant_Surveys <- Plant_Info %>%#
		dplyr::select(#
			ClusterID, #
			InDemographicStudy, #
			PlotPlantID, #
			Tag_Number, #
			Island, #
			Cluster2, #
			Network, #
			Species, #
			InBigPlantStudy, #
			N.PlotPlantIDs, #
			Easting, #
			Northing,#
			RecruitmentMode#
		) %>%#
		merge(Plant_Surveys, by = "PlotPlantID")#
	return(Plant_Surveys)#
}#
#
#' Add Sampling Period Variable#
#'#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
addSamplingPeriods <- function(Plant_Surveys) {#
	Plant_Surveys$DemographicSurvey <- "NA"#
	Plant_Surveys %<>% #
		group_by(Date) %>% #
		mutate(#
			# SURVEY 0#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date < "2013-05-14"), "0"),#
			# SURVEY 1 - SPRING/SUMMER 2013#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2013-05-14" & Date <= "2013-08-06"), "1"),#
			# SURVEY 2 - FALL/WINTER 2013/2014#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2013-12-13" & Date <= "2014-01-28"), "2"),#
			# SURVEY 3 - SPRING/SUMMER 2014#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2014-05-06" & Date <= "2014-09-24"), "3"),#
			# SURVEY 4 - WINTER 2015#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2015-01-08" & Date <= "2015-02-21"), "4"),#
			# SURVEY 5 - SPRING/SUMMER 2015#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2015-05-01"), "5"))#
	return(Plant_Surveys)#
}#
#
#' Add Sampling Year Variable#
#'#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
addSamplingYear <- function(Plant_Surveys) {#
	Plant_Surveys$SamplingYear <- NA#
	Plant_Surveys %<>% #
		group_by(Date) %>% #
		mutate(#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2012-12-02" & Date < "2013-05-01"), #
				2012#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2013-05-01" & Date < "2014-05-01"), #
				2013#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2014-05-01" & Date < "2015-05-01"), #
				2014#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2015-05-01"), #
				2015#
			)#
		)#
	return(Plant_Surveys)#
}#
#
#' Determine Fruit and Flower Presence#
#'#
#' @description Create separate variables indicating whether fruit and fruit and flowers were present.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
calculateFruitPresence <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		mutate(#
			FruitPres_t 		= ifelse(Fruit_t > 0, 1, 0),#
			FruitFlowerPres_t 	= ifelse(Fruit_Flowers_t > 0, 1, 0)#
		) %>%#
		as.data.table %>%#
		# add NAs#
		.[is.na(Fruit_t), FruitPres_t := NA] %>%#
		.[is.na(Fruit_Flowers_t), FruitPres_t := NA] %>%#
		as.data.frame#
}#
#
#' Calculate Plant Volume#
#'#
#' @description Calculate plant volume as a cone, cylinder, and elliptic cylinder.#
#' @param Plant_Surveys Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
calculatePlantVolume <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		mutate(#
			Cone_t 				= pi * (((Width_t + Perpen_Width)/4)^2) * #
									Height_t / 3,#
			Cylinder_t 			= pi * ((Perpen_Width/2)^2) * Width_t,#
			Elliptic_Cylinder_t = pi * Height_t/2 * Perpen_Width/2 * Width_t#
		)#
}#
#
#' Determine if a survey was complete#
#'#
#' @param x Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
Complete_Surveys_function <- function(x){#
	ifelse(rowSums(is.na(x))==0, 1, 0)#
	return(x)#
}#
#
#' Determine whether a survey was complete#
#'#
#' @description Determine whether all data was collected during a survey.#
#' Determine complete surveys for:#
#' \itemize{#
#'  \item insect surveys#
#'  \item plant size#
#'  \item size measurements (cm)#
#'  \item fruit, flowers, and flower buds#
#'  \item all data#
#' 	}#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
determineCompleteSurveys <- function(Plant_Surveys) {#
	Plant_Surveys$complete_insect_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"CA_t",#
			"ME_t",#
			"Unknown_Moth_t",#
			"Old_Moth_Evidence_t"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_segments_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Plant_Segments_w_leaves",#
			"Plant_Segments_wo_leaves",#
			"Plant_Segments_woody"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_size_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Height_t",#
			"Width_t",#
			"Perpen_Width"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_fruit_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Num_FlowerBuds",#
			"Num_Fruit_red",#
			"Num_Fruit_green",#
			"Num_Flowers"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
		# insects#
		"CA_t",#
		"ME_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		# number of segments#
		"Size_t",#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		# size in cm#
		"Height_t",#
		"Width_t",#
		"Perpen_Width",#
		# flowers and fruit#
		"Fruit_t" #
		)]))==0, 1, 0#
	)#
	return(Plant_Surveys)#
}#
#
#' Determine if an insect species was ever detected during the study period#
#'#
#' @description Determine if an insect species was ever detected during the study period.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
determineInsectPresenceDuringStudy <- function(Plant_Surveys) {#
	Plant_Surveys.present <- Plant_Surveys %>%#
		group_by(PlantID) %>%#
		summarise(#
			CAPresent = ifelse(sum(CA_t, na.rm=T) > 0, 1, 0),#
			MEPresent = ifelse(sum(ME_t, na.rm=T) > 0, 1, 0)#
			) %>%#
		as.data.frame()#
	Plant_Surveys %>% merge(Plant_Surveys.present, by="PlantID")#
}#
#
#' Rename Species levels#
#'#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
renameSpecies <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		as.data.table %>%#
		.[Species == "pusilla", Species := "Opuntia pusilla"] %>%#
		.[Species == "stricta", Species := "Opuntia stricta"] %>%#
		as.data.frame#
}#
#
#' Rename Convert 1/0 to Yes/No#
#'#
#' @param x Vector of 0/1 data#
#'#
#' @export#
#
Yes_No_from_1_0_Function <- function(x){#
	x[x > 0] <- "Yes"#
	x[x == 0] <- "No"#
	return(x)#
}#
#
#' Make Insect Factor Variables#
#'#
#' @description Make new insect variables with "yes"/"no" values instead of 0/1.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
createInsectFactorVariables <- function(Plant_Surveys) {#
	Plant_Surveys$C_cactorum 	<- Plant_Surveys$CA_t#
	Plant_Surveys$M_prodenialis <- Plant_Surveys$ME_t#
	Plant_Surveys[,c(#
		"C_cactorum",#
		"M_prodenialis")] %<>%#
		apply(., 2, Yes_No_from_1_0_Function) %>%#
		apply(., 2, as.factor#
	)#
	return(Plant_Surveys)#
}#
#
#' Format as Factors#
#'#
#' @description Format variables as factors.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
formatasFactors <- function(x) {#
	factors <- c("ClusterID", "Network", "Island", "Species", #
		"DemographicSurvey", "Year", "Season", "C_cactorum", #
		"M_prodenialis")#
	for (i in 1:length(factors)) {#
		if (factors[i] %in% names(x)) {#
			x[, factors[i]] %<>% as.factor#
		}#
	}#
	return(x)#
}#
#
#' Process Plant Survey Data#
#'#
#' @description Steps:#
#' \itemize{#
#'  \item add column, "DemographicSurvey"#
#'	\itemize{#
#'		\item survey 1 - spring/summer 2013#
#'		\item survey 2 - fall/winter 2013/2014#
#'		\item survey 3 - spring/summer 2014#
#'		\item survey 4 - winter 2015#
#'		\item survey 5 - spring/summer 2015#
#'	}#
#'  \item addSamplingYear#
#'	\itemize{#
#'		\item 2012 - Date >= "2012-12-02" & Date < "2013-05-01"#
#'		\item 2013 - Date >= "2013-05-01" & Date < "2014-05-01"#
#'		\item 2014 - Date >= "2014-05-01" & Date < "2015-05-01"#
#'		\item 2015 - Date >= "2015-05-01"#
#'	}#
#' }#
#'#
#' @export#
#
processPlantSurveysafterMergewPlantInfo <- function(Plant_Surveys) {#
	Plant_Surveys %>%#
		filter(InBigPlantStudy!="yes" & InBigPlantStudy!="Yes") %>%#
		addSamplingPeriods %>%#
		addSamplingYear %>%#
		as.data.frame#
}#
#' Process Plant Survey Data, per plant#
#'#
#' @description Steps:#
#' \itemize{#
#'  	\item merge records for the same plant from multiple plots; the data to be merged must have been collected on the same day.#
#'  	\item Create separate variables indicating whether fruit and fruit and flowers were present#
#'  	\item Calculate plant volume as a cone, cylinder, and elliptic cylinder#
#'  	\item Determine if an insect species was ever detected during the study period#
#'  	\item Rename species levels ("Opuntia stricta" instead of "stricta" and "Opuntia pusilla" instead of "pusilla")#
#' 	 	\item Make new insect variables with "yes"/"no" values instead of 0/1, named "C_cactorum" and "M_prodenialis"#
#'  	\item format the variables "ClusterID", "Network", "Island", "Species", "DemographicSurvey", "SamplingYear", "Year", "Season", "C_cactorum", "M_prodenialis" as factors#
#' 	}#
#'#
#' @export#
processSurveysMergedbyPlant <- function(Plant_Surveys) {#
	Plant_Surveys %>%#
		mergePlantRecordsfromMultiplePlots %>%#
		calculateFruitPresence %>%#
		calculatePlantVolume %>%#
		determineInsectPresenceDuringStudy %>%#
		renameSpecies %>%#
		createInsectFactorVariables %>%#
		formatasFactors#
}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
#' Process Plant Survey Data#
#'#
#' @description Steps:#
#' \itemize{#
#'  \item Fix column names#
#'  \item format dates#
#'  \item format PlantIDs#
#'  \item format convert "999" values to NA#
#'  \item format change "yes"/"no" values of the insect survey, missing, and dead columns to 0/1#
#'  \item format numeric columns#
#'  \item add total segment column#
#'  \item add fruit count column#
#'  \item add fruit/flower count column#
#'  \item check for observations of 0 pads, 0 height, or 0 width; if there are observations, stop#
#' 	}#
#' Column Names:#
#' \itemize{#
#'  \item PlantMeasureID Record number if Microsoft Access database#
#'  \item First_Observer_Initials Initials of primary observer (should always be KS, for Kristen Sauby)#
#'  \item Second_Observer_Initials Initials of secondary observer; CJP - Cory Penca; YP - Yani Paulay; KS - Kristen Sauby; JW: Juliana Welch; CW: Cedric Worman; AP: Adam Payton#
#'  \item Date Date#
#'  \item PlantID Unique number for the individual plant#
#'  \item Plant_collected Were plant samples collected?#
#'  \item Time#
#'  \item PlantPictures identifying numbers of photos taken#
#'  \item PlantPictures_Direction direction that the photo(s) was(were) taken#
#
#'  \item CA_t Presence/absence (1/0) of Cactoblastis cactorum#
#'  \item CACA_collected Were samples of Cactoblastis cactorum collected?#
#'  \item CACA_quantity Number of Cactoblastis cactorum samples collected#
#
#'  \item ME_t Presence/absence (1/0) of Melitara prodenialis#
#'  \item MEPR_collected Were samples of Melitara prodenialis collected?#
#'  \item MEPR_quantity Number of Melitara prodenialis samples collected#
#
#'  \item CH_t Presence/absence (1/0) of Chelinidea vittiger#
#'  \item CHVI_collected Were samples of Chelinidea vittiger collected?#
#'  \item CHVI_quantity Number of Chelinidea vittiger samples collected#
#
#'  \item DA_t Presence/absence (1/0) of Dactylopius species#
#'  \item DACT_collected Were samples of Dactylopius species collected?#
#'  \item DACT_quantity Number of Dactylopius species samples collected#
#
#'  \item Unknown_Moth_t Presence/absence (1/0) of unknown moth#
#'  \item UnknownMoth_collected Were samples of unknown moth collected?#
#'  \item UnknownMoth_quantity Number of unknown moth samples collected#
#
#'  \item Old_Moth_Evidence_t Evidence of past moth infestation#
#'  \item Old_Moth_Evidence_recent Whether evidence of past moth infestation appears recent or old#
#
#'  \item Fungus Presence/absence (1/0) of plant fungal infection#
#'  \item Gerstaeckeria Presence/absence (1/0) of Gerstaeckeria#
#'  \item Plant_Segments_total Number of segments#
#'  \item Plant_Segments_w_leaves New, green segments with leaves#
#'  \item Plant_Segments_wo_leaves Green segments without leaves#
#'  \item Plant_Segments_woody number of woody segments/trunks; these segments are entirely brown on the outside      #
#'  \item Height_t maximum height in cm#
#'  \item Width_t maximum width in cm#
#'  \item Perpen_Width width, perpendicular to max width, in cm#
#'  \item Num_FlowerBuds Number of flower buds#
#'  \item Num_Fruit_red Number of red fruit#
#'  \item Num_Fruit_green Number of green fruit#
#'  \item Num_Flowers Number of flowers#
#'  \item Num_Fruit use this when number is recorded but distinction by color is not made#
#'  \item Pollinators#
#'  \item Spiders#
#'  \item Ants#
#'  \item Other_collected_quantity#
#'  \item Plant_Notes#
#'  \item Insect_Notes        #
#'  \item Other_Notes#
#'  \item Dead Whether the plant is observed to be dead; 0 or 1#
#'  \item Missing#
#'  \item OutsideOfPlot "Yes" if plant is no longer in plot#
#'  \item PlotPlantID Unique number for the individual plant; if a plant is counted in multiple plots, a letter is appended to the plant ID here (e.g., 9606a) and then removed for analysis#
#'  \item Size_t The sum of Plant_Segments_total, Plant_Segments_w_leaves, Plant_Segments_wo_leaves, and Plant_Segments_woody#
#
#'  \item Fruit_t The sum of Num_Fruit_red, Num_Fruit_green, and Num_Fruit#
#'  \item Fruit_Flowers_t The sum of Num_FlowerBuds, Num_Flowers, Num_Fruit_red, Num_Fruit_green, and Num_Fruit#
#' 	}#
#'#
#' @export#
#
processPlantSurveys <- function(Plant_Surveys) {#
	# ------------------------------------------------------------- CHANGE NAMES#
	# remame size and height#
	Plant_Surveys %<>%	as.data.table %>%#
		setnames("Max_Height", 				"Height_t") %>%#
		setnames("Max_Width", 				"Width_t") %>%#
		setnames("CACA_Larvae", 			"CA_t") %>%#
		setnames("MEPR_Larvae", 			"ME_t") %>%#
		setnames("CHVI_Evidence", 			"CH_t") %>%#
		setnames("DACT_Evidence", 			"DA_t") %>%#
		setnames("UnknownMoth_Evidence", 	"Unknown_Moth_t") %>%#
		setnames("Old_Moth_Evidence", 		"Old_Moth_Evidence_t") %>%#
		setnames("DateSurveyed", 			"Date") %>%#
		setnames("Gerstaeckeria", 			"Gerstaeckeria_t") %>%#
		as.data.frame#
	# formatting/preparation necessary for prepping Demographic Plant Info#
	Plant_Surveys$Date %<>% Format_Date_Function#
	Plant_Surveys %<>% arrange(Date)#
	Plant_Surveys %<>% Format_PlantIDs_Function#
	# ------------------------------------------------ CONVERT ALL "999s" to NAs#
	Plant_Surveys[,c(#
		"Plant_Segments_total", #
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		"Perpen_Width",#
		"Width_t",#
		"Height_t",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------- INSECT SURVEYS, MISSING, DEAD - CHANGE YES, NO to 0, 1#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Gerstaeckeria_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, Yes_Function#
	)#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Gerstaeckeria_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>%#
		apply(2, No_Function#
	)#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Gerstaeckeria_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------------------------------------------------- MAKE NUMERIC#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Gerstaeckeria_t",#
		"Old_Moth_Evidence_t",#
		"Plant_Segments_total",#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		"Height_t",#
		"Width_t",#
		"Perpen_Width",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, as.numeric#
	)#
	# ------------------------------------------------- ADD TOTAL SEGMENT COLUMN#
	# do this so that plants that have no segments recorded (all NAs) have a total segment count = NA#
	# for those plants that have fewer than four NAs (at least one segment column has a number), sum the segments#
	Plant_Surveys$Size_t <- Plant_Surveys %>%#
							dplyr::select(#
								Plant_Segments_total,#
								Plant_Segments_w_leaves,#
								Plant_Segments_wo_leaves,#
								Plant_Segments_woody#
							) %>%#
							apply(1, mysum)#
	Plant_Surveys$Size_t %<>% Zero_is_NA_Function#
	# --------------------------------------------------------- ADD FRUIT COLUMN#
	Plant_Surveys$Fruit_t <- Plant_Surveys %>%#
							dplyr::select(#
								Num_Fruit_red,#
								Num_Fruit_green,#
								Num_Fruit#
							) %>%#
							apply(1, mysum)#
	Plant_Surveys$Fruit_Flowers_t <- Plant_Surveys %>%#
							dplyr::select(#
								Num_FlowerBuds,#
								Num_Flowers,#
								Num_Fruit_red,#
								Num_Fruit_green,#
								Num_Fruit#
							) %>%#
							apply(1, mysum)#
	# ----------------------------------------------------------- ERROR MESSAGES#
	# There should never be observations of 0 pads, 0 height, or 0 width#
	# replace 0 with NA#
	dups <- Plant_Surveys %>% filter(Size_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Size_t equal 0.")}#
#
	dups <- Plant_Surveys %>% filter(Height_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Height_t equal 0.")}#
#
	dups <- Plant_Surveys %>% filter(Width_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Width_t equal 0.")}#
#
	dups <- Plant_Surveys %>% filter(Perpen_Width==0)#
	if (dim(dups)[1] > 0) {stop("Values for Perpen_Width equal 0.")}#
	return(Plant_Surveys)#
}#
#
#' Process Original Plant Survey Data#
#'#
#' @description I collected this data in December 2012, then gave the plants new Plant IDs. This data cannot be used for the demography study but can be used to determine plot occupancy.#
#' Steps:#
#' \itemize{#
#'  \item Fix column names#
#'  \item format dates#
#'  \item format PlantIDs#
#'  \item format convert "999" values to NA#
#'  \item format change "yes"/"no" values of the insect survey, missing, and dead columns to 0/1#
#'  \item format numeric columns#
#'  \item check for observations of 0 pads, 0 height, or 0 width; if there are observations, stop#
#' 	}#
#
#' 	}#
#'#
#' @export#
#
processOriginalPlantData <- function(Original_Plant_Data) {#
	# ------------------------------------------------------------- CHANGE NAMES#
	# remame size and height#
	Original_Plant_Data %<>% as.data.table %>%#
		setnames("Max_Height", 				"Height_t") %>%#
		setnames("Max_Width", 				"Width_t") %>%#
		setnames("CACA_Larvae", 			"CA_t") %>%#
		setnames("MEPR_Larvae", 			"ME_t") %>%#
		setnames("CHVI_Evidence", 			"CH_t") %>%#
		setnames("DACT_Evidence", 			"DA_t") %>%#
		setnames("UnknownMoth_Evidence", 	"Unknown_Moth_t") %>%#
		setnames("Old_Moth_Evidence", 		"Old_Moth_Evidence_t") %>%#
		as.data.frame#
	# formatting/preparation necessary for prepping Demographic Plant Info#
	Original_Plant_Data$Date %<>% Format_Date_Function#
	Original_Plant_Data %<>% arrange(Date)#
	# ------------------------------------------------ CONVERT ALL "999s" to NAs#
	Original_Plant_Data[,c(#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_Leaves",#
		"Perpen_Width",#
		"Width_t",#
		"Height_t",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------- INSECT SURVEYS, MISSING, DEAD - CHANGE YES, NO to 0, 1#
	Original_Plant_Data[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t")] %<>% #
		apply(2, Yes_Function#
	)#
	Original_Plant_Data[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t")] %<>%#
		apply(2, No_Function#
	)#
	Original_Plant_Data[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------------------------------------------------- MAKE NUMERIC#
	Original_Plant_Data[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_Leaves",#
		"Height_t",#
		"Width_t",#
		"Perpen_Width",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit")] %<>% #
		apply(2, as.numeric#
	)#
	# ----------------------------------------------------------- ERROR MESSAGES#
	# There should never be observations of 0 pads, 0 height, or 0 width#
	# replace 0 with NA#
	dups <- Original_Plant_Data %>% filter(Height_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Height_t equal 0.")}#
#
	dups <- Original_Plant_Data %>% filter(Width_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Width_t equal 0.")}#
#
	dups <- Original_Plant_Data %>% filter(Perpen_Width==0)#
	if (dim(dups)[1] > 0) {stop("Values for Perpen_Width equal 0.")}#
	return(Original_Plant_Data)#
}#
#' Merge Plant Info and Plant Surveys data files#
#'#
#' @description Add Island, Cluster, and Host Species information to the Plant_Surveys dataset.#
#' @param Plant_Surveys Plant Survey Dataset#
#' @param Plant_Info  Plant Information Dataset#
#'#
#' @export#
#
mergePlantSurveysPlantInfo <- function(Plant_Surveys, Plant_Info) {#
	Plant_Surveys <- Plant_Info %>%#
		dplyr::select(#
			ClusterID, #
			InDemographicStudy, #
			PlotPlantID, #
			Tag_Number, #
			Island, #
			Cluster2, #
			Network, #
			Species, #
			InBigPlantStudy, #
			N.PlotPlantIDs, #
			Easting, #
			Northing,#
			RecruitmentMode#
		) %>%#
		merge(Plant_Surveys, by = "PlotPlantID")#
	return(Plant_Surveys)#
}#
#
#' Add Sampling Period Variable#
#'#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
addSamplingPeriods <- function(Plant_Surveys) {#
	Plant_Surveys$DemographicSurvey <- "NA"#
	Plant_Surveys %<>% #
		group_by(Date) %>% #
		mutate(#
			# SURVEY 0#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date < "2013-05-14"), "0"),#
			# SURVEY 1 - SPRING/SUMMER 2013#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2013-05-14" & Date <= "2013-08-06"), "1"),#
			# SURVEY 2 - FALL/WINTER 2013/2014#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2013-12-13" & Date <= "2014-01-28"), "2"),#
			# SURVEY 3 - SPRING/SUMMER 2014#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2014-05-06" & Date <= "2014-09-24"), "3"),#
			# SURVEY 4 - WINTER 2015#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2015-01-08" & Date <= "2015-02-21"), "4"),#
			# SURVEY 5 - SPRING/SUMMER 2015#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2015-05-01"), "5"))#
	return(Plant_Surveys)#
}#
#
#' Add Sampling Year Variable#
#'#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
addSamplingYear <- function(Plant_Surveys) {#
	Plant_Surveys$SamplingYear <- NA#
	Plant_Surveys %<>% #
		group_by(Date) %>% #
		mutate(#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2012-12-02" & Date < "2013-05-01"), #
				2012#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2013-05-01" & Date < "2014-05-01"), #
				2013#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2014-05-01" & Date < "2015-05-01"), #
				2014#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2015-05-01"), #
				2015#
			)#
		)#
	return(Plant_Surveys)#
}#
#
#' Determine Fruit and Flower Presence#
#'#
#' @description Create separate variables indicating whether fruit and fruit and flowers were present.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
calculateFruitPresence <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		mutate(#
			FruitPres_t 		= ifelse(Fruit_t > 0, 1, 0),#
			FruitFlowerPres_t 	= ifelse(Fruit_Flowers_t > 0, 1, 0)#
		) %>%#
		as.data.table %>%#
		# add NAs#
		.[is.na(Fruit_t), FruitPres_t := NA] %>%#
		.[is.na(Fruit_Flowers_t), FruitPres_t := NA] %>%#
		as.data.frame#
}#
#
#' Calculate Plant Volume#
#'#
#' @description Calculate plant volume as a cone, cylinder, and elliptic cylinder.#
#' @param Plant_Surveys Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
calculatePlantVolume <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		mutate(#
			Cone_t 				= pi * (((Width_t + Perpen_Width)/4)^2) * #
									Height_t / 3,#
			Cylinder_t 			= pi * ((Perpen_Width/2)^2) * Width_t,#
			Elliptic_Cylinder_t = pi * Height_t/2 * Perpen_Width/2 * Width_t#
		)#
}#
#
#' Determine if a survey was complete#
#'#
#' @param x Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
Complete_Surveys_function <- function(x){#
	ifelse(rowSums(is.na(x))==0, 1, 0)#
	return(x)#
}#
#
#' Determine whether a survey was complete#
#'#
#' @description Determine whether all data was collected during a survey.#
#' Determine complete surveys for:#
#' \itemize{#
#'  \item insect surveys#
#'  \item plant size#
#'  \item size measurements (cm)#
#'  \item fruit, flowers, and flower buds#
#'  \item all data#
#' 	}#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
determineCompleteSurveys <- function(Plant_Surveys) {#
	Plant_Surveys$complete_insect_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"CA_t",#
			"ME_t",#
			"Unknown_Moth_t",#
			"Old_Moth_Evidence_t"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_segments_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Plant_Segments_w_leaves",#
			"Plant_Segments_wo_leaves",#
			"Plant_Segments_woody"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_size_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Height_t",#
			"Width_t",#
			"Perpen_Width"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_fruit_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Num_FlowerBuds",#
			"Num_Fruit_red",#
			"Num_Fruit_green",#
			"Num_Flowers"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
		# insects#
		"CA_t",#
		"ME_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		# number of segments#
		"Size_t",#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		# size in cm#
		"Height_t",#
		"Width_t",#
		"Perpen_Width",#
		# flowers and fruit#
		"Fruit_t" #
		)]))==0, 1, 0#
	)#
	return(Plant_Surveys)#
}#
#
#' Determine if an insect species was ever detected during the study period#
#'#
#' @description Determine if an insect species was ever detected during the study period.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
determineInsectPresenceDuringStudy <- function(Plant_Surveys) {#
	Plant_Surveys.present <- Plant_Surveys %>%#
		group_by(PlantID) %>%#
		summarise(#
			CAPresent = ifelse(sum(CA_t, na.rm=T) > 0, 1, 0),#
			MEPresent = ifelse(sum(ME_t, na.rm=T) > 0, 1, 0)#
			) %>%#
		as.data.frame()#
	Plant_Surveys %>% merge(Plant_Surveys.present, by="PlantID")#
}#
#
#' Rename Species levels#
#'#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
renameSpecies <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		as.data.table %>%#
		.[Species == "pusilla", Species := "Opuntia pusilla"] %>%#
		.[Species == "stricta", Species := "Opuntia stricta"] %>%#
		as.data.frame#
}#
#
#' Rename Convert 1/0 to Yes/No#
#'#
#' @param x Vector of 0/1 data#
#'#
#' @export#
#
Yes_No_from_1_0_Function <- function(x){#
	x[x > 0] <- "Yes"#
	x[x == 0] <- "No"#
	return(x)#
}#
#
#' Make Insect Factor Variables#
#'#
#' @description Make new insect variables with "yes"/"no" values instead of 0/1.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
createInsectFactorVariables <- function(Plant_Surveys) {#
	Plant_Surveys$C_cactorum 	<- Plant_Surveys$CA_t#
	Plant_Surveys$M_prodenialis <- Plant_Surveys$ME_t#
	Plant_Surveys[,c(#
		"C_cactorum",#
		"M_prodenialis")] %<>%#
		apply(., 2, Yes_No_from_1_0_Function) %>%#
		apply(., 2, as.factor#
	)#
	return(Plant_Surveys)#
}#
#
#' Format as Factors#
#'#
#' @description Format variables as factors.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
formatasFactors <- function(x) {#
	factors <- c("ClusterID", "Network", "Island", "Species", #
		"DemographicSurvey", "Year", "Season", "C_cactorum", #
		"M_prodenialis")#
	for (i in 1:length(factors)) {#
		if (factors[i] %in% names(x)) {#
			x[, factors[i]] %<>% as.factor#
		}#
	}#
	return(x)#
}#
#
#' Process Plant Survey Data#
#'#
#' @description Steps:#
#' \itemize{#
#'  \item add column, "DemographicSurvey"#
#'	\itemize{#
#'		\item survey 1 - spring/summer 2013#
#'		\item survey 2 - fall/winter 2013/2014#
#'		\item survey 3 - spring/summer 2014#
#'		\item survey 4 - winter 2015#
#'		\item survey 5 - spring/summer 2015#
#'	}#
#'  \item addSamplingYear#
#'	\itemize{#
#'		\item 2012 - Date >= "2012-12-02" & Date < "2013-05-01"#
#'		\item 2013 - Date >= "2013-05-01" & Date < "2014-05-01"#
#'		\item 2014 - Date >= "2014-05-01" & Date < "2015-05-01"#
#'		\item 2015 - Date >= "2015-05-01"#
#'	}#
#' }#
#'#
#' @export#
#
processPlantSurveysafterMergewPlantInfo <- function(Plant_Surveys) {#
	Plant_Surveys %>%#
		filter(InBigPlantStudy!="yes" & InBigPlantStudy!="Yes") %>%#
		addSamplingPeriods %>%#
		addSamplingYear %>%#
		as.data.frame#
}#
#' Process Plant Survey Data, per plant#
#'#
#' @description Steps:#
#' \itemize{#
#'  	\item merge records for the same plant from multiple plots; the data to be merged must have been collected on the same day.#
#'  	\item Create separate variables indicating whether fruit and fruit and flowers were present#
#'  	\item Calculate plant volume as a cone, cylinder, and elliptic cylinder#
#'  	\item Determine if an insect species was ever detected during the study period#
#'  	\item Rename species levels ("Opuntia stricta" instead of "stricta" and "Opuntia pusilla" instead of "pusilla")#
#' 	 	\item Make new insect variables with "yes"/"no" values instead of 0/1, named "C_cactorum" and "M_prodenialis"#
#'  	\item format the variables "ClusterID", "Network", "Island", "Species", "DemographicSurvey", "SamplingYear", "Year", "Season", "C_cactorum", "M_prodenialis" as factors#
#' 	}#
#'#
#' @export#
processSurveysMergedbyPlant <- function(Plant_Surveys) {#
	Plant_Surveys %>%#
		mergePlantRecordsfromMultiplePlots %>%#
		calculateFruitPresence %>%#
		calculatePlantVolume %>%#
		determineInsectPresenceDuringStudy %>%#
		renameSpecies %>%#
		createInsectFactorVariables %>%#
		formatasFactors#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
Plant_Surveys_All <- Demographic.Plant.Surveys#
Plant_Info_All <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# those marked dead/missing, then not dead/missing#
# find a 10 in concatenated?#
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
if (dim(dups)[1] > 0) {stop("Duplicates observations for a PlantID, Date combination are present in the dataset.")}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% filter(is.na(PlantID))#
if (dim(dups)[1] > 0) {stop("NA values for PlantID.")}#
# --------------- Demographic Plot Surveys ---------------------------------- ##
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
# --------------- Demographic Plant Surveys --------------------------------- ##
Plant_Surveys %<>% processPlantSurveys#
# --------------- Demographic Plant Info ------------------------------------ ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
#
Plant_Info$RecruitmentMode <- Plant_Info$ReproductiveMode#
Plant_Info[which(Plant_Info$ReproductiveMode=="WoodyTrunk"), ]$RecruitmentMode <- "Unknown"#
Plant_Info[which(is.na(Plant_Info$ReproductiveMode)), ]$RecruitmentMode <- "Unknown"#
#
# --------------- Demographic Plant Surveys --------------------------------- ##
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info)#
Plant_Surveys %<>% processPlantSurveysafterMergewPlantInfo %>%#
	filter(InDemographicStudy=="yes")#
Plant_Surveys_by_Plant <- Plant_Surveys %>% processSurveysMergedbyPlant#
# --------------------------------------------------------------------------- ##
# Moth Evidence - ANY evidence of moths, including moth presence or daa#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Plant %<>% mutate(#
	Moth_Evidence_t = max(#
		CA_t,#
		ME_t,#
		Old_Moth_Evidence_t,#
		Unknown_Moth_t,#
		na.rm=T#
	),#
	Insect_Evidence_t = max(#
		CA_t,#
		ME_t,#
		Old_Moth_Evidence_t,#
		Unknown_Moth_t,#
		Gerstaeckeria_t,#
		CH_t,#
		DA_t,#
		na.rm=T#
	)#
)#
# --------------------------------------------------------------------------- ##
# create Fecundity and RGR dataset - only measured size during the spring and summer#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year <- Plant_Surveys_by_Plant %>% #
	group_by(SamplingYear, PlantID) %>%#
	summarise(#
		Species = Species[1],#
		Network = Network[1],#
		Island = Island[1],#
		ReproductiveMode = ReproductiveMode[1],#
		Date = min(Date),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		Fruit_Flowers_t = max(Fruit_Flowers_t, na.rm=T),#
		FruitFlowerPres_t = max(FruitFlowerPres_t, na.rm=T),#
		Size_t = max(Size_t, na.rm=T),#
		Height_t = max(Height_t, na.rm=T),#
		Fruit_t = max(Fruit_t, na.rm=T),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		CA_t = max(CA_t, na.rm=T),#
		ME_t = max(ME_t, na.rm=T),#
		DA_t = max(DA_t, na.rm=T),#
		CH_t = max(CH_t, na.rm=T),#
		Gerstaeckeria_t = max(Gerstaeckeria_t, na.rm=T),#
		Unknown_Moth_t = max(Unknown_Moth_t, na.rm=T),#
		Old_Moth_Evidence_t = max(Old_Moth_Evidence_t, na.rm=T),#
		Moth_Evidence_t = max(Moth_Evidence_t, na.rm=T),#
		Insect_Evidence_t = max(Insect_Evidence_t, na.rm=T),#
		Dead = max(Dead, na.rm=T),#
		Missing = max(Missing, na.rm=T)#
	) %>% #
	mutate(PrevSamplingYear = SamplingYear - 1)#
# --------------------------------------------------------------------------- ##
# create PrevYear#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Year <- year(Plant_Surveys_by_Year$Date)#
Plant_Surveys_by_Year$PrevYear <- year(Plant_Surveys_by_Year$Date) - 1#
#
# --------------------------------------------------------------------------- ##
# Insect Presence During the Study - for Datasets for Life Table Response Experiments#
# --------------------------------------------------------------------------- ##
network_summary_time_t <- Plant_Surveys_by_Year %>%#
	group_by(Network, Year) %>%#
	summarise(#
		OldMothNetworkPres_t = max(Old_Moth_Evidence_t, na.rm=T),#
		#InsectNetworkPres = max(Insect_t, na.rm=T),#
		MENetworkPres_t = max(ME_t, na.rm=T),#
		CANetworkPres_t = max(CA_t, na.rm=T),#
		MothNetworkPres_t = max(Moth_Evidence_t, na.rm=T)#
	) %>%#
	calculateLagGroupedDF(#
		vars=c("OldMothNetworkPres_t", "MENetworkPres_t", "CANetworkPres_t", "MothNetworkPres_t"), #
		arrange.variable="Year", #
		grouping.variable=c("Network")#
	)#
network_summary <- Plant_Surveys_by_Year %>%#
	group_by(Network) %>%#
	summarise(#
		OldMothNetworkPres = max(Old_Moth_Evidence_t, na.rm=T),#
		#InsectNetworkPres = max(Insect_t, na.rm=T),#
		MENetworkPres = max(ME_t, na.rm=T),#
		CANetworkPres = max(CA_t, na.rm=T),#
		MothNetworkPres = max(Moth_Evidence_t, na.rm=T)#
	)#
Plant_summary <- Plant_Surveys_by_Year %>%#
	group_by(PlantID) %>%#
	summarise(#
		OldMothPlantPres = max(Old_Moth_Evidence_t, na.rm=T),#
		#InsectPlantPres = max(Insect_t, na.rm=T),#
		MEPlantPres = max(ME_t, na.rm=T),#
		CAPlantPres = max(CA_t, na.rm=T),#
		MothPlantPres = max(Moth_Evidence_t, na.rm=T)#
	)#
Plant_Surveys_by_Year %<>% #
	merge(network_summary, by="Network") %>% #
	merge(Plant_summary, by="PlantID") %>%#
	merge(network_summary_time_t, by=c("Year", "Network"))#
#
# --------------------------------------------------------------------------- ##
# ReproductiveMode Dummy Variables#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Clonal 		<- 0#
Plant_Surveys_by_Year$Woody 		<- 0#
Plant_Surveys_by_Year$Seedling 		<- 0#
Plant_Surveys_by_Year$UnknownRepro 	<- 0#
#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$ReproductiveMode=="Clonal"), ]$Clonal			<- 1#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$ReproductiveMode=="WoodyTrunk"), ]$Woody			<- 1#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$ReproductiveMode=="Seedling"), ]$Seedling		  <- 1#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$ReproductiveMode==""), ]$UnknownRepro	   <- 1#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$ReproductiveMode==""), ]$ReproductiveMode <- "Unknown"#
#
# --------------------------------------------------------------------------- ##
# RecruitmentMode#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$RecruitmentMode <- Plant_Surveys_by_Year$ReproductiveMode#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$ReproductiveMode=="WoodyTrunk"), ]$RecruitmentMode <- "Unknown"#
#
# --------------------------------------------------------------------------- ##
# Patch Names#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$IslandFullNames <- Plant_Surveys_by_Year$Island#
levels(Plant_Surveys_by_Year$IslandFullNames) <- c(#
	 "Island 1",#
	 "Island 2",#
	 "Island 3",#
	 "Island 4",#
	 "Island 5",#
	 "Coastal\nGrassland",#
	 "Beach\nDunes"#
)#
# --------------------------------------------------------------------------- ##
# Insect Presence/Absence#
# --------------------------------------------------------------------------- ##
#
Plant_Surveys_by_Year$MothOccupancy_t <- with(#
	Plant_Surveys_by_Year, #
	paste(CA_t, ME_t, Old_Moth_Evidence_t, Unknown_Moth_t, sep="")#
)#
#
# No insects#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="NANANANA"), ]$MothOccupancy_t <- "No Insects Observed"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="0000"), ]$MothOccupancy_t <- "No Insects Observed"#
#
# Insect damage only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="0010"), ]$MothOccupancy_t <- "Moth Damage Only,\nNo Insects Observed"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="NANA1NA"), ]$MothOccupancy_t <- "Moth Damage Only,\nNo Insects Observed"#
#
# Invasive Moth only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1NANANA"), ]$MothOccupancy_t <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1NA1NA"), ]$MothOccupancy_t <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1000"), ]$MothOccupancy_t <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1010"), ]$MothOccupancy_t <- "Invasive Moth"#
#
# Native Moth Only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="0110"), ]$MothOccupancy_t <- "Native Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="0100"), ]$MothOccupancy_t <- "Native Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="NA1NANA"), ]$MothOccupancy_t <- "Native Moth"#
#
# Native and Invasive Moths#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1100"), ]$MothOccupancy_t <- "Invasive and Native Moths"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1110"), ]$MothOccupancy_t <- "Invasive and Native Moths"#
#
Plant_Surveys_by_Year$MothOccupancy_t %<>% factor(levels=c(#
	"No Insects Observed",             #
	"Moth Damage Only,\nNo Insects Observed",#
	"Native Moth",                           #
	"Invasive Moth",                         #
	"Invasive and Native Moths"#
))#
# --------------------------------------------------------------------------- ##
# Insect Presence/Absence During Study#
# --------------------------------------------------------------------------- ##
#
Plant_Surveys_by_Year$MothOccupancy <- with(#
	Plant_Surveys_by_Year, #
	paste(CAPlantPres, MEPlantPres, OldMothPlantPres, sep="")#
)#
#
# No insects#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="NANANA"), ]$MothOccupancy <- "No Insects Observed"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="000"), ]$MothOccupancy <- "No Insects Observed"#
#
# Insect damage only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="001"), ]$MothOccupancy <- "Moth Damage Only,\nNo Insects Observed"#
#
# Invasive Moth only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="100"), ]$MothOccupancy <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="101"), ]$MothOccupancy <- "Invasive Moth"#
#
# Native Moth Only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="011"), ]$MothOccupancy <- "Native Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="010"), ]$MothOccupancy <- "Native Moth"#
#
# Native and Invasive Moths#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="110"), ]$MothOccupancy <- "Invasive and Native Moths"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="111"), ]$MothOccupancy <- "Invasive and Native Moths"#
#
Plant_Surveys_by_Year$MothOccupancy %<>% factor(levels=c(#
	"No Insects Observed",             #
	"Moth Damage Only,\nNo Insects Observed",#
	"Native Moth",                           #
	"Invasive Moth",                         #
	"Invasive and Native Moths"#
))#
# --------------------------------------------------------------------------- ##
# Second Plant ID#
# --------------------------------------------------------------------------- ##
#
Plant_Surveys_by_Year %<>% mutate(#
	PlantIDb = paste(#
		Island,#
		PlantID,#
		sep=", "#
	),#
	PlantIDc = paste(#
		Island,#
		PlantID,#
		sep="\n"#
	)#
)#
# --------------------------------------------------------------------------- ##
# Alive Variable#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Alive <- abs(Plant_Surveys_by_Year$Dead - 1)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# prep parent survey data#
# use this dataset to use parent size that is consistent for all offpsring#
A <- Plant_Surveys_by_Year %>% #
	#filter(Species=="Opuntia stricta") %>%#
	dplyr::select(PlantID, Date, Size_t) %>% #
	setnames("Date", "Parent.Obs.Date") %>%#
	setnames("Size_t", "Parent.Size_t")#
# prep offspring survey data#
# use this dataset to figure out first size of offspring#
B <- Plant_Surveys_by_Plant %>% #
	#filter(Species=="Opuntia stricta") %>%#
	dplyr::select(PlantID, Date, Size_t) %>% #
	setnames("Date", "Offspring.Obs.Date") %>%#
	setnames("Size_t", "Offspring.Size_t")#
# merge parent data with offspring info#
C <- Plant_Info_Analysis %>%#
	merge(#
		A, #
		by.x="Parent", #
		by.y="PlantID", #
		all=T#
	) %>%#
	# merge first offspring size#
	filter(!is.na(PlantID)) %>%#
	merge(#
		B,#
		by="PlantID", #
		all.x=T#
		) %>%#
		filter(!is.na(Parent))#
D <- C %>%#
	group_by(PlantID) %>%#
	# remove NAs#
	filter(!is.na(Parent.Size_t)) %>%#
	filter(!is.na(Offspring.Size_t)) %>%#
	filter(!is.na(Parent.Obs.Date)) %>%#
	# remove Parent survey dates that are after offspring was observed#
	filter(Parent.Obs.Date <= First.Survey.Date) %>%#
	# find Parent observation date (WITH a size obs) closest to (or equal to) date that the offspring was observed#
	filter(Parent.Obs.Date==max(Parent.Obs.Date)) %>%#
	# find Offspring observation date (WITH a size obs) closest to (or equal to) date it was first observed#
	filter(Offspring.Obs.Date==min(Offspring.Obs.Date)) %>%#
	setnames("First.Survey.Date", "Date")	#
D %<>% addSamplingYear#
# figure out parent size#
parent_size <- D %>% #
	group_by(Parent, SamplingYear, Parent.Size_t, Offspring.Size_t) %>%#
	# still need to count number of clones per size class#
	summarise(n.clones=length(unique(PlantID))) %>%#
	group_by(Parent, SamplingYear, Parent.Size_t, Offspring.Size_t) %>%#
	summarise(#
		n.clones = n.clones[1],#
		n.offspring.segments = Offspring.Size_t * n.clones#
		) %>%#
	as.data.frame %>% #
	group_by(Parent, SamplingYear) %>%#
	# calculate Parent size as observed parent size plus all offspring; this ensures that a parent cannot have size equal to or less than offspring#
	mutate(Parent_Size_t = Parent.Size_t[1] + sum(n.offspring.segments)) %>%#
	ungroup %>%#
	dplyr::select(Parent, SamplingYear, Parent_Size_t) %>%#
	unique#
# merge offspring info with parent size info#
D %<>% #
	as.data.frame %>%#
   	dplyr::select(Parent, SamplingYear, PlantID, Offspring.Size_t) %>%#
	merge(parent_size, by=c("Parent", "SamplingYear"))#
#
SizeClass <- c(0:5,10,140)#
Parent_Size_Class <- cut(D$Parent_Size_t, SizeClass, include.lowest=T, labels=FALSE)#
E <- cbind(D, Parent_Size_Class)#
Offspring_Size_Class <- cut(E$Offspring.Size_t, SizeClass, include.lowest=T, labels=FALSE)#
clone_production <- cbind(E, Offspring_Size_Class)#
# figure out percentage of segments PER STAGE that became clones#
# so number of clones doesn't matter?#
#
table(clone_production$Offspring_Size_Class, clone_production$Parent_Size_Class)#
#
# need to know number of segments produced per size class#
#
loss_to_clones <- clone_production %>% #
	group_by(Parent, SamplingYear) %>%#
	summarise(#
		Clones_t = length(unique(PlantID)),#
		Size_t_w_clone = paste(unique(Parent_Size_t), collapse=","),#
		Loss_to_Offspring = sum(Offspring.Size_t)#
	)#
#
Plant_Surveys_by_Yearw_clones <- merge(#
		Plant_Surveys_by_Year, #
		loss_to_clones, #
		by.x=c("PlantID", "SamplingYear"), #
		by.y=c("Parent", "SamplingYear"),#
		all=T#
	) %>% #
	as.data.frame#
# replace Clones_t = NA#
Plant_Surveys_by_Yearw_clones[which(is.na(Plant_Surveys_by_Yearw_clones$Clones_t)), ]$Clones_t <- 0#
# replace Size_t_w_clones = NA with recorded Size_t#
Plant_Surveys_by_Yearw_clones[which(is.na(Plant_Surveys_by_Yearw_clones$Size_t_w_clone)), ]$Size_t_w_clone <- Plant_Surveys_by_Yearw_clones[which(is.na(Plant_Surveys_by_Yearw_clones$Size_t_w_clone)), ]$Size_t#
Plant_Surveys_by_Yearw_clones$Size_t_w_clone %<>% as.numeric#
# replace loss to clones = NA with 0#
Plant_Surveys_by_Yearw_clones[which(is.na(Plant_Surveys_by_Yearw_clones$Loss_to_Offspring)), ]$Loss_to_Offspring <- 0#
#
# presence of clonal reproduction#
Plant_Surveys_by_Yearw_clones$ClonePres_t <- ifelse(#
	Plant_Surveys_by_Yearw_clones$Loss_to_Offspring >0,#
	1,#
	0#
)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys_by_Year <- Plant_Surveys_by_Yearw_clones %>%#
	dplyr::select(-Size_t) %>%#
	setnames("Size_t_w_clone", "Size_t") %>%#
	# lag variables#
	calculateSizeLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateDateLags %>%#
	createNewInsectVariables(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	 calculateInsectLags(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	 calculateInsectLags2(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	 calculateInsectLags3(#
	 	arrange.variable="Date", #
	 	grouping.variable="PlantID"#
	 ) %>%#
	as.data.frame %>%#
	calculateRGR ## this leads to a few values with PlantID = NA#
#
Plant_Surveys_by_Year %<>%#
	setnames("ME_t_1_1", "ME_t_2") %>%#
	setnames("CA_t_1_1", "CA_t_2") %>%#
	setnames("Old_Moth_Evidence_t_1_1", "Old_Moth_Evidence_t_2") %>%#
	setnames("Insect_t_1_1", "Insect_t_2") %>%#
	setnames("ME_t_1_1_1", "ME_t_3") %>%#
	setnames("CA_t_1_1_1", "CA_t_3") %>%#
	setnames("Old_Moth_Evidence_t_1_1_1", "Old_Moth_Evidence_t_3") %>%#
	setnames("Insect_t_1_1_1", "Insect_t_3")#
# --------------------------------------------------------------------------- ##
########################## ERROR MESSAGE#
	# check for PlantID = NA#
	dups <- Plant_Surveys_by_Year %>% #
		filter(is.na(PlantID))#
#
	if (dim(dups)[1] > 0) {#
			stop("NA values for PlantID.")#
	}#
# --------------------------------------------------------------------------- ##
# fix variable formats#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year[,c(#
	"Insect_Evidence_t",#
	"Moth_Evidence_t",#
	"Gerstaeckeria_t",#
	"Unknown_Moth_t",#
	"Old_Moth_Evidence_t",#
	"NatInsect_t",#
	"Insect_t",#
	"DA_t",#
	"CH_t",#
	"ME_t",#
	"CA_t",                #
	"Size_t",#
	"FruitPres_t",#
	"FruitFlowerPres_t",#
	"Fruit_t",#
	"Size_t_1",#
	"DaysSincePrevSurvey",#
	"DaysSinceStart",#
	"CA_t_1",#
	"ME_t_1",#
	"CH_t_1",#
	"DA_t_1",#
	"Insect_t_1",#
	"NatInsect_t_1",#
	"Old_Moth_Evidence_t_1",#
    "Unknown_Moth_t_1",#
	"Gerstaeckeria_t_1",#
	"Moth_Evidence_t_1",#
	"Insect_Evidence_t_1",#
	"Clones_t",#
	"Loss_to_Offspring",#
	"CA_t_2",#
	"ME_t_2",#
	"Old_Moth_Evidence_t_2",#
	"Insect_t_2",#
	"CA_t_3",#
	"ME_t_3",#
	"Old_Moth_Evidence_t_3",#
	"Insect_t_3"#
)] %<>% apply(., 2, as.integer)#
Plant_Surveys_by_Year[,c(#
	"Height_t",#
	"Height_t_1",#
 	"RGR_Height",#
 	"RGR_Height365",#
 	"RGR_Size",#
 	"RGR_Size365",#
	"DaysSinceStart"#
)] %<>% apply(., 2, as.numeric)#
Plant_Surveys_by_Year[,c(#
	"Size_t",#
	"CA_t",#
	"ME_t",#
	"Old_Moth_Evidence_t",#
	"Fruit_Flowers_t"#
)] %<>% apply(., 2, NA_Function)#
# --------------------------------------------------------------------------- ##
# Insect history#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %<>%#
rowwise() %>%#
mutate(#
	CAhistory = sum(CA_t, CA_t_1, CA_t_2, CA_t_3, na.rm=T),#
	MEhistory = sum(ME_t, ME_t_1, ME_t_2, ME_t_3, na.rm=T),#
	Insecthistory = sum(Insect_t, Insect_t_1, Insect_t_2, Insect_t_3, na.rm=T),#
	OldMothhistory = sum(#
		Old_Moth_Evidence_t, #
		Old_Moth_Evidence_t_1, #
		Old_Moth_Evidence_t_2, #
		Old_Moth_Evidence_t_3, #
		na.rm=T#
	)#
)#
# --------------------------------------------------------------------------- ##
# Classify plants by Stage#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Stage <- Plant_Surveys_by_Year$ReproductiveMode#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Stage!="Seedling"), ]$Stage <- "Adult"#
Plant_Surveys_by_Year[which(is.na(Plant_Surveys_by_Year$Stage)), ]$Stage <- "Adult"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Dead==1), ]$Stage <- "Dead"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Missing==1), ]$Stage <- "Dead"#
#
# fix Seedling category#
stages <- Plant_Surveys_by_Year$Stage#
temp <- split(Plant_Surveys_by_Year, stages)#
temp$Seedling %<>% #
	group_by(PlantID) %>%#
	mutate(FirstObs = min(Date)) %>%#
	as.data.frame %>%#
	mutate(#
		# individuals remain a seedling only for one year, then automatically transition to a "juvenile" stage#
		Stage = replace(#
			Stage,#
			which(Date > FirstObs),#
			"Juvenile"#
		),#
		# once the plant reaches two segments, it is no longer a juvenile#
		Stage = replace(#
			Stage,#
			which(Size_t > 1),#
			"Adult"#
		)#
	) %>%#
	group_by(PlantID) %>%#
	mutate(FirstAdult = min(Date[which(Size_t > 1)])) %>%#
	# once plants reach "Adult", they remain "Adult", even if they retrogress to one segment#
	mutate(#
		Stage = replace(#
			Stage,#
			which(Date > FirstAdult),#
			"Adult"#
		)#
	) %>%#
	dplyr::select(-c(FirstObs, FirstAdult)) %>%#
	as.data.frame#
Plant_Surveys_by_Year <- do.call(rbind.fill, temp)#
# --------------------------------------------------------------------------- ##
# process original plant data (before new PlantIDs were given) for occupancy surveys#
# --------------------------------------------------------------------------- ##
Original_Plant_Data %<>% processOriginalPlantData#
#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %>% write.csv("../data/Plant_Surveys_by_Year.csv")#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year %>% #
	filter(is.na(Size_t)) %>% #
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_SizeNAs.csv")#
#
Plant_Surveys_by_Year %>% #
	filter(is.na(CA_t)) %>%#
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_CANAs.csv")#
#
Plant_Surveys_by_Year %>%#
	filter(is.na(ME_t)) %>%#
	filter(Stage!="Dead") %>%#
	write.csv("../data/PlantSurveys_MENAs.csv")#
#
Plant_Surveys_by_Year %>% #
	filter(is.na(Old_Moth_Evidence_t)) %>% #
	filter(Stage!="Dead") %>% #
	write.csv("../data/PlantSurveys_OldMothNAs.csv")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------- DATA CHECKING#
# compare these numbers to the numbers after data is further processed#
#
# number of CACA observations#
length(Plot_Surveys[which(Plot_Surveys$CACA_on_Stricta=="Yes"), ]$CACA_on_Stricta)#
# number of MEPR observations#
length(Plot_Surveys[which(Plot_Surveys$MEPR_on_Stricta=="Yes"), ]$MEPR_on_Stricta)#
# don't exclude all plots for the demography study#
#
# --------------------------------------------------------------------------- ##
# --------------- Occupancy Plot Info --------------------------------------- ##
# --------------------------------------------------------------------------- ##
#
Plot_Info %<>% processOccupancyPlotInfo#
#
# check errors by keeping track of dataframe size#
Plot_Info_Size = as.data.frame(matrix(NA, 1, 1))#
Plot_Info_Size[, 1] = dim(Plot_Info)[1]#
#
Plot_Surveys %<>% processOccupancyPlotSurveys#
#
write.csv(Plot_Info, "../data/Plot_Info.csv")#
write.csv(Plot_Surveys, "../data/Plot_Surveys.csv")
head(Plant_Surveys_by_Year)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
Plant_Surveys_All <- Demographic.Plant.Surveys#
Plant_Info_All <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# those marked dead/missing, then not dead/missing#
# find a 10 in concatenated?#
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
if (dim(dups)[1] > 0) {stop("Duplicates observations for a PlantID, Date combination are present in the dataset.")}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% filter(is.na(PlantID))#
if (dim(dups)[1] > 0) {stop("NA values for PlantID.")}#
# --------------- Demographic Plot Surveys ---------------------------------- ##
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
# --------------- Demographic Plant Surveys --------------------------------- ##
Plant_Surveys %<>% processPlantSurveys#
# --------------- Demographic Plant Info ------------------------------------ ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
#
Plant_Info$RecruitmentMode <- Plant_Info$ReproductiveMode#
Plant_Info[which(Plant_Info$ReproductiveMode=="WoodyTrunk"), ]$RecruitmentMode <- "Unknown"#
Plant_Info[which(is.na(Plant_Info$ReproductiveMode)), ]$RecruitmentMode <- "Unknown"
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info)
str(Plant_Surveys)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
Plant_Surveys_All <- Demographic.Plant.Surveys#
Plant_Info_All <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# those marked dead/missing, then not dead/missing#
# find a 10 in concatenated?#
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
if (dim(dups)[1] > 0) {stop("Duplicates observations for a PlantID, Date combination are present in the dataset.")}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% filter(is.na(PlantID))#
if (dim(dups)[1] > 0) {stop("NA values for PlantID.")}#
# --------------- Demographic Plot Surveys ---------------------------------- ##
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
# --------------- Demographic Plant Surveys --------------------------------- ##
Plant_Surveys %<>% processPlantSurveys#
# --------------- Demographic Plant Info ------------------------------------ ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
#
Plant_Info$RecruitmentMode <- Plant_Info$ReproductiveMode#
Plant_Info[which(Plant_Info$ReproductiveMode=="WoodyTrunk"), ]$RecruitmentMode <- "Unknown"#
Plant_Info[which(is.na(Plant_Info$ReproductiveMode)), ]$RecruitmentMode <- "Unknown"#
#
# --------------- Demographic Plant Surveys --------------------------------- ##
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info)#
Plant_Surveys %<>% processPlantSurveysafterMergewPlantInfo %>%#
	filter(InDemographicStudy=="yes")#
Plant_Surveys_by_Plant <- Plant_Surveys %>% processSurveysMergedbyPlant#
# --------------------------------------------------------------------------- ##
# Moth Evidence - ANY evidence of moths, including moth presence or daa#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Plant %<>% mutate(#
	Moth_Evidence_t = max(#
		CA_t,#
		ME_t,#
		Old_Moth_Evidence_t,#
		Unknown_Moth_t,#
		na.rm=T#
	),#
	Insect_Evidence_t = max(#
		CA_t,#
		ME_t,#
		Old_Moth_Evidence_t,#
		Unknown_Moth_t,#
		Gerstaeckeria_t,#
		CH_t,#
		DA_t,#
		na.rm=T#
	)#
)#
# --------------------------------------------------------------------------- ##
# create Fecundity and RGR dataset - only measured size during the spring and summer#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year <- Plant_Surveys_by_Plant %>% #
	group_by(SamplingYear, PlantID) %>%#
	summarise(#
		Species = Species[1],#
		Network = Network[1],#
		Island = Island[1],#
		RecruitmentMode = RecruitmentMode[1],#
		Date = min(Date),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		Fruit_Flowers_t = max(Fruit_Flowers_t, na.rm=T),#
		FruitFlowerPres_t = max(FruitFlowerPres_t, na.rm=T),#
		Size_t = max(Size_t, na.rm=T),#
		Height_t = max(Height_t, na.rm=T),#
		Fruit_t = max(Fruit_t, na.rm=T),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		CA_t = max(CA_t, na.rm=T),#
		ME_t = max(ME_t, na.rm=T),#
		DA_t = max(DA_t, na.rm=T),#
		CH_t = max(CH_t, na.rm=T),#
		Gerstaeckeria_t = max(Gerstaeckeria_t, na.rm=T),#
		Unknown_Moth_t = max(Unknown_Moth_t, na.rm=T),#
		Old_Moth_Evidence_t = max(Old_Moth_Evidence_t, na.rm=T),#
		Moth_Evidence_t = max(Moth_Evidence_t, na.rm=T),#
		Insect_Evidence_t = max(Insect_Evidence_t, na.rm=T),#
		Dead = max(Dead, na.rm=T),#
		Missing = max(Missing, na.rm=T)#
	) %>% #
	mutate(PrevSamplingYear = SamplingYear - 1)#
# --------------------------------------------------------------------------- ##
# create PrevYear#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Year <- year(Plant_Surveys_by_Year$Date)#
Plant_Surveys_by_Year$PrevYear <- year(Plant_Surveys_by_Year$Date) - 1#
#
# --------------------------------------------------------------------------- ##
# Insect Presence During the Study - for Datasets for Life Table Response Experiments#
# --------------------------------------------------------------------------- ##
network_summary_time_t <- Plant_Surveys_by_Year %>%#
	group_by(Network, Year) %>%#
	summarise(#
		OldMothNetworkPres_t = max(Old_Moth_Evidence_t, na.rm=T),#
		#InsectNetworkPres = max(Insect_t, na.rm=T),#
		MENetworkPres_t = max(ME_t, na.rm=T),#
		CANetworkPres_t = max(CA_t, na.rm=T),#
		MothNetworkPres_t = max(Moth_Evidence_t, na.rm=T)#
	) %>%#
	calculateLagGroupedDF(#
		vars=c("OldMothNetworkPres_t", "MENetworkPres_t", "CANetworkPres_t", "MothNetworkPres_t"), #
		arrange.variable="Year", #
		grouping.variable=c("Network")#
	)#
network_summary <- Plant_Surveys_by_Year %>%#
	group_by(Network) %>%#
	summarise(#
		OldMothNetworkPres = max(Old_Moth_Evidence_t, na.rm=T),#
		#InsectNetworkPres = max(Insect_t, na.rm=T),#
		MENetworkPres = max(ME_t, na.rm=T),#
		CANetworkPres = max(CA_t, na.rm=T),#
		MothNetworkPres = max(Moth_Evidence_t, na.rm=T)#
	)#
Plant_summary <- Plant_Surveys_by_Year %>%#
	group_by(PlantID) %>%#
	summarise(#
		OldMothPlantPres = max(Old_Moth_Evidence_t, na.rm=T),#
		#InsectPlantPres = max(Insect_t, na.rm=T),#
		MEPlantPres = max(ME_t, na.rm=T),#
		CAPlantPres = max(CA_t, na.rm=T),#
		MothPlantPres = max(Moth_Evidence_t, na.rm=T)#
	)#
Plant_Surveys_by_Year %<>% #
	merge(network_summary, by="Network") %>% #
	merge(Plant_summary, by="PlantID") %>%#
	merge(network_summary_time_t, by=c("Year", "Network"))#
#
# --------------------------------------------------------------------------- ##
# Patch Names#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$IslandFullNames <- Plant_Surveys_by_Year$Island#
levels(Plant_Surveys_by_Year$IslandFullNames) <- c(#
	 "Island 1",#
	 "Island 2",#
	 "Island 3",#
	 "Island 4",#
	 "Island 5",#
	 "Coastal\nGrassland",#
	 "Beach\nDunes"#
)#
# --------------------------------------------------------------------------- ##
# Insect Presence/Absence#
# --------------------------------------------------------------------------- ##
#
Plant_Surveys_by_Year$MothOccupancy_t <- with(#
	Plant_Surveys_by_Year, #
	paste(CA_t, ME_t, Old_Moth_Evidence_t, Unknown_Moth_t, sep="")#
)#
#
# No insects#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="NANANANA"), ]$MothOccupancy_t <- "No Insects Observed"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="0000"), ]$MothOccupancy_t <- "No Insects Observed"#
#
# Insect damage only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="0010"), ]$MothOccupancy_t <- "Moth Damage Only,\nNo Insects Observed"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="NANA1NA"), ]$MothOccupancy_t <- "Moth Damage Only,\nNo Insects Observed"#
#
# Invasive Moth only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1NANANA"), ]$MothOccupancy_t <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1NA1NA"), ]$MothOccupancy_t <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1000"), ]$MothOccupancy_t <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1010"), ]$MothOccupancy_t <- "Invasive Moth"#
#
# Native Moth Only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="0110"), ]$MothOccupancy_t <- "Native Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="0100"), ]$MothOccupancy_t <- "Native Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="NA1NANA"), ]$MothOccupancy_t <- "Native Moth"#
#
# Native and Invasive Moths#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1100"), ]$MothOccupancy_t <- "Invasive and Native Moths"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy_t=="1110"), ]$MothOccupancy_t <- "Invasive and Native Moths"#
#
Plant_Surveys_by_Year$MothOccupancy_t %<>% factor(levels=c(#
	"No Insects Observed",             #
	"Moth Damage Only,\nNo Insects Observed",#
	"Native Moth",                           #
	"Invasive Moth",                         #
	"Invasive and Native Moths"#
))#
# --------------------------------------------------------------------------- ##
# Insect Presence/Absence During Study#
# --------------------------------------------------------------------------- ##
#
Plant_Surveys_by_Year$MothOccupancy <- with(#
	Plant_Surveys_by_Year, #
	paste(CAPlantPres, MEPlantPres, OldMothPlantPres, sep="")#
)#
#
# No insects#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="NANANA"), ]$MothOccupancy <- "No Insects Observed"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="000"), ]$MothOccupancy <- "No Insects Observed"#
#
# Insect damage only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="001"), ]$MothOccupancy <- "Moth Damage Only,\nNo Insects Observed"#
#
# Invasive Moth only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="100"), ]$MothOccupancy <- "Invasive Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="101"), ]$MothOccupancy <- "Invasive Moth"#
#
# Native Moth Only#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="011"), ]$MothOccupancy <- "Native Moth"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="010"), ]$MothOccupancy <- "Native Moth"#
#
# Native and Invasive Moths#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="110"), ]$MothOccupancy <- "Invasive and Native Moths"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$MothOccupancy=="111"), ]$MothOccupancy <- "Invasive and Native Moths"#
#
Plant_Surveys_by_Year$MothOccupancy %<>% factor(levels=c(#
	"No Insects Observed",             #
	"Moth Damage Only,\nNo Insects Observed",#
	"Native Moth",                           #
	"Invasive Moth",                         #
	"Invasive and Native Moths"#
))#
# --------------------------------------------------------------------------- ##
# Second Plant ID#
# --------------------------------------------------------------------------- ##
#
Plant_Surveys_by_Year %<>% mutate(#
	PlantIDb = paste(#
		Island,#
		PlantID,#
		sep=", "#
	),#
	PlantIDc = paste(#
		Island,#
		PlantID,#
		sep="\n"#
	)#
)#
# --------------------------------------------------------------------------- ##
# Alive Variable#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Alive <- abs(Plant_Surveys_by_Year$Dead - 1)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
Plant_Surveys_All <- Demographic.Plant.Surveys#
Plant_Info_All <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# those marked dead/missing, then not dead/missing#
# find a 10 in concatenated?#
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
if (dim(dups)[1] > 0) {stop("Duplicates observations for a PlantID, Date combination are present in the dataset.")}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% filter(is.na(PlantID))#
if (dim(dups)[1] > 0) {stop("NA values for PlantID.")}#
# --------------- Demographic Plot Surveys ---------------------------------- ##
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
# --------------- Demographic Plant Surveys --------------------------------- ##
Plant_Surveys %<>% processPlantSurveys#
# --------------- Demographic Plant Info ------------------------------------ ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
#
Plant_Info$RecruitmentMode <- Plant_Info$ReproductiveMode#
Plant_Info[which(Plant_Info$ReproductiveMode=="WoodyTrunk"), ]$RecruitmentMode <- "Unknown"#
Plant_Info[which(is.na(Plant_Info$ReproductiveMode)), ]$RecruitmentMode <- "Unknown"#
#
# --------------- Demographic Plant Surveys --------------------------------- ##
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info)#
Plant_Surveys %<>% processPlantSurveysafterMergewPlantInfo %>%#
	filter(InDemographicStudy=="yes")#
Plant_Surveys_by_Plant <- Plant_Surveys %>% processSurveysMergedbyPlant#
# --------------------------------------------------------------------------- ##
# Moth Evidence - ANY evidence of moths, including moth presence or daa#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Plant %<>% mutate(#
	Moth_Evidence_t = max(#
		CA_t,#
		ME_t,#
		Old_Moth_Evidence_t,#
		Unknown_Moth_t,#
		na.rm=T#
	),#
	Insect_Evidence_t = max(#
		CA_t,#
		ME_t,#
		Old_Moth_Evidence_t,#
		Unknown_Moth_t,#
		Gerstaeckeria_t,#
		CH_t,#
		DA_t,#
		na.rm=T#
	)#
)#
# --------------------------------------------------------------------------- ##
# create Fecundity and RGR dataset - only measured size during the spring and summer#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year <- Plant_Surveys_by_Plant %>% #
	group_by(SamplingYear, PlantID) %>%#
	summarise(#
		Species = Species[1],#
		Network = Network[1],#
		Island = Island[1],#
		RecruitmentMode = RecruitmentMode[1],#
		Date = min(Date),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		Fruit_Flowers_t = max(Fruit_Flowers_t, na.rm=T),#
		FruitFlowerPres_t = max(FruitFlowerPres_t, na.rm=T),#
		Size_t = max(Size_t, na.rm=T),#
		Height_t = max(Height_t, na.rm=T),#
		Fruit_t = max(Fruit_t, na.rm=T),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		CA_t = max(CA_t, na.rm=T),#
		ME_t = max(ME_t, na.rm=T),#
		DA_t = max(DA_t, na.rm=T),#
		CH_t = max(CH_t, na.rm=T),#
		Gerstaeckeria_t = max(Gerstaeckeria_t, na.rm=T),#
		Unknown_Moth_t = max(Unknown_Moth_t, na.rm=T),#
		Old_Moth_Evidence_t = max(Old_Moth_Evidence_t, na.rm=T),#
		Moth_Evidence_t = max(Moth_Evidence_t, na.rm=T),#
		Insect_Evidence_t = max(Insect_Evidence_t, na.rm=T),#
		Dead = max(Dead, na.rm=T),#
		Missing = max(Missing, na.rm=T)#
	) %>% #
	mutate(PrevSamplingYear = SamplingYear - 1)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
RecruitmentMode
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
#' Process Plant Survey Data#
#'#
#' @description Steps:#
#' \itemize{#
#'  \item Fix column names#
#'  \item format dates#
#'  \item format PlantIDs#
#'  \item format convert "999" values to NA#
#'  \item format change "yes"/"no" values of the insect survey, missing, and dead columns to 0/1#
#'  \item format numeric columns#
#'  \item add total segment column#
#'  \item add fruit count column#
#'  \item add fruit/flower count column#
#'  \item check for observations of 0 pads, 0 height, or 0 width; if there are observations, stop#
#' 	}#
#' Column Names:#
#' \itemize{#
#'  \item PlantMeasureID Record number if Microsoft Access database#
#'  \item First_Observer_Initials Initials of primary observer (should always be KS, for Kristen Sauby)#
#'  \item Second_Observer_Initials Initials of secondary observer; CJP - Cory Penca; YP - Yani Paulay; KS - Kristen Sauby; JW: Juliana Welch; CW: Cedric Worman; AP: Adam Payton#
#'  \item Date Date#
#'  \item PlantID Unique number for the individual plant#
#'  \item Plant_collected Were plant samples collected?#
#'  \item Time#
#'  \item PlantPictures identifying numbers of photos taken#
#'  \item PlantPictures_Direction direction that the photo(s) was(were) taken#
#
#'  \item CA_t Presence/absence (1/0) of Cactoblastis cactorum#
#'  \item CACA_collected Were samples of Cactoblastis cactorum collected?#
#'  \item CACA_quantity Number of Cactoblastis cactorum samples collected#
#
#'  \item ME_t Presence/absence (1/0) of Melitara prodenialis#
#'  \item MEPR_collected Were samples of Melitara prodenialis collected?#
#'  \item MEPR_quantity Number of Melitara prodenialis samples collected#
#
#'  \item CH_t Presence/absence (1/0) of Chelinidea vittiger#
#'  \item CHVI_collected Were samples of Chelinidea vittiger collected?#
#'  \item CHVI_quantity Number of Chelinidea vittiger samples collected#
#
#'  \item DA_t Presence/absence (1/0) of Dactylopius species#
#'  \item DACT_collected Were samples of Dactylopius species collected?#
#'  \item DACT_quantity Number of Dactylopius species samples collected#
#
#'  \item Unknown_Moth_t Presence/absence (1/0) of unknown moth#
#'  \item UnknownMoth_collected Were samples of unknown moth collected?#
#'  \item UnknownMoth_quantity Number of unknown moth samples collected#
#
#'  \item Old_Moth_Evidence_t Evidence of past moth infestation#
#'  \item Old_Moth_Evidence_recent Whether evidence of past moth infestation appears recent or old#
#
#'  \item Fungus Presence/absence (1/0) of plant fungal infection#
#'  \item Gerstaeckeria Presence/absence (1/0) of Gerstaeckeria#
#'  \item Plant_Segments_total Number of segments#
#'  \item Plant_Segments_w_leaves New, green segments with leaves#
#'  \item Plant_Segments_wo_leaves Green segments without leaves#
#'  \item Plant_Segments_woody number of woody segments/trunks; these segments are entirely brown on the outside      #
#'  \item Height_t maximum height in cm#
#'  \item Width_t maximum width in cm#
#'  \item Perpen_Width width, perpendicular to max width, in cm#
#'  \item Num_FlowerBuds Number of flower buds#
#'  \item Num_Fruit_red Number of red fruit#
#'  \item Num_Fruit_green Number of green fruit#
#'  \item Num_Flowers Number of flowers#
#'  \item Num_Fruit use this when number is recorded but distinction by color is not made#
#'  \item Pollinators#
#'  \item Spiders#
#'  \item Ants#
#'  \item Other_collected_quantity#
#'  \item Plant_Notes#
#'  \item Insect_Notes        #
#'  \item Other_Notes#
#'  \item Dead Whether the plant is observed to be dead; 0 or 1#
#'  \item Missing#
#'  \item OutsideOfPlot "Yes" if plant is no longer in plot#
#'  \item PlotPlantID Unique number for the individual plant; if a plant is counted in multiple plots, a letter is appended to the plant ID here (e.g., 9606a) and then removed for analysis#
#'  \item Size_t The sum of Plant_Segments_total, Plant_Segments_w_leaves, Plant_Segments_wo_leaves, and Plant_Segments_woody#
#
#'  \item Fruit_t The sum of Num_Fruit_red, Num_Fruit_green, and Num_Fruit#
#'  \item Fruit_Flowers_t The sum of Num_FlowerBuds, Num_Flowers, Num_Fruit_red, Num_Fruit_green, and Num_Fruit#
#' 	}#
#'#
#' @export#
#
processPlantSurveys <- function(Plant_Surveys) {#
	# ------------------------------------------------------------- CHANGE NAMES#
	# remame size and height#
	Plant_Surveys %<>%	as.data.table %>%#
		setnames("Max_Height", 				"Height_t") %>%#
		setnames("Max_Width", 				"Width_t") %>%#
		setnames("CACA_Larvae", 			"CA_t") %>%#
		setnames("MEPR_Larvae", 			"ME_t") %>%#
		setnames("CHVI_Evidence", 			"CH_t") %>%#
		setnames("DACT_Evidence", 			"DA_t") %>%#
		setnames("UnknownMoth_Evidence", 	"Unknown_Moth_t") %>%#
		setnames("Old_Moth_Evidence", 		"Old_Moth_Evidence_t") %>%#
		setnames("DateSurveyed", 			"Date") %>%#
		setnames("Gerstaeckeria", 			"Gerstaeckeria_t") %>%#
		as.data.frame#
	# formatting/preparation necessary for prepping Demographic Plant Info#
	Plant_Surveys$Date %<>% Format_Date_Function#
	Plant_Surveys %<>% arrange(Date)#
	Plant_Surveys %<>% Format_PlantIDs_Function#
	# ------------------------------------------------ CONVERT ALL "999s" to NAs#
	Plant_Surveys[,c(#
		"Plant_Segments_total", #
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		"Perpen_Width",#
		"Width_t",#
		"Height_t",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------- INSECT SURVEYS, MISSING, DEAD - CHANGE YES, NO to 0, 1#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Gerstaeckeria_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, Yes_Function#
	)#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Gerstaeckeria_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>%#
		apply(2, No_Function#
	)#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Gerstaeckeria_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------------------------------------------------- MAKE NUMERIC#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Gerstaeckeria_t",#
		"Old_Moth_Evidence_t",#
		"Plant_Segments_total",#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		"Height_t",#
		"Width_t",#
		"Perpen_Width",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, as.numeric#
	)#
	# ------------------------------------------------- ADD TOTAL SEGMENT COLUMN#
	# do this so that plants that have no segments recorded (all NAs) have a total segment count = NA#
	# for those plants that have fewer than four NAs (at least one segment column has a number), sum the segments#
	Plant_Surveys$Size_t <- Plant_Surveys %>%#
							dplyr::select(#
								Plant_Segments_total,#
								Plant_Segments_w_leaves,#
								Plant_Segments_wo_leaves,#
								Plant_Segments_woody#
							) %>%#
							apply(1, mysum)#
	Plant_Surveys$Size_t %<>% Zero_is_NA_Function#
	# --------------------------------------------------------- ADD FRUIT COLUMN#
	Plant_Surveys$Fruit_t <- Plant_Surveys %>%#
							dplyr::select(#
								Num_Fruit_red,#
								Num_Fruit_green,#
								Num_Fruit#
							) %>%#
							apply(1, mysum)#
	Plant_Surveys$Fruit_Flowers_t <- Plant_Surveys %>%#
							dplyr::select(#
								Num_FlowerBuds,#
								Num_Flowers,#
								Num_Fruit_red,#
								Num_Fruit_green,#
								Num_Fruit#
							) %>%#
							apply(1, mysum)#
	# ----------------------------------------------------------- ERROR MESSAGES#
	# There should never be observations of 0 pads, 0 height, or 0 width#
	# replace 0 with NA#
	dups <- Plant_Surveys %>% filter(Size_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Size_t equal 0.")}#
#
	dups <- Plant_Surveys %>% filter(Height_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Height_t equal 0.")}#
#
	dups <- Plant_Surveys %>% filter(Width_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Width_t equal 0.")}#
#
	dups <- Plant_Surveys %>% filter(Perpen_Width==0)#
	if (dim(dups)[1] > 0) {stop("Values for Perpen_Width equal 0.")}#
	return(Plant_Surveys)#
}#
#
#' Process Original Plant Survey Data#
#'#
#' @description I collected this data in December 2012, then gave the plants new Plant IDs. This data cannot be used for the demography study but can be used to determine plot occupancy.#
#' Steps:#
#' \itemize{#
#'  \item Fix column names#
#'  \item format dates#
#'  \item format PlantIDs#
#'  \item format convert "999" values to NA#
#'  \item format change "yes"/"no" values of the insect survey, missing, and dead columns to 0/1#
#'  \item format numeric columns#
#'  \item check for observations of 0 pads, 0 height, or 0 width; if there are observations, stop#
#' 	}#
#
#' 	}#
#'#
#' @export#
#
processOriginalPlantData <- function(Original_Plant_Data) {#
	# ------------------------------------------------------------- CHANGE NAMES#
	# remame size and height#
	Original_Plant_Data %<>% as.data.table %>%#
		setnames("Max_Height", 				"Height_t") %>%#
		setnames("Max_Width", 				"Width_t") %>%#
		setnames("CACA_Larvae", 			"CA_t") %>%#
		setnames("MEPR_Larvae", 			"ME_t") %>%#
		setnames("CHVI_Evidence", 			"CH_t") %>%#
		setnames("DACT_Evidence", 			"DA_t") %>%#
		setnames("UnknownMoth_Evidence", 	"Unknown_Moth_t") %>%#
		setnames("Old_Moth_Evidence", 		"Old_Moth_Evidence_t") %>%#
		as.data.frame#
	# formatting/preparation necessary for prepping Demographic Plant Info#
	Original_Plant_Data$Date %<>% Format_Date_Function#
	Original_Plant_Data %<>% arrange(Date)#
	# ------------------------------------------------ CONVERT ALL "999s" to NAs#
	Original_Plant_Data[,c(#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_Leaves",#
		"Perpen_Width",#
		"Width_t",#
		"Height_t",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------- INSECT SURVEYS, MISSING, DEAD - CHANGE YES, NO to 0, 1#
	Original_Plant_Data[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t")] %<>% #
		apply(2, Yes_Function#
	)#
	Original_Plant_Data[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t")] %<>%#
		apply(2, No_Function#
	)#
	Original_Plant_Data[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------------------------------------------------- MAKE NUMERIC#
	Original_Plant_Data[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_Leaves",#
		"Height_t",#
		"Width_t",#
		"Perpen_Width",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit")] %<>% #
		apply(2, as.numeric#
	)#
	# ----------------------------------------------------------- ERROR MESSAGES#
	# There should never be observations of 0 pads, 0 height, or 0 width#
	# replace 0 with NA#
	dups <- Original_Plant_Data %>% filter(Height_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Height_t equal 0.")}#
#
	dups <- Original_Plant_Data %>% filter(Width_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Width_t equal 0.")}#
#
	dups <- Original_Plant_Data %>% filter(Perpen_Width==0)#
	if (dim(dups)[1] > 0) {stop("Values for Perpen_Width equal 0.")}#
	return(Original_Plant_Data)#
}#
#' Merge Plant Info and Plant Surveys data files#
#'#
#' @description Add Island, Cluster, and Host Species information to the Plant_Surveys dataset.#
#' @param Plant_Surveys Plant Survey Dataset#
#' @param Plant_Info  Plant Information Dataset#
#'#
#' @export#
#
mergePlantSurveysPlantInfo <- function(Plant_Surveys, Plant_Info) {#
	Plant_Surveys <- Plant_Info %>%#
		dplyr::select(#
			ClusterID, #
			InDemographicStudy, #
			PlotPlantID, #
			Tag_Number, #
			Island, #
			Cluster2, #
			Network, #
			Species, #
			InBigPlantStudy, #
			N.PlotPlantIDs, #
			Easting, #
			Northing,#
			RecruitmentMode#
		) %>%#
		merge(Plant_Surveys, by = "PlotPlantID")#
	return(Plant_Surveys)#
}#
#
#' Add Sampling Period Variable#
#'#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
addSamplingPeriods <- function(Plant_Surveys) {#
	Plant_Surveys$DemographicSurvey <- "NA"#
	Plant_Surveys %<>% #
		group_by(Date) %>% #
		mutate(#
			# SURVEY 0#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date < "2013-05-14"), "0"),#
			# SURVEY 1 - SPRING/SUMMER 2013#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2013-05-14" & Date <= "2013-08-06"), "1"),#
			# SURVEY 2 - FALL/WINTER 2013/2014#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2013-12-13" & Date <= "2014-01-28"), "2"),#
			# SURVEY 3 - SPRING/SUMMER 2014#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2014-05-06" & Date <= "2014-09-24"), "3"),#
			# SURVEY 4 - WINTER 2015#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2015-01-08" & Date <= "2015-02-21"), "4"),#
			# SURVEY 5 - SPRING/SUMMER 2015#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2015-05-01"), "5"))#
	return(Plant_Surveys)#
}#
#
#' Add Sampling Year Variable#
#'#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
addSamplingYear <- function(Plant_Surveys) {#
	Plant_Surveys$SamplingYear <- NA#
	Plant_Surveys %<>% #
		group_by(Date) %>% #
		mutate(#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2012-12-02" & Date < "2013-05-01"), #
				2012#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2013-05-01" & Date < "2014-05-01"), #
				2013#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2014-05-01" & Date < "2015-05-01"), #
				2014#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2015-05-01"), #
				2015#
			)#
		)#
	return(Plant_Surveys)#
}#
#
#' Determine Fruit and Flower Presence#
#'#
#' @description Create separate variables indicating whether fruit and fruit and flowers were present.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
calculateFruitPresence <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		mutate(#
			FruitPres_t 		= ifelse(Fruit_t > 0, 1, 0),#
			FruitFlowerPres_t 	= ifelse(Fruit_Flowers_t > 0, 1, 0)#
		) %>%#
		as.data.table %>%#
		# add NAs#
		.[is.na(Fruit_t), FruitPres_t := NA] %>%#
		.[is.na(Fruit_Flowers_t), FruitPres_t := NA] %>%#
		as.data.frame#
}#
#
#' Calculate Plant Volume#
#'#
#' @description Calculate plant volume as a cone, cylinder, and elliptic cylinder.#
#' @param Plant_Surveys Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
calculatePlantVolume <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		mutate(#
			Cone_t 				= pi * (((Width_t + Perpen_Width)/4)^2) * #
									Height_t / 3,#
			Cylinder_t 			= pi * ((Perpen_Width/2)^2) * Width_t,#
			Elliptic_Cylinder_t = pi * Height_t/2 * Perpen_Width/2 * Width_t#
		)#
}#
#
#' Determine if a survey was complete#
#'#
#' @param x Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
Complete_Surveys_function <- function(x){#
	ifelse(rowSums(is.na(x))==0, 1, 0)#
	return(x)#
}#
#
#' Determine whether a survey was complete#
#'#
#' @description Determine whether all data was collected during a survey.#
#' Determine complete surveys for:#
#' \itemize{#
#'  \item insect surveys#
#'  \item plant size#
#'  \item size measurements (cm)#
#'  \item fruit, flowers, and flower buds#
#'  \item all data#
#' 	}#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
determineCompleteSurveys <- function(Plant_Surveys) {#
	Plant_Surveys$complete_insect_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"CA_t",#
			"ME_t",#
			"Unknown_Moth_t",#
			"Old_Moth_Evidence_t"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_segments_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Plant_Segments_w_leaves",#
			"Plant_Segments_wo_leaves",#
			"Plant_Segments_woody"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_size_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Height_t",#
			"Width_t",#
			"Perpen_Width"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_fruit_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Num_FlowerBuds",#
			"Num_Fruit_red",#
			"Num_Fruit_green",#
			"Num_Flowers"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
		# insects#
		"CA_t",#
		"ME_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		# number of segments#
		"Size_t",#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		# size in cm#
		"Height_t",#
		"Width_t",#
		"Perpen_Width",#
		# flowers and fruit#
		"Fruit_t" #
		)]))==0, 1, 0#
	)#
	return(Plant_Surveys)#
}#
#
#' Determine if an insect species was ever detected during the study period#
#'#
#' @description Determine if an insect species was ever detected during the study period.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
determineInsectPresenceDuringStudy <- function(Plant_Surveys) {#
	Plant_Surveys.present <- Plant_Surveys %>%#
		group_by(PlantID) %>%#
		summarise(#
			CAPresent = ifelse(sum(CA_t, na.rm=T) > 0, 1, 0),#
			MEPresent = ifelse(sum(ME_t, na.rm=T) > 0, 1, 0)#
			) %>%#
		as.data.frame()#
	Plant_Surveys %>% merge(Plant_Surveys.present, by="PlantID")#
}#
#
#' Rename Species levels#
#'#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
renameSpecies <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		as.data.table %>%#
		.[Species == "pusilla", Species := "Opuntia pusilla"] %>%#
		.[Species == "stricta", Species := "Opuntia stricta"] %>%#
		as.data.frame#
}#
#
#' Rename Convert 1/0 to Yes/No#
#'#
#' @param x Vector of 0/1 data#
#'#
#' @export#
#
Yes_No_from_1_0_Function <- function(x){#
	x[x > 0] <- "Yes"#
	x[x == 0] <- "No"#
	return(x)#
}#
#
#' Make Insect Factor Variables#
#'#
#' @description Make new insect variables with "yes"/"no" values instead of 0/1.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
createInsectFactorVariables <- function(Plant_Surveys) {#
	Plant_Surveys$C_cactorum 	<- Plant_Surveys$CA_t#
	Plant_Surveys$M_prodenialis <- Plant_Surveys$ME_t#
	Plant_Surveys[,c(#
		"C_cactorum",#
		"M_prodenialis")] %<>%#
		apply(., 2, Yes_No_from_1_0_Function) %>%#
		apply(., 2, as.factor#
	)#
	return(Plant_Surveys)#
}#
#
#' Format as Factors#
#'#
#' @description Format variables as factors.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
formatasFactors <- function(x) {#
	factors <- c("ClusterID", "Network", "Island", "Species", #
		"DemographicSurvey", "Year", "Season", "C_cactorum", #
		"M_prodenialis")#
	for (i in 1:length(factors)) {#
		if (factors[i] %in% names(x)) {#
			x[, factors[i]] %<>% as.factor#
		}#
	}#
	return(x)#
}#
#
#' Process Plant Survey Data#
#'#
#' @description Steps:#
#' \itemize{#
#'  \item add column, "DemographicSurvey"#
#'	\itemize{#
#'		\item survey 1 - spring/summer 2013#
#'		\item survey 2 - fall/winter 2013/2014#
#'		\item survey 3 - spring/summer 2014#
#'		\item survey 4 - winter 2015#
#'		\item survey 5 - spring/summer 2015#
#'	}#
#'  \item addSamplingYear#
#'	\itemize{#
#'		\item 2012 - Date >= "2012-12-02" & Date < "2013-05-01"#
#'		\item 2013 - Date >= "2013-05-01" & Date < "2014-05-01"#
#'		\item 2014 - Date >= "2014-05-01" & Date < "2015-05-01"#
#'		\item 2015 - Date >= "2015-05-01"#
#'	}#
#' }#
#'#
#' @export#
#
processPlantSurveysafterMergewPlantInfo <- function(Plant_Surveys) {#
	Plant_Surveys %>%#
		filter(InBigPlantStudy!="yes" & InBigPlantStudy!="Yes") %>%#
		addSamplingPeriods %>%#
		addSamplingYear %>%#
		as.data.frame#
}#
#' Process Plant Survey Data, per plant#
#'#
#' @description Steps:#
#' \itemize{#
#'  	\item merge records for the same plant from multiple plots; the data to be merged must have been collected on the same day.#
#'  	\item Create separate variables indicating whether fruit and fruit and flowers were present#
#'  	\item Calculate plant volume as a cone, cylinder, and elliptic cylinder#
#'  	\item Determine if an insect species was ever detected during the study period#
#'  	\item Rename species levels ("Opuntia stricta" instead of "stricta" and "Opuntia pusilla" instead of "pusilla")#
#' 	 	\item Make new insect variables with "yes"/"no" values instead of 0/1, named "C_cactorum" and "M_prodenialis"#
#'  	\item format the variables "ClusterID", "Network", "Island", "Species", "DemographicSurvey", "SamplingYear", "Year", "Season", "C_cactorum", "M_prodenialis" as factors#
#' 	}#
#'#
#' @export#
processSurveysMergedbyPlant <- function(Plant_Surveys) {#
	Plant_Surveys %>%#
		mergePlantRecordsfromMultiplePlots %>%#
		calculateFruitPresence %>%#
		calculatePlantVolume %>%#
		determineInsectPresenceDuringStudy %>%#
		renameSpecies %>%#
		createInsectFactorVariables %>%#
		formatasFactors#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
Plant_Surveys_All <- Demographic.Plant.Surveys#
Plant_Info_All <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# those marked dead/missing, then not dead/missing#
# find a 10 in concatenated?#
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
if (dim(dups)[1] > 0) {stop("Duplicates observations for a PlantID, Date combination are present in the dataset.")}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% filter(is.na(PlantID))#
if (dim(dups)[1] > 0) {stop("NA values for PlantID.")}#
# --------------- Demographic Plot Surveys ---------------------------------- ##
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
# --------------- Demographic Plant Surveys --------------------------------- ##
Plant_Surveys %<>% processPlantSurveys#
# --------------- Demographic Plant Info ------------------------------------ ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
#
Plant_Info$RecruitmentMode <- Plant_Info$ReproductiveMode#
Plant_Info[which(Plant_Info$ReproductiveMode=="WoodyTrunk"), ]$RecruitmentMode <- "Unknown"#
Plant_Info[which(is.na(Plant_Info$ReproductiveMode)), ]$RecruitmentMode <- "Unknown"#
#
# --------------- Demographic Plant Surveys --------------------------------- ##
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info)#
Plant_Surveys %<>% processPlantSurveysafterMergewPlantInfo %>%#
	filter(InDemographicStudy=="yes")#
Plant_Surveys_by_Plant <- Plant_Surveys %>% processSurveysMergedbyPlant#
# --------------------------------------------------------------------------- ##
# Moth Evidence - ANY evidence of moths, including moth presence or daa#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Plant %<>% mutate(#
	Moth_Evidence_t = max(#
		CA_t,#
		ME_t,#
		Old_Moth_Evidence_t,#
		Unknown_Moth_t,#
		na.rm=T#
	),#
	Insect_Evidence_t = max(#
		CA_t,#
		ME_t,#
		Old_Moth_Evidence_t,#
		Unknown_Moth_t,#
		Gerstaeckeria_t,#
		CH_t,#
		DA_t,#
		na.rm=T#
	)#
)#
# --------------------------------------------------------------------------- ##
# create Fecundity and RGR dataset - only measured size during the spring and summer#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year <- Plant_Surveys_by_Plant %>% #
	group_by(SamplingYear, PlantID) %>%#
	summarise(#
		Species = Species[1],#
		Network = Network[1],#
		Island = Island[1],#
		RecruitmentMode = RecruitmentMode[1],#
		Date = min(Date),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		Fruit_Flowers_t = max(Fruit_Flowers_t, na.rm=T),#
		FruitFlowerPres_t = max(FruitFlowerPres_t, na.rm=T),#
		Size_t = max(Size_t, na.rm=T),#
		Height_t = max(Height_t, na.rm=T),#
		Fruit_t = max(Fruit_t, na.rm=T),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		CA_t = max(CA_t, na.rm=T),#
		ME_t = max(ME_t, na.rm=T),#
		DA_t = max(DA_t, na.rm=T),#
		CH_t = max(CH_t, na.rm=T),#
		Gerstaeckeria_t = max(Gerstaeckeria_t, na.rm=T),#
		Unknown_Moth_t = max(Unknown_Moth_t, na.rm=T),#
		Old_Moth_Evidence_t = max(Old_Moth_Evidence_t, na.rm=T),#
		Moth_Evidence_t = max(Moth_Evidence_t, na.rm=T),#
		Insect_Evidence_t = max(Insect_Evidence_t, na.rm=T),#
		Dead = max(Dead, na.rm=T),#
		Missing = max(Missing, na.rm=T)#
	) %>% #
	mutate(PrevSamplingYear = SamplingYear - 1)
setwd('/Users/KSauby/Documents/Projects')
setwd("./dataproc")#
#setwd("./modresproc")#
#devtools::test()#
devtools::document()#
devtools::install()
