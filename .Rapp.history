install.packages("sp")
install.packages("gdistance")
install.packages("chron")
install.packages("unmarked")
install.packages("lme4")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")#
require(rgeos)
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
library(rgdal)
install.packages("http://cran.r-project.org/src/contrib/rgdal_0.9-1.tar.gz", repos = NULL, type="source", configure.args = "--with-gdal-config=/Library/Frameworks/GDAL.framework/Versions/1.10/unix/bin/gdal-config --with-proj-include=/Library/Frameworks/PROJ.framework/unix/include --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib")
18/1.618
189+114
library(lubridate)
library(magrittr)
seasons <- data.frame(#
	   SE = as.POSIXct(c("2009-3-20", "2010-3-20", "2011-3-20", "2012-3-20", #
            "2013-3-20", "2014-3-20"), format="%Y-%m-%d"),#
	   SS = as.POSIXct(c("2009-6-21", "2010-6-21", "2011-6-21", "2012-6-20",#
            "2013-6-20", "2014-6-20"), format="%Y-%m-%d"),#
	   FE = as.POSIXct(c("2009-9-22", "2010-9-23", "2011-9-23", "2012-9-22",#
            "2013-9-22", "2014-9-22"), format="%Y-%m-%d"),#
	   WS = as.POSIXct(c("2009-12-21", "2010-12-21", "2011-12-22", "2012-12-21", #
            "2013-12-21", "2014-12-21"), format="%Y-%m-%d")#
    )#
#
    assignSeason <- function(dat, SeasonStarts=seasons) {#
	    dat %<>% mutate(#
		    Season = lapply(Date,#
				function(x) {#
					findInterval(#
						x, #
						SeasonStarts[which(year(x)==year(SeasonStarts$WS)), ]#
					)#
				}#
			) %>% unlist	#
		)#
	    dat[which(dat$Season==0 | dat$Season==4), ]$Season 	<- "Winter"#
	    dat[which(dat$Season==1), ]$Season 					<- "Spring"#
	    dat[which(dat$Season==2), ]$Season 					<- "Summer"#
	    dat[which(dat$Season==3), ]$Season 					<- "Fall"#
	    return(dat)#
    }
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(dplyr)
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(devtoolks)
library(devtools)
?install_github
devtools::install_github("ksauby/ACSampling", auth_token="2ab30a602e52fae481f4249cc25e892c0a9ccfc7", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install_github("ksauby/ACSampling", auth_token="2794c3f10db92f525181a0b1f6c19064fe3a2ef3", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
library(devtools)
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
install.packages("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
??limit
37-13
24/37
37-13
26/37
25/37
23/37
29/37
30/37
22/37
30/37
29/37
28/37
27/37
35/37
30/37
29/37
26/37
26/37 - .6757
28/37
30/37
29/37
37-12
25/37
219*.8
219*.8 - 17
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling')
library(ProjectTemplate)#
#
# when working on a Windows computer#
# setwd("C:/Users/KSauby/Dropbox/gradschool/Research/Projects/sampling")#
#
# load project#
load.project()
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys#
#
# --------------------------------------------------------------------------- ##
# --------------------------------------------------------------------------- ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info) %>%#
	processPlantSurveysafterMergewPlantInfo#
#
# create Fecundity and RGR dataset - only measured size during the spring and summer#
Plant_Surveys_by_Year <- Plant_Surveys %>% #
	group_by(SamplingYear, PlantID) %>%#
	summarise(#
		Species = Species[1],#
		Network = Network[1],#
		Island = Island[1],#
		ReproductiveMode = ReproductiveMode[1],#
		Date = min(Date),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		FruitFlowerPres_t = max(FruitFlowerPres_t, na.rm=T),#
		Size_t = max(Size_t, na.rm=T),#
		Height_t = max(Height_t, na.rm=T),#
		Fruit_t = max(Fruit_t, na.rm=T),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		CA_t = max(CA_t, na.rm=T),#
		ME_t = max(ME_t, na.rm=T),#
		DA_t = max(DA_t, na.rm=T),#
		CH_t = max(CH_t, na.rm=T),#
		Old_Moth_Evidence_t = max(Old_Moth_Evidence_t, na.rm=T)#
	) %>% #
	mutate(PrevSamplingYear = SamplingYear - 1) %>%#
	# lag variables#
	calculateSizeLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateDateLags %>%#
	createNewInsectVariables(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateInsectLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	as.data.frame %>%#
	calculateRGR ## this leads to a few values with PlantID = NA#
# --------------------------------------------------------------------------- ##
########################## ERROR MESSAGE#
	# check for PlantID = NA#
	dups <- Plant_Surveys_by_Year %>% #
		filter(is.na(PlantID))#
#
	if (dim(dups)[1] > 0) {#
			stop("NA values for PlantID.")#
	}#
	# should not be any non-NA values for RGR for SamplingYear 2012#
	dups <- Plant_Surveys_by_Year %>% #
		filter(SamplingYear==2012) %>%#
		filter(!is.na(RGR_Height))#
#
	if (dim(dups)[1] > 0) {#
			stop("Non-NA values for RGR for first Sampling Year.")#
	}#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Size_t_1 %<>% as.numeric#
Plant_Surveys_by_Year[,c(#
	"Old_Moth_Evidence_t",#
	"NatInsect_t",#
	"Insect_t",#
	"DA_t",#
	"CH_t",#
	"ME_t",#
	"CA_t",                #
	"Size_t",#
	"FruitPres_t",#
	"FruitFlowerPres_t",#
	"Fruit_t",#
	"Size_t_1",#
	"DaysSincePrevSurvey",#
	"DaysSinceStart",#
	"CA_t_1",#
	"ME_t_1",#
	"CH_t_1",#
	"DA_t_1",#
	"Insect_t_1",#
	"NatInsect_t_1",#
	"Old_Moth_Evidence_t_1"#
)] %<>% apply(., 2, as.integer)#
Plant_Surveys_by_Year[,c(#
	"Height_t",#
	"Height_t_1",#
	"RGR_Height",#
	"RGR_Height365",#
	"RGR_Size",#
	"RGR_Size365"#
)] %<>% apply(., 2, as.numeric)#
Plant_Surveys_by_Year$PlantID %<>% as.factor	#
Plant_Surveys_by_Year$SamplingYear %<>% as.factor#
Plant_Surveys_by_Year$Species %<>% as.factor#
Plant_Surveys_by_Year$Network %<>% as.factor#
Plant_Surveys_by_Year$Island %<>% as.factor#
Plant_Surveys_by_Year$ReproductiveMode %<>% as.factor#
Plant_Surveys_by_Year$Year <- year(Plant_Surveys_by_Year$Date)#
Plant_Surveys_by_Year$PrevYear <- year(Plant_Surveys_by_Year$Date) - 1#
#
Plant_Surveys_analysis <- Plant_Surveys_by_Year %>% 	#
	as.data.frame %>%#
 	droplevels %>% #
 	mutate(Ln_Size_t_1_st = arm::rescale(log(Size_t_1))) %>%#
 	dplyr::select(#
 		Species,#
		PlantID,#
 		Date,#
		Year,#
		PrevYear,#
 		Network,#
 		Island,#
 		Size_t_1,#
 		Height_t_1,#
 		CA_t_1,#
 		ME_t_1,#
 		Old_Moth_Evidence_t_1,#
 		RGR_Size,#
 		RGR_Height,#
 		Ln_Size_t_1_st,#
 		FruitPres_t,#
 		Fruit_t#
 	) %>%#
 	.[complete.cases(.),]#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling/data')#
# write.csv(Plant_Surveys_stricta_analysis, "Plant_Surveys_stricta.csv")#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_stricta")#
################################################################################
# Save modified timeseries dataset - just pusilla#
################################################################################
# Plant_Surveys_pusilla =	Plant_Surveys_by_Year %>% #
# 	filter(Species=="Opuntia pusilla")#
# Plant_Surveys_pusilla$Species %<>% droplevels#
#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_pusilla")
head(Plant_Surveys)
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys
head(processPlantSurveys)
head(Plant_Surveys)
names(Plant_Surveys)
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
Plant_Info %<>% processPlantInfo(Plot_Info)#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info) %>%#
	processPlantSurveysafterMergewPlantInfo
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys#
#
# --------------------------------------------------------------------------- ##
# --------------------------------------------------------------------------- ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info) %>%#
	processPlantSurveysafterMergewPlantInfo
setwd('/Users/KSauby/Documents/Projects')
setwd("./dataproc")#
#setwd("./modresproc")#
#devtools::test()#
devtools::document()#
devtools::install()
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys#
#
# --------------------------------------------------------------------------- ##
# --------------------------------------------------------------------------- ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info) %>%#
	processPlantSurveysafterMergewPlantInfo
setwd('/Users/KSauby/Documents/Projects')
setwd("./dataproc")#
#setwd("./modresproc")#
#devtools::test()#
devtools::document()#
devtools::install()
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys#
#
# --------------------------------------------------------------------------- ##
# --------------------------------------------------------------------------- ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info) %>%#
	processPlantSurveysafterMergewPlantInfo
str(Plant_Surveys)
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# create Fecundity and RGR dataset - only measured size during the spring and summer#
Plant_Surveys_by_Year <- Plant_Surveys %>% #
	group_by(SamplingYear, PlantID) %>%#
	summarise(#
		Species = Species[1],#
		Network = Network[1],#
		Island = Island[1],#
		ReproductiveMode = ReproductiveMode[1],#
		Date = min(Date),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		FruitFlowerPres_t = max(FruitFlowerPres_t, na.rm=T),#
		Size_t = max(Size_t, na.rm=T),#
		Height_t = max(Height_t, na.rm=T),#
		Fruit_t = max(Fruit_t, na.rm=T),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		CA_t = max(CA_t, na.rm=T),#
		ME_t = max(ME_t, na.rm=T),#
		DA_t = max(DA_t, na.rm=T),#
		CH_t = max(CH_t, na.rm=T),#
		Old_Moth_Evidence_t = max(Old_Moth_Evidence_t, na.rm=T)#
	) %>% #
	mutate(PrevSamplingYear = SamplingYear - 1) %>%#
	# lag variables#
	calculateSizeLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateDateLags %>%#
	createNewInsectVariables(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateInsectLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	as.data.frame %>%#
	calculateRGR ## this leads to a few values with PlantID = NA#
# --------------------------------------------------------------------------- ##
########################## ERROR MESSAGE#
	# check for PlantID = NA#
	dups <- Plant_Surveys_by_Year %>% #
		filter(is.na(PlantID))#
#
	if (dim(dups)[1] > 0) {#
			stop("NA values for PlantID.")#
	}#
	# should not be any non-NA values for RGR for SamplingYear 2012#
	dups <- Plant_Surveys_by_Year %>% #
		filter(SamplingYear==2012) %>%#
		filter(!is.na(RGR_Height))#
#
	if (dim(dups)[1] > 0) {#
			stop("Non-NA values for RGR for first Sampling Year.")#
	}#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Size_t_1 %<>% as.numeric#
Plant_Surveys_by_Year[,c(#
	"Old_Moth_Evidence_t",#
	"NatInsect_t",#
	"Insect_t",#
	"DA_t",#
	"CH_t",#
	"ME_t",#
	"CA_t",                #
	"Size_t",#
	"FruitPres_t",#
	"FruitFlowerPres_t",#
	"Fruit_t",#
	"Size_t_1",#
	"DaysSincePrevSurvey",#
	"DaysSinceStart",#
	"CA_t_1",#
	"ME_t_1",#
	"CH_t_1",#
	"DA_t_1",#
	"Insect_t_1",#
	"NatInsect_t_1",#
	"Old_Moth_Evidence_t_1"#
)] %<>% apply(., 2, as.integer)#
Plant_Surveys_by_Year[,c(#
	"Height_t",#
	"Height_t_1",#
	"RGR_Height",#
	"RGR_Height365",#
	"RGR_Size",#
	"RGR_Size365"#
)] %<>% apply(., 2, as.numeric)#
Plant_Surveys_by_Year$PlantID %<>% as.factor	#
Plant_Surveys_by_Year$SamplingYear %<>% as.factor#
Plant_Surveys_by_Year$Species %<>% as.factor#
Plant_Surveys_by_Year$Network %<>% as.factor#
Plant_Surveys_by_Year$Island %<>% as.factor#
Plant_Surveys_by_Year$ReproductiveMode %<>% as.factor#
Plant_Surveys_by_Year$Year <- year(Plant_Surveys_by_Year$Date)#
Plant_Surveys_by_Year$PrevYear <- year(Plant_Surveys_by_Year$Date) - 1#
#
Plant_Surveys_analysis <- Plant_Surveys_by_Year %>% 	#
	as.data.frame %>%#
 	droplevels %>% #
 	mutate(Ln_Size_t_1_st = arm::rescale(log(Size_t_1))) %>%#
 	dplyr::select(#
 		Species,#
		PlantID,#
 		Date,#
		Year,#
		PrevYear,#
 		Network,#
 		Island,#
 		Size_t_1,#
 		Height_t_1,#
 		CA_t_1,#
 		ME_t_1,#
 		Old_Moth_Evidence_t_1,#
 		RGR_Size,#
 		RGR_Height,#
 		Ln_Size_t_1_st,#
 		FruitPres_t,#
 		Fruit_t#
 	) %>%#
 	.[complete.cases(.),]#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling/data')#
# write.csv(Plant_Surveys_stricta_analysis, "Plant_Surveys_stricta.csv")#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_stricta")#
################################################################################
# Save modified timeseries dataset - just pusilla#
################################################################################
# Plant_Surveys_pusilla =	Plant_Surveys_by_Year %>% #
# 	filter(Species=="Opuntia pusilla")#
# Plant_Surveys_pusilla$Species %<>% droplevels#
#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_pusilla")
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# list of climate files to fix#
climate_file_names <- c("NOAA.Palm.Coast.6.NE")#
climate_data <- mergeClimateFiles(climate_file_names) %>%#
	filterClimateDataByQuality %>%#
	formatconvertClimateData#
#
# check data#
climate_data %>%#
filter(MaxTemp < MinTemp)#
#
climate_data %>%#
filter(MaxTemp == MinTemp)#
#
# split files to calculate degree days#
climate_data %>% #
	dplyr::select(Date, MinTemp, MaxTemp) %>%#
	.[complete.cases(.),] %>%#
	write.csv("GTMNERR_data.csv", row.names=F)#
climate_data %>% filter(is.na(MinTemp) | is.na(MaxTemp) | is.na(Precip)) %>%#
	dplyr::select(Date, MinTemp, MaxTemp, Precip) %>%#
	write.csv("climate_data_NAs.csv", row.names=F)
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
temp_variables = c("Max Temp, Mean",#
"Max Temp, SD",#
"Mean Degree Day",#
"Perc. Freezing Days",#
"Consec. Freezing Days, Mean",#
"Consec. Freezing Days, Max",#
"Consec. Freezing Days, SD"#
)#
#
#precip_variables = c("D.Precip.mean", "D.Precip.SD", "% D w/Rain", "D w/Rain, Mean", "D w/Rain, Max", "D w/Rain, SD", "D w/o Rain, Mean", "D w/o Rain, Max", "D w/o Rain, SD")#
#
precip_variables = c("Daily Precip, mean",#
"Daily Precip, SD",#
"Perc. Days w/Rain",#
"Consec. Days w/Rain, Mean",#
"Consec. Days w/Rain, Max",#
"Consec. Days w/Rain, SD",#
"Consec. Days w/o Rain, Mean",#
"Consec. Days w/o Rain, Max",#
"Consec. Days w/o Rain, SD"#
)#
temp_variables = c("E1","E2", "F")#
precip_variables = c("A1", "A2", "B","C1","C2","C3","D1","D2","D3")#
ID_variables = c("Date") #, "Location", "Species")#
Location_list <- "GTMNERR"#
DegreeDay_list <- c("GTMNERR.Degree.Days")#
#
climate_data %<>% calculateDegreeDays(DegreeDay_list) %>%#
	formatClimateDataYearDayofYear %>%#
	fixErroneousTemps#
Plant_Surveys_by_Year %<>% mutate(Location="GTMNERR")#
climate_data %<>% #
	dplyr::select(Date, MinTemp, MaxTemp, Precip, Daily.DD, Year, Day_of_year) %>%#
	mutate(Location="GTMNERR") %>%#
	.[complete.cases(.), ]#
#
# only 8 days with temperatures below freezing: climate_data[which(climate_data$MinTemp<0),], between 2011-01-01 and 2015-08, and all were either in 2011 and 2012#
# removing freezing variables#
#
# (1) First restrict to complete cases#
#
# dates for the starts of Spring and Fall#
df <- data.frame(Date = as.Date(c(seasons$SE, seasons$FE))) %>% #
	arrange(Date) %>%#
	filter(Date > "2012-03-01" & Date <= "2015-09-20") %>%#
	mutate(PrevSurvD = as.Date(c(NA, Date[-length(Date)]), origin="1970-01-01"))#
six_month_dates = df[rep(1:nrow(df), times=length(Location_list)), ]#
six_month_dates$Location = rep(Location_list, times=dim(df)[1])#
#
Dates_dataframe <- six_month_dates %>% .[complete.cases(.), ]#
fecundityRGR <- calculateClimateVariables(#
	Plant_Surveys_by_Year, #
	climate_data, #
	calculate_dates="FALSE", #
	Dates_dataframe=Dates_dataframe,#
	first.year=2012#
) #
#
fecundityRGR$Dataset <- NA#
fecundityRGR[which(month(fecundityRGR$Date)==9), ]$Dataset <- "SS"#
fecundityRGR[which(month(fecundityRGR$Date)==3), ]$Dataset <- "FW"#
#
X <- fecundityRGR %>%#
	as.data.table %>% #
	change_weather_names_function2 %>%#
	as.data.frame %>%#
	.[complete.cases(.), ]#
# Temp#
XT <- X %>% #
	.[, c(ID_variables, "Dataset", temp_variables)] %>% #
	mutate(Year=year(Date))#
#
XT_SS <-XT %>% filter(Dataset=="SS") %>% dplyr::select(-c(Date, Dataset))#
XT_SS[,c("E1","E2","F")] %<>% apply(., 2, arm::rescale)	#
names(XT_SS)[1:3] <- paste(colnames(XT_SS[,c("E1","E2","F")]), "_SS", sep="")#
#
XT_FW <- XT %>% filter(Dataset=="FW") %>% dplyr::select(-c(Date, Dataset))#
XT_FW[,c("E1","E2","F")] %<>% apply(., 2, arm::rescale)	#
names(XT_FW)[1:3] <- paste(colnames(XT_FW[,c("E1","E2","F")]), "_FW", sep="")#
#
# Precip#
XP <- X %>% #
	.[, c(ID_variables, "Dataset", precip_variables)] %>%#
	mutate(Year=year(Date)) %>%#
	dplyr::select(Date, Dataset, Year, A1, B)#
XP_SS <- XP %>% filter(Dataset=="SS") %>% dplyr::select(-c(Date, Dataset))#
XP_SS[,c("A1","B")] %<>% apply(., 2, arm::rescale)	#
names(XP_SS)[2:3] <- paste(colnames(XP_SS[,c("A1","B")]), "_SS", sep="")#
#
XP_FW <- XP %>% filter(Dataset=="FW") %>% dplyr::select(-c(Date, Dataset))#
XP_FW[,c("A1","B")] %<>% apply(., 2, arm::rescale)	#
names(XP_FW)[2:3] <- paste(colnames(XP_FW[,c("A1","B")]), "_FW", sep="")
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
Plant_Surveys_analysis_weather = Plant_Surveys_analysis %>% #
	merge(XT_SS,#
		by.x=c("PrevYear"), #
		by.y=c("Year"), #
		all=T#
	) %>%#
	merge(#
		XT_FW, #
		by.x=c("Year"), #
		by.y=c("Year"), #
		all=T#
	) %>%#
	merge(XP_SS,#
		by.x=c("PrevYear"), #
		by.y=c("Year"), #
		all=T#
	) %>%#
	merge(#
		XP_FW, #
		by.x=c("Year"), #
		by.y=c("Year"), #
		all=T#
	)#
Plant_Surveys_stricta <- Plant_Surveys_analysis_weather %>% 	filter(Species=="Opuntia stricta")#
Plant_Surveys_stricta %>% write.csv("Plant_Surveys_stricta.csv")#
#
Plant_Surveys_pusilla <- Plant_Surveys_analysis_weather %>% #
	filter(Species=="Opuntia pusilla")#
Plant_Surveys_pusilla %>% write.csv("Plant_Surveys_pusilla.csv")
setwd('/Users/KSauby/Documents/Projects')
setwd("./dataproc")#
#setwd("./modresproc")#
#devtools::test()#
devtools::document()#
devtools::install()
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# ---------------------------------------------------- DATA CHECKING#
# compare these numbers to the numbers after data is further processed#
#
# number of CACA observations#
length(Plot_Surveys[which(Plot_Surveys$CACA_on_Stricta=="Yes"), ]$CACA_on_Stricta)#
# number of MEPR observations#
length(Plot_Surveys[which(Plot_Surveys$MEPR_on_Stricta=="Yes"), ]$MEPR_on_Stricta)#
# don't exclude all plots for the demography study#
#
# --------------------------------------------------------------------------- ##
# --------------- Occupancy Plot Info --------------------------------------- ##
# --------------------------------------------------------------------------- ##
#
Plot_Info %<>% processOccupancyPlotInfo#
#
# check errors by keeping track of dataframe size#
Plot_Info_Size = as.data.frame(matrix(NA, 1, 1))#
Plot_Info_Size[, 1] = dim(Plot_Info)[1]#
#
Plot_Surveys %<>% processOccupancyPlotSurveys
setwd('/Users/KSauby/Documents/Projects')
setwd("./dataproc")#
#setwd("./modresproc")#
#devtools::test()#
devtools::document()#
devtools::install()
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Surveys 	%<>% mutate(Tag_Date=paste(Tag_Number, Date))#
	Plot_Surveys 	%<>% mutate(Tag_Date=paste(Tag_Number, Date))#
	D_Plot_Surveys 	%<>% mutate(Tag_Date=paste(Tag_Number, Date))#
	# keep records of Tag Numbers not surveyed on particular dates#
	temp.plant.surveys <- filter(#
		Plant_Surveys_All, #
		!(Tag_Date %in% Plot_Surveys_All$Tag_Date),#
		!(Tag_Date %in% D_Plot_Surveys$Tag_Date)#
	)
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys#
#
# --------------------------------------------------------------------------- ##
# --------------------------------------------------------------------------- ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info) %>%#
	processPlantSurveysafterMergewPlantInfo#
#
# create Fecundity and RGR dataset - only measured size during the spring and summer#
Plant_Surveys_by_Year <- Plant_Surveys %>% #
	group_by(SamplingYear, PlantID) %>%#
	summarise(#
		Species = Species[1],#
		Network = Network[1],#
		Island = Island[1],#
		ReproductiveMode = ReproductiveMode[1],#
		Date = min(Date),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		FruitFlowerPres_t = max(FruitFlowerPres_t, na.rm=T),#
		Size_t = max(Size_t, na.rm=T),#
		Height_t = max(Height_t, na.rm=T),#
		Fruit_t = max(Fruit_t, na.rm=T),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		CA_t = max(CA_t, na.rm=T),#
		ME_t = max(ME_t, na.rm=T),#
		DA_t = max(DA_t, na.rm=T),#
		CH_t = max(CH_t, na.rm=T),#
		Old_Moth_Evidence_t = max(Old_Moth_Evidence_t, na.rm=T)#
	) %>% #
	mutate(PrevSamplingYear = SamplingYear - 1) %>%#
	# lag variables#
	calculateSizeLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateDateLags %>%#
	createNewInsectVariables(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateInsectLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	as.data.frame %>%#
	calculateRGR ## this leads to a few values with PlantID = NA#
# --------------------------------------------------------------------------- ##
########################## ERROR MESSAGE#
	# check for PlantID = NA#
	dups <- Plant_Surveys_by_Year %>% #
		filter(is.na(PlantID))#
#
	if (dim(dups)[1] > 0) {#
			stop("NA values for PlantID.")#
	}#
	# should not be any non-NA values for RGR for SamplingYear 2012#
	dups <- Plant_Surveys_by_Year %>% #
		filter(SamplingYear==2012) %>%#
		filter(!is.na(RGR_Height))#
#
	if (dim(dups)[1] > 0) {#
			stop("Non-NA values for RGR for first Sampling Year.")#
	}#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Size_t_1 %<>% as.numeric#
Plant_Surveys_by_Year[,c(#
	"Old_Moth_Evidence_t",#
	"NatInsect_t",#
	"Insect_t",#
	"DA_t",#
	"CH_t",#
	"ME_t",#
	"CA_t",                #
	"Size_t",#
	"FruitPres_t",#
	"FruitFlowerPres_t",#
	"Fruit_t",#
	"Size_t_1",#
	"DaysSincePrevSurvey",#
	"DaysSinceStart",#
	"CA_t_1",#
	"ME_t_1",#
	"CH_t_1",#
	"DA_t_1",#
	"Insect_t_1",#
	"NatInsect_t_1",#
	"Old_Moth_Evidence_t_1"#
)] %<>% apply(., 2, as.integer)#
Plant_Surveys_by_Year[,c(#
	"Height_t",#
	"Height_t_1",#
	"RGR_Height",#
	"RGR_Height365",#
	"RGR_Size",#
	"RGR_Size365"#
)] %<>% apply(., 2, as.numeric)#
Plant_Surveys_by_Year$PlantID %<>% as.factor	#
Plant_Surveys_by_Year$SamplingYear %<>% as.factor#
Plant_Surveys_by_Year$Species %<>% as.factor#
Plant_Surveys_by_Year$Network %<>% as.factor#
Plant_Surveys_by_Year$Island %<>% as.factor#
Plant_Surveys_by_Year$ReproductiveMode %<>% as.factor#
Plant_Surveys_by_Year$Year <- year(Plant_Surveys_by_Year$Date)#
Plant_Surveys_by_Year$PrevYear <- year(Plant_Surveys_by_Year$Date) - 1#
#
Plant_Surveys_analysis <- Plant_Surveys_by_Year %>% 	#
	as.data.frame %>%#
 	droplevels %>% #
 	mutate(Ln_Size_t_1_st = arm::rescale(log(Size_t_1))) %>%#
 	dplyr::select(#
 		Species,#
		PlantID,#
 		Date,#
		Year,#
		PrevYear,#
 		Network,#
 		Island,#
 		Size_t_1,#
 		Height_t_1,#
 		CA_t_1,#
 		ME_t_1,#
 		Old_Moth_Evidence_t_1,#
 		RGR_Size,#
 		RGR_Height,#
 		Ln_Size_t_1_st,#
 		FruitPres_t,#
 		Fruit_t#
 	) %>%#
 	.[complete.cases(.),]#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling/data')#
# write.csv(Plant_Surveys_stricta_analysis, "Plant_Surveys_stricta.csv")#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_stricta")#
################################################################################
# Save modified timeseries dataset - just pusilla#
################################################################################
# Plant_Surveys_pusilla =	Plant_Surveys_by_Year %>% #
# 	filter(Species=="Opuntia pusilla")#
# Plant_Surveys_pusilla$Species %<>% droplevels#
#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_pusilla")
library(dataproc)
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys#
#
# --------------------------------------------------------------------------- ##
# --------------------------------------------------------------------------- ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info) %>%#
	processPlantSurveysafterMergewPlantInfo#
#
# create Fecundity and RGR dataset - only measured size during the spring and summer#
Plant_Surveys_by_Year <- Plant_Surveys %>% #
	group_by(SamplingYear, PlantID) %>%#
	summarise(#
		Species = Species[1],#
		Network = Network[1],#
		Island = Island[1],#
		ReproductiveMode = ReproductiveMode[1],#
		Date = min(Date),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		FruitFlowerPres_t = max(FruitFlowerPres_t, na.rm=T),#
		Size_t = max(Size_t, na.rm=T),#
		Height_t = max(Height_t, na.rm=T),#
		Fruit_t = max(Fruit_t, na.rm=T),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		CA_t = max(CA_t, na.rm=T),#
		ME_t = max(ME_t, na.rm=T),#
		DA_t = max(DA_t, na.rm=T),#
		CH_t = max(CH_t, na.rm=T),#
		Old_Moth_Evidence_t = max(Old_Moth_Evidence_t, na.rm=T)#
	) %>% #
	mutate(PrevSamplingYear = SamplingYear - 1) %>%#
	# lag variables#
	calculateSizeLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateDateLags %>%#
	createNewInsectVariables(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateInsectLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	as.data.frame %>%#
	calculateRGR ## this leads to a few values with PlantID = NA#
# --------------------------------------------------------------------------- ##
########################## ERROR MESSAGE#
	# check for PlantID = NA#
	dups <- Plant_Surveys_by_Year %>% #
		filter(is.na(PlantID))#
#
	if (dim(dups)[1] > 0) {#
			stop("NA values for PlantID.")#
	}#
	# should not be any non-NA values for RGR for SamplingYear 2012#
	dups <- Plant_Surveys_by_Year %>% #
		filter(SamplingYear==2012) %>%#
		filter(!is.na(RGR_Height))#
#
	if (dim(dups)[1] > 0) {#
			stop("Non-NA values for RGR for first Sampling Year.")#
	}#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Size_t_1 %<>% as.numeric#
Plant_Surveys_by_Year[,c(#
	"Old_Moth_Evidence_t",#
	"NatInsect_t",#
	"Insect_t",#
	"DA_t",#
	"CH_t",#
	"ME_t",#
	"CA_t",                #
	"Size_t",#
	"FruitPres_t",#
	"FruitFlowerPres_t",#
	"Fruit_t",#
	"Size_t_1",#
	"DaysSincePrevSurvey",#
	"DaysSinceStart",#
	"CA_t_1",#
	"ME_t_1",#
	"CH_t_1",#
	"DA_t_1",#
	"Insect_t_1",#
	"NatInsect_t_1",#
	"Old_Moth_Evidence_t_1"#
)] %<>% apply(., 2, as.integer)#
Plant_Surveys_by_Year[,c(#
	"Height_t",#
	"Height_t_1",#
	"RGR_Height",#
	"RGR_Height365",#
	"RGR_Size",#
	"RGR_Size365"#
)] %<>% apply(., 2, as.numeric)#
Plant_Surveys_by_Year$PlantID %<>% as.factor	#
Plant_Surveys_by_Year$SamplingYear %<>% as.factor#
Plant_Surveys_by_Year$Species %<>% as.factor#
Plant_Surveys_by_Year$Network %<>% as.factor#
Plant_Surveys_by_Year$Island %<>% as.factor#
Plant_Surveys_by_Year$ReproductiveMode %<>% as.factor#
Plant_Surveys_by_Year$Year <- year(Plant_Surveys_by_Year$Date)#
Plant_Surveys_by_Year$PrevYear <- year(Plant_Surveys_by_Year$Date) - 1#
#
Plant_Surveys_analysis <- Plant_Surveys_by_Year %>% 	#
	as.data.frame %>%#
 	droplevels %>% #
 	mutate(Ln_Size_t_1_st = arm::rescale(log(Size_t_1))) %>%#
 	dplyr::select(#
 		Species,#
		PlantID,#
 		Date,#
		Year,#
		PrevYear,#
 		Network,#
 		Island,#
 		Size_t_1,#
 		Height_t_1,#
 		CA_t_1,#
 		ME_t_1,#
 		Old_Moth_Evidence_t_1,#
 		RGR_Size,#
 		RGR_Height,#
 		Ln_Size_t_1_st,#
 		FruitPres_t,#
 		Fruit_t#
 	) %>%#
 	.[complete.cases(.),]#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling/data')#
# write.csv(Plant_Surveys_stricta_analysis, "Plant_Surveys_stricta.csv")#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_stricta")#
################################################################################
# Save modified timeseries dataset - just pusilla#
################################################################################
# Plant_Surveys_pusilla =	Plant_Surveys_by_Year %>% #
# 	filter(Species=="Opuntia pusilla")#
# Plant_Surveys_pusilla$Species %<>% droplevels#
#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_pusilla")
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys#
#
# --------------------------------------------------------------------------- ##
# --------------------------------------------------------------------------- ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info) %>%#
	processPlantSurveysafterMergewPlantInfo#
#
# create Fecundity and RGR dataset - only measured size during the spring and summer#
Plant_Surveys_by_Year <- Plant_Surveys %>% #
	group_by(SamplingYear, PlantID) %>%#
	summarise(#
		Species = Species[1],#
		Network = Network[1],#
		Island = Island[1],#
		ReproductiveMode = ReproductiveMode[1],#
		Date = min(Date),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		FruitFlowerPres_t = max(FruitFlowerPres_t, na.rm=T),#
		Size_t = max(Size_t, na.rm=T),#
		Height_t = max(Height_t, na.rm=T),#
		Fruit_t = max(Fruit_t, na.rm=T),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		CA_t = max(CA_t, na.rm=T),#
		ME_t = max(ME_t, na.rm=T),#
		DA_t = max(DA_t, na.rm=T),#
		CH_t = max(CH_t, na.rm=T),#
		Old_Moth_Evidence_t = max(Old_Moth_Evidence_t, na.rm=T)#
	) %>% #
	mutate(PrevSamplingYear = SamplingYear - 1) %>%#
	# lag variables#
	calculateSizeLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateDateLags %>%#
	createNewInsectVariables(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateInsectLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	as.data.frame %>%#
	calculateRGR ## this leads to a few values with PlantID = NA#
# --------------------------------------------------------------------------- ##
########################## ERROR MESSAGE#
	# check for PlantID = NA#
	dups <- Plant_Surveys_by_Year %>% #
		filter(is.na(PlantID))#
#
	if (dim(dups)[1] > 0) {#
			stop("NA values for PlantID.")#
	}#
	# should not be any non-NA values for RGR for SamplingYear 2012#
	dups <- Plant_Surveys_by_Year %>% #
		filter(SamplingYear==2012) %>%#
		filter(!is.na(RGR_Height))#
#
	if (dim(dups)[1] > 0) {#
			stop("Non-NA values for RGR for first Sampling Year.")#
	}#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Size_t_1 %<>% as.numeric#
Plant_Surveys_by_Year[,c(#
	"Old_Moth_Evidence_t",#
	"NatInsect_t",#
	"Insect_t",#
	"DA_t",#
	"CH_t",#
	"ME_t",#
	"CA_t",                #
	"Size_t",#
	"FruitPres_t",#
	"FruitFlowerPres_t",#
	"Fruit_t",#
	"Size_t_1",#
	"DaysSincePrevSurvey",#
	"DaysSinceStart",#
	"CA_t_1",#
	"ME_t_1",#
	"CH_t_1",#
	"DA_t_1",#
	"Insect_t_1",#
	"NatInsect_t_1",#
	"Old_Moth_Evidence_t_1"#
)] %<>% apply(., 2, as.integer)#
Plant_Surveys_by_Year[,c(#
	"Height_t",#
	"Height_t_1",#
	"RGR_Height",#
	"RGR_Height365",#
	"RGR_Size",#
	"RGR_Size365"#
)] %<>% apply(., 2, as.numeric)#
Plant_Surveys_by_Year$PlantID %<>% as.factor	#
Plant_Surveys_by_Year$SamplingYear %<>% as.factor#
Plant_Surveys_by_Year$Species %<>% as.factor#
Plant_Surveys_by_Year$Network %<>% as.factor#
Plant_Surveys_by_Year$Island %<>% as.factor#
Plant_Surveys_by_Year$ReproductiveMode %<>% as.factor#
Plant_Surveys_by_Year$Year <- year(Plant_Surveys_by_Year$Date)#
Plant_Surveys_by_Year$PrevYear <- year(Plant_Surveys_by_Year$Date) - 1#
#
Plant_Surveys_analysis <- Plant_Surveys_by_Year %>% 	#
	as.data.frame %>%#
 	droplevels %>% #
 	mutate(Ln_Size_t_1_st = arm::rescale(log(Size_t_1))) %>%#
 	dplyr::select(#
 		Species,#
		PlantID,#
 		Date,#
		Year,#
		PrevYear,#
 		Network,#
 		Island,#
 		Size_t_1,#
 		Height_t_1,#
 		CA_t_1,#
 		ME_t_1,#
 		Old_Moth_Evidence_t_1,#
 		RGR_Size,#
 		RGR_Height,#
 		Ln_Size_t_1_st,#
 		FruitPres_t,#
 		Fruit_t#
 	) %>%#
 	.[complete.cases(.),]#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling/data')#
# write.csv(Plant_Surveys_stricta_analysis, "Plant_Surveys_stricta.csv")#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_stricta")#
################################################################################
# Save modified timeseries dataset - just pusilla#
################################################################################
# Plant_Surveys_pusilla =	Plant_Surveys_by_Year %>% #
# 	filter(Species=="Opuntia pusilla")#
# Plant_Surveys_pusilla$Species %<>% droplevels#
#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_pusilla")
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# ---------------------------------------------------- DATA CHECKING#
# compare these numbers to the numbers after data is further processed#
#
# number of CACA observations#
length(Plot_Surveys[which(Plot_Surveys$CACA_on_Stricta=="Yes"), ]$CACA_on_Stricta)#
# number of MEPR observations#
length(Plot_Surveys[which(Plot_Surveys$MEPR_on_Stricta=="Yes"), ]$MEPR_on_Stricta)#
# don't exclude all plots for the demography study#
#
# --------------------------------------------------------------------------- ##
# --------------- Occupancy Plot Info --------------------------------------- ##
# --------------------------------------------------------------------------- ##
#
Plot_Info %<>% processOccupancyPlotInfo#
#
# check errors by keeping track of dataframe size#
Plot_Info_Size = as.data.frame(matrix(NA, 1, 1))#
Plot_Info_Size[, 1] = dim(Plot_Info)[1]#
#
Plot_Surveys %<>% processOccupancyPlotSurveys
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# --------------------------------------------------------------------------- ##
# CHECK THIS FILE TO SEE THAT CACTUS PRESENCE FROM PLOT SURVEYS MATCHES CACTUS PRESENCE FROM PLANT SURVEYS#
# --------------------------------------------------------------------------- ##
# WHY IS THERE A TAG NUMBER = NA?#
# STILL NOT CORRECT#
# LOTS OF NAS FOR STRICTA AND PUSILLA FOR THEIR PRESENCE/ABSENCE#
#
changeVariableNames <- function(Plot_Surveys) {#
	Plot_Surveys %<>% #
		as.data.table %<>%#
		# pusilla#
		setnames("CACA_on_Pusilla", 			"P_Ca") %>%#
		setnames("MEPR_on_Pusilla", 			"P_Me") %>%#
		setnames("CHVI_on_Pusilla", 			"P_Ch") %>%#
		setnames("UnknwnMoth_on_Pusilla", 		"P_Umoth") %>%#
		setnames("Old_Moth_Evidence_Pusilla", 	"P_Omoth") %>%#
		setnames("Height_Pusilla", 				"P_H") %>%#
		setnames("Percent_Cover_Pusilla",		"P_PC")  %>%#
		# stricta#
		setnames("CACA_on_Stricta", 			"S_Ca") %>%#
		setnames("MEPR_on_Stricta", 			"S_Me") %>%#
		setnames("CHVI_on_Stricta", 			"S_Ch") %>%#
		setnames("UnknwnMoth_on_Stricta", 		"S_Umoth") %>%#
		setnames("Old_Moth_Evidence_Stricta", 	"S_Omoth") %>%#
		setnames("Height_Stricta",				"S_H")  %>%#
		setnames("Percent_Cover_Stricta",		"S_PC") %>%#
		as.data.frame	#
}#
#
column_list <- c(		#
	"P_plant_survey", #
	"P_Ca", #
	"P_Me", #
	"P_Ch", #
	"P_Umoth", #
	"P_Omoth", #
	"S_plant_survey", #
	"S_Ca", #
	"S_Me", #
	"S_Ch", #
	"S_Umoth", #
	"S_Omoth"#
)#
#
# --------------------------------------------------------------------------- ##
# (5) Merge datasets together#
# --------------------------------------------------------------------------- ##
#
A <- mergePlantSurveysPlotSurveys(Plot_Surveys, Plant_Surveys)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
mergePlantSurveysPlotSurveys <- function(Plot_Surveys, Plant_Surveys) {#
	temp_A = filter(#
		Plot_Surveys, #
		Date > "2012-12-01", Tag_Number %in% Plant_Surveys$Tag_Number#
	)#
	Z = list()#
	# for each tag number in the plot surveys data#
	for (i in 1:length(unique(temp_A$Tag_Number))) {#
		# pull all records for this Tag Number from plot surveys#
		L = filter(temp_A, Tag_Number==unique(temp_A$Tag_Number)[i])#
		Z[[i]] <- as.data.frame(matrix(NA,length(L$Date),1))#
		Z[[i]][, 1] 					<- L$Tag_Number[1]#
		Z[[i]][, "Date"] 				<- L$Date#
		Z[[i]][, "Pictures"] 			<- L$Pictures#
		Z[[i]][, "PictureDirection"] 	<- L$PictureDirection#
		Z[[i]][, "Notes"] 				<- L$Notes#
		# for each date#
		for (j in 1:dim(L)[1]) {#
			# fill with occupancy survey data#
			Z[[i]][j, "P_plot_survey"] 	<- L$Pusilla[j]#
			Z[[i]][j, "P_plant_survey"] <-  "NA"#
			Z[[i]][j, "P_Ca"] 			<- L$Ca_P[j]#
			Z[[i]][j, "P_Me"] 			<- L$Me_P[j]#
			Z[[i]][j, "P_Ch"] 			<- L$Ch_P[j]#
			Z[[i]][j, "P_Umoth"] 		<- L$Umoth_P[j]#
			Z[[i]][j, "P_Omoth"] 		<- L$Omoth_P[j]#
			Z[[i]][j, "P_PC"] 			<- L$PC_P[j]#
			Z[[i]][j, "P_H"] 			<- L$H_P[j]#
			Z[[i]][j, "S_plot_survey"] 	<- L$Stricta[j]#
			Z[[i]][j, "S_plant_survey"] <- "NA"#
			Z[[i]][j, "S_Ca"] 			<- L$Ca_S[j]#
			Z[[i]][j, "S_Me"] 			<- L$Me_S[j]#
			Z[[i]][j, "S_Ch"] 			<- L$Ch_S[j]#
			Z[[i]][j, "S_Umoth"] 		<- L$Umoth_S[j]#
			Z[[i]][j, "S_Omoth"] 		<- L$Omoth_S[j]#
			Z[[i]][j, "S_PC"] 			<- L$PC_S[j]#
			Z[[i]][j, "S_H"] 			<- L$H_S[j]#
			# pull all plant survey records for this Tag Number and date from plant surveys#
			M = filter(Plant_Surveys_All, #
				Tag_Number==L$Tag_Number[1], #
				Date==unique(L$Date)[j],#
				# remove plants marked as dead#
				Dead!=1)#
			# remove plants marked as missing	#
			M = M[which(M$Missing!=1 | is.na(M$Missing)==T), ]#
			# if there is plant survey data for this date, update the occupancy survey data#
			# if the M dataframe has at least one row of data:#
			if (dim(M)[1] > 0) {#
				P = filter(M, HostSpecies=="pusilla")#
				Z[[i]][j, "P_plot_survey"] 	<- L$Pusilla[j]#
				Z[[i]][j, "P_plant_survey"] <- ifelse(dim(P)[1] > 0, 1, 0)#
				Z[[i]][j, "P_Ca"] 			<- max(P$CA_t, L[j,]$Ca_P, na.rm=T)#
				Z[[i]][j, "P_Me"] 			<- max(P$ME_t, L[j,]$Me_P, na.rm=T)#
				Z[[i]][j, "P_Ch"] 			<- max(P$CH_t, L[j,]$Ch_P, na.rm=T)#
				Z[[i]][j, "P_Umoth"] 		<- max(#
												P$Unknown_Moth_t, #
												L[j,]$Umoth_P, na.rm=T#
											)#
				Z[[i]][j, "P_Omoth"] 		<- max(#
												P$Old_Moth_Evidence_t, #
												L[j,]$Omoth_P, na.rm=T#
											)#
				Z[[i]][j, "P_PC"] 			<- L$PC_P[j]#
				# Height - if plot survey height is NA, then replace with max height from plant surveys#
				Z[[i]][j, "P_H"] 			<- ifelse(#
												is.na(L$H_P[j]) & dim(P)[1] > 0,#
												max(P$Max_Height, na.rm=T), #
												L$H_P[j]#
											) #
				S = filter(M, HostSpecies=="stricta")#
				Z[[i]][j, "S_plot_survey"] 	<- L$Stricta[j]#
				Z[[i]][j, "S_plant_survey"] <- ifelse(dim(S)[1] > 0, 1, 0)#
				Z[[i]][j, "S_Ca"] 			<- max(S$CA_t, L[j,]$Ca_S, na.rm=T)#
				Z[[i]][j, "S_Me"] 			<- max(S$ME_t, L[j,]$Me_S, na.rm=T)#
				Z[[i]][j, "S_Ch"] 			<- max(S$CH_t, L[j,]$Ch_S, na.rm=T)#
				Z[[i]][j, "S_Umoth"] 		<- max(#
												S$Unknown_Moth_t, #
												L[j,]$Umoth_S, #
												na.rm=T#
											)#
				Z[[i]][j, "S_Omoth"] 		<- max(#
												S$Old_Moth_Evidence_t, #
												L[j,]$Omoth_S,#
												na.rm=T#
											)#
				Z[[i]][j, "S_PC"] 			<- L$PC_S[j]#
				# Height - if plot survey height is NA, then replace with max height from plant surveys#
				Z[[i]][j, "S_H"] <- ifelse(#
					is.na(L$H_S[j]) & dim(S)[1] > 0, #
					max(S$Max_Height, na.rm=T), #
					L$H_S[j]#
				)#
			}#
		}	#
	}#
	A <- do.call(rbind.data.frame, Z)#
	names(A)[1] <- "Tag_Number"#
	#  FIX DATA FORMAT#
	A[,c(column_list,#
		"P_plot_survey", #
		"P_PC", #
		"P_H", #
		"S_plot_survey", #
		"S_PC", #
		"S_H")] %<>%#
		apply(., 2, as.numeric#
	)#
	A[,c(column_list,#
		"P_plot_survey", #
		"P_PC", #
		"P_H", #
		"S_plot_survey", #
		"S_PC", #
		"S_H")] %<>%#
		apply(., 2, NA_Function#
	)#
	return(A)#
}#
#
#' fill demogr
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
A <- mergePlantSurveysPlotSurveys(Plot_Surveys, Plant_Surveys)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
temp_A = filter(#
		Plot_Surveys, #
		Date > "2012-12-01", Tag_Number %in% Plant_Surveys$Tag_Number#
	)#
	Z = list()
i=1
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
L = filter(temp_A, Tag_Number==unique(temp_A$Tag_Number)[i])#
		Z[[i]] <- as.data.frame(matrix(NA,length(L$Date),1))#
		Z[[i]][, 1] 					<- L$Tag_Number[1]#
		Z[[i]][, "Date"] 				<- L$Date#
		Z[[i]][, "Pictures"] 			<- L$Pictures#
		Z[[i]][, "PictureDirection"] 	<- L$PictureDirection#
		Z[[i]][, "Notes"] 				<- L$Notes#
		# for each date
L
head(Plot_Surveys)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
temp_A = filter(#
		Plot_Surveys, #
		Date > "2012-12-01", Tag_Number %in% Plant_Surveys$Tag_Number#
	)
dim(temp_A)
head(Plant_Surveys)
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys#
#
# --------------------------------------------------------------------------- ##
# --------------------------------------------------------------------------- ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info) %>%#
	processPlantSurveysafterMergewPlantInfo
head(v)
head(Plant_Surveys)
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys#
#
# --------------------------------------------------------------------------- ##
# --------------------------------------------------------------------------- ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info)
head(Plant_Surveys)
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys#
#
# --------------------------------------------------------------------------- ##
# --------------------------------------------------------------------------- ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info) %>%#
	processPlantSurveysafterMergewPlantInfo#
Plant_Surveys_by_Plant <- Plant_Surveys %>% processSurveysMergedbyPlant
setwd('/Users/KSauby/Documents/Projects')
setwd("./dataproc")#
#setwd("./modresproc")#
#devtools::test()#
devtools::document()#
devtools::install()
setwd('/Users/KSauby/Documents/Projects')
setwd("./dataproc")#
#setwd("./modresproc")#
#devtools::test()#
devtools::document()#
devtools::install()
setwd('/Users/KSauby/Documents/Projects')
setwd("./dataproc")#
#setwd("./modresproc")#
#devtools::test()#
devtools::document()#
devtools::install()
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Surveys 	%<>% mutate(Tag_Date=paste(Tag_Number, Date))#
	Plot_Surveys 	%<>% mutate(Tag_Date=paste(Tag_Number, Date))#
	D_Plot_Surveys 	%<>% mutate(Tag_Date=paste(Tag_Number, Date))#
	# keep records of Tag Numbers not surveyed on particular dates#
	temp.plant.surveys <- filter(#
		Plant_Surveys_All, #
		!(Tag_Date %in% Plot_Surveys_All$Tag_Date),#
		!(Tag_Date %in% D_Plot_Surveys$Tag_Date)#
	)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
#' Process Plot Survey Data#
#'#
#' @description Steps:#
#' \itemize{#
#'  \item fix Cluster variable name#
#'  \item include "In Demography Study" information#
#'  \item add vegetation information#
#'  \item add elevation, distance to water information#
#'  \item limit to only plots still in study#
#'  \item make coordinates numeric#
#' 	}#
#'#
#' @export#
#
processOccupancyPlotInfo <- function(Plot_Info) {#
	#--------------------------------------- Misc#
	# fix Cluster name#
	"Cluster" -> Plot_Info$Sampling[which(Plot_Info$Sampling=="Clusters")]#
	Plot_Info$Island %<>% as.factor#
	# file with ALL plots#
	# Plot_Info_All <- Plot_Info#
	#--------------------------------- include "In Demography Study" information#
	Plot_Info %<>% merge(ClustersInDemographicStudy, by = "Cluster", all=T)#
	# change NA to "no"#
	Plot_Info$InDemographicStudy[which(is.na(Plot_Info$InDemographicStudy))] <- "no"#
	# ---------------------------------------- ADD VEGETATION INFO ----------- ##
	# has two records for 1572#
	Plot_Info %<>% merge(Plot.Vegetation, by="Tag_Number", all=T)#
	# ---------------------------------------- ADD GIS INFO ------------------ ##
	# GIS_data_updated has remote sensing information, including elevation, dist_water#
	Plot_Info %<>% merge(GIS_data_updated, by="Tag_Number", all=T)#
	# limit to only plots still in study#
	Plot_Info %<>% filter(RemovedFromStudy!="Yes")#
	# make coordinates numeric#
	Plot_Info[,c(#
		"Easting", #
		"Northing")] %<>% #
		apply(., 2, as.numeric#
	)#
	return(Plot_Info)	#
}#
#
#' Process Plot Survey Data#
#'#
#' @description Steps:#
#' \itemize{#
	#'  \item limit to only plots still in study#
	#'  \item format date#
	#'  \item Change Yes/No to 1/0#
	#'  \item make variables numeric#
	#'  \item If pusilla is not present, change all pusilla-dependent data to NA#
	#'  \item If stricta is not present, change all stricta-dependent data to NA#
#' 	}#
#'#
#' @export#
#
processOccupancyPlotSurveys <- function(Plot_Surveys) {#
	# ---------------------------- LIMIT TO ONLY SURVEYS OF PLOTS STILL IN STUDY#
	# Plot_Surveys_All <- Plot_Surveys#
	Plot_Surveys %<>% .[(.$Tag_Number %in% Plot_Info$Tag_Number), ]#
	# -------------------------------------------------------------- FORMAT DATE#
	Plot_Surveys$Date %<>% Format_Date_Function#
	# -------------------------------------------------- CHANGE YES, NO to 0, 1 #
	Plot_Surveys[,c(#
		"Ammophila",#
		"CACA_on_Ammo",#
		"MEPR_on_Ammo",#
		"CHVI_on_Ammo",#
		"DACT_on_Ammo",#
		"UnknwnMoth_on_Ammo",#
		"Old_Moth_Evidence_Ammophila",#
		"Pusilla",#
		"CACA_on_Pusilla",#
		"MEPR_on_Pusilla",#
		"CHVI_on_Pusilla",#
		"DACT_on_Pusilla",#
		"UnknwnMoth_on_Pusilla",#
		"Old_Moth_Evidence_Pusilla",#
		"Stricta",#
		"CACA_on_Stricta",#
		"MEPR_on_Stricta",#
		"CHVI_on_Stricta",#
		"DACT_on_Stricta",#
		"UnknwnMoth_on_Stricta",#
		"Old_Moth_Evidence_Stricta")] %<>% #
		apply(., 2, Yes_Function#
	)#
	Plot_Surveys[,c(#
		"Ammophila",#
		"CACA_on_Ammo",#
		"MEPR_on_Ammo",#
		"CHVI_on_Ammo",#
		"DACT_on_Ammo",#
		"UnknwnMoth_on_Ammo",#
		"Old_Moth_Evidence_Ammophila",#
		"Pusilla",#
		"CACA_on_Pusilla",#
		"MEPR_on_Pusilla",#
		"CHVI_on_Pusilla",#
		"DACT_on_Pusilla",#
		"UnknwnMoth_on_Pusilla",#
		"Old_Moth_Evidence_Pusilla",#
		"Stricta",#
		"CACA_on_Stricta",#
		"MEPR_on_Stricta",#
		"CHVI_on_Stricta",#
		"DACT_on_Stricta",#
		"UnknwnMoth_on_Stricta",#
		"Old_Moth_Evidence_Stricta")] %<>%#
		apply(., 2, No_Function#
	)#
	Plot_Surveys[,c(#
		"Ammophila",#
		"CACA_on_Ammo",#
		"MEPR_on_Ammo",#
		"CHVI_on_Ammo",#
		"DACT_on_Ammo",#
		"UnknwnMoth_on_Ammo",#
		"Old_Moth_Evidence_Ammophila",#
		"Pusilla",#
		"CACA_on_Pusilla",#
		"MEPR_on_Pusilla",#
		"CHVI_on_Pusilla",#
		"DACT_on_Pusilla",#
		"UnknwnMoth_on_Pusilla",#
		"Old_Moth_Evidence_Pusilla",#
		"Stricta",#
		"CACA_on_Stricta",#
		"MEPR_on_Stricta",#
		"CHVI_on_Stricta",#
		"DACT_on_Stricta",#
		"UnknwnMoth_on_Stricta",#
		"Old_Moth_Evidence_Stricta")] %<>% #
		apply(., 2, NA_Function#
	)#
	# ------------------------------------------------------------- MAKE NUMERIC#
	Plot_Surveys[,c(#
		"Ammophila",#
		"CACA_on_Ammo",#
		"MEPR_on_Ammo",#
		"CHVI_on_Ammo",#
		"DACT_on_Ammo",#
		"UnknwnMoth_on_Ammo",#
		"Old_Moth_Evidence_Ammophila",#
		"Pusilla",#
		"CACA_on_Pusilla",#
		"MEPR_on_Pusilla",#
		"CHVI_on_Pusilla",#
		"DACT_on_Pusilla",#
		"UnknwnMoth_on_Pusilla",#
		"Old_Moth_Evidence_Pusilla",#
		"Stricta",#
		"CACA_on_Stricta",#
		"MEPR_on_Stricta",#
		"CHVI_on_Stricta",#
		"DACT_on_Stricta",#
		"UnknwnMoth_on_Stricta",#
		"Old_Moth_Evidence_Stricta")] %<>% #
		apply(., 2, as.numeric#
	)#
	# ------------------ CHANGE CACTUS DEPENDENT DATA TO NA IF CACTI NOT PRESENT#
	# If pusilla is not present, change all pusilla-dependent data to NA#
	Plot_Surveys_Pusilla_1 <- Plot_Surveys %>% filter(Pusilla==1)#
	Plot_Surveys_Pusilla_0 <- Plot_Surveys %>% #
		filter(Pusilla==0 | is.na(Pusilla))#
	Plot_Surveys_Pusilla_0[,c(#
		"CACA_on_Pusilla",#
		"MEPR_on_Pusilla",#
		"CHVI_on_Pusilla",#
		"DACT_on_Pusilla",#
		"UnknwnMoth_on_Pusilla",#
		"Old_Moth_Evidence_Pusilla",#
		"Old_Moth_Evidence_recent_Pusilla",#
		"Percent_Cover_Pusilla",#
		"Height_Pusilla")] %<>% #
		apply(2, NA_Function#
	)#
	Plot_Surveys <- rbind(Plot_Surveys_Pusilla_1, Plot_Surveys_Pusilla_0)#
	# If stricta is not present, change all stricta-dependent data to NA#
	Plot_Surveys_Stricta_1 <- Plot_Surveys %>% filter(Stricta==1)#
	Plot_Surveys_Stricta_0 <- Plot_Surveys %>% #
		filter(Stricta==0 | is.na(Stricta))#
	Plot_Surveys_Stricta_0[,c(#
		"CACA_on_Stricta",#
		"MEPR_on_Stricta",#
		"CHVI_on_Stricta",#
		"DACT_on_Stricta",#
		"UnknwnMoth_on_Stricta",#
		"Old_Moth_Evidence_Stricta",#
		"Old_Moth_Evidence_recent_Stricta",#
		"Percent_Cover_Stricta",#
		"Height_Stricta")] %<>% #
		apply(2, NA_Function#
	)#
	Plot_Surveys <- rbind(Plot_Surveys_Stricta_1, Plot_Surveys_Stricta_0)#
	# ------------------------------------------------------------------------ ##
	return(Plot_Surveys)#
}#
#' fill occupancy plot surveys with info from plant surveys#
#' @description This data is from when I was specifically doing occupancy plot surveys.#
#' Specific rules for filling the plot surveys:#
#' \itemize{#
#'  \item percent cover: get from plot survey data; if no plot survey data for that tag number and date, fill with NA#
#'  \item height: get from plot survey data; if it was not recorded in the plot survey then use max. plant height from the plant survey data#
#'  \item insect presence/absence: get from plot survey data; if it was not recorded in the plot survey then use max. plant height from the plant survey data#
#'  \item limit to plot surveys after Dec. 2, 2012 (I wasn't surveying individual plants before this)#
#'  \item limit to Tag_Numbers that have marked plants#
#' }#
#' @param Plot_Surveys#
#' @param Plant_Surveys#
#' @export#
#
mergePlantSurveysPlotSurveys <- function(Plot_Surveys, Plant_Surveys) {#
	temp_A = filter(#
		Plot_Surveys, #
		Date > "2012-12-01", Tag_Number %in% Plant_Surveys$Tag_Number#
	)#
	Z = list()#
	# for each tag number in the plot surveys data#
	for (i in 1:length(unique(temp_A$Tag_Number))) {#
		# pull all records for this Tag Number from plot surveys#
		L = filter(temp_A, Tag_Number==unique(temp_A$Tag_Number)[i])#
		Z[[i]] <- as.data.frame(matrix(NA,length(L$Date),1))#
		Z[[i]][, 1] 					<- L$Tag_Number[1]#
		Z[[i]][, "Date"] 				<- L$Date#
		Z[[i]][, "Pictures"] 			<- L$Pictures#
		Z[[i]][, "PictureDirection"] 	<- L$PictureDirection#
		Z[[i]][, "Notes"] 				<- L$Notes#
		# for each date#
		for (j in 1:dim(L)[1]) {#
			# fill with occupancy survey data#
			Z[[i]][j, "P_plot_survey"] 	<- L$Pusilla[j]#
			Z[[i]][j, "P_plant_survey"] <-  "NA"#
			Z[[i]][j, "P_Ca"] 			<- L$Ca_P[j]#
			Z[[i]][j, "P_Me"] 			<- L$Me_P[j]#
			Z[[i]][j, "P_Ch"] 			<- L$Ch_P[j]#
			Z[[i]][j, "P_Umoth"] 		<- L$Umoth_P[j]#
			Z[[i]][j, "P_Omoth"] 		<- L$Omoth_P[j]#
			Z[[i]][j, "P_PC"] 			<- L$PC_P[j]#
			Z[[i]][j, "P_H"] 			<- L$H_P[j]#
			Z[[i]][j, "S_plot_survey"] 	<- L$Stricta[j]#
			Z[[i]][j, "S_plant_survey"] <- "NA"#
			Z[[i]][j, "S_Ca"] 			<- L$Ca_S[j]#
			Z[[i]][j, "S_Me"] 			<- L$Me_S[j]#
			Z[[i]][j, "S_Ch"] 			<- L$Ch_S[j]#
			Z[[i]][j, "S_Umoth"] 		<- L$Umoth_S[j]#
			Z[[i]][j, "S_Omoth"] 		<- L$Omoth_S[j]#
			Z[[i]][j, "S_PC"] 			<- L$PC_S[j]#
			Z[[i]][j, "S_H"] 			<- L$H_S[j]#
			# pull all plant survey records for this Tag Number and date from plant surveys#
			M = filter(Plant_Surveys_All, #
				Tag_Number==L$Tag_Number[1], #
				Date==unique(L$Date)[j],#
				# remove plants marked as dead#
				Dead!=1)#
			# remove plants marked as missing	#
			M = M[which(M$Missing!=1 | is.na(M$Missing)==T), ]#
			# if there is plant survey data for this date, update the occupancy survey data#
			# if the M dataframe has at least one row of data:#
			if (dim(M)[1] > 0) {#
				P = filter(M, HostSpecies=="pusilla")#
				Z[[i]][j, "P_plot_survey"] 	<- L$Pusilla[j]#
				Z[[i]][j, "P_plant_survey"] <- ifelse(dim(P)[1] > 0, 1, 0)#
				Z[[i]][j, "P_Ca"] 			<- max(P$CA_t, L[j,]$Ca_P, na.rm=T)#
				Z[[i]][j, "P_Me"] 			<- max(P$ME_t, L[j,]$Me_P, na.rm=T)#
				Z[[i]][j, "P_Ch"] 			<- max(P$CH_t, L[j,]$Ch_P, na.rm=T)#
				Z[[i]][j, "P_Umoth"] 		<- max(#
												P$Unknown_Moth_t, #
												L[j,]$Umoth_P, na.rm=T#
											)#
				Z[[i]][j, "P_Omoth"] 		<- max(#
												P$Old_Moth_Evidence_t, #
												L[j,]$Omoth_P, na.rm=T#
											)#
				Z[[i]][j, "P_PC"] 			<- L$PC_P[j]#
				# Height - if plot survey height is NA, then replace with max height from plant surveys#
				Z[[i]][j, "P_H"] 			<- ifelse(#
												is.na(L$H_P[j]) & dim(P)[1] > 0,#
												max(P$Max_Height, na.rm=T), #
												L$H_P[j]#
											) #
				S = filter(M, HostSpecies=="stricta")#
				Z[[i]][j, "S_plot_survey"] 	<- L$Stricta[j]#
				Z[[i]][j, "S_plant_survey"] <- ifelse(dim(S)[1] > 0, 1, 0)#
				Z[[i]][j, "S_Ca"] 			<- max(S$CA_t, L[j,]$Ca_S, na.rm=T)#
				Z[[i]][j, "S_Me"] 			<- max(S$ME_t, L[j,]$Me_S, na.rm=T)#
				Z[[i]][j, "S_Ch"] 			<- max(S$CH_t, L[j,]$Ch_S, na.rm=T)#
				Z[[i]][j, "S_Umoth"] 		<- max(#
												S$Unknown_Moth_t, #
												L[j,]$Umoth_S, #
												na.rm=T#
											)#
				Z[[i]][j, "S_Omoth"] 		<- max(#
												S$Old_Moth_Evidence_t, #
												L[j,]$Omoth_S,#
												na.rm=T#
											)#
				Z[[i]][j, "S_PC"] 			<- L$PC_S[j]#
				# Height - if plot survey height is NA, then replace with max height from plant surveys#
				Z[[i]][j, "S_H"] <- ifelse(#
					is.na(L$H_S[j]) & dim(S)[1] > 0, #
					max(S$Max_Height, na.rm=T), #
					L$H_S[j]#
				)#
			}#
		}	#
	}#
	A <- do.call(rbind.data.frame, Z)#
	names(A)[1] <- "Tag_Number"#
	#  FIX DATA FORMAT#
	A[,c(column_list,#
		"P_plot_survey", #
		"P_PC", #
		"P_H", #
		"S_plot_survey", #
		"S_PC", #
		"S_H")] %<>%#
		apply(., 2, as.numeric#
	)#
	A[,c(column_list,#
		"P_plot_survey", #
		"P_PC", #
		"P_H", #
		"S_plot_survey", #
		"S_PC", #
		"S_H")] %<>%#
		apply(., 2, NA_Function#
	)#
	return(A)#
}#
#
#' fill demography plot surveys with info from plant surveys#
#' @description I only entered a plot as surveyed in this dataset if I had completely marked/surveyed all plants in the plot. I entered data in this dataset near the beginning of the demography study, when I was setting the study up.#
#' Specific rules for filling the plot surveys:#
#' \itemize{#
#'  \item only use demography plot surveys that are not a duplicate of the occupancy plot surveys#
#' }#
#' @param D_Plot_Surveys#
#' @param Plant_Surveys#
#' @export#
#
mergePlotSurveysDemoPlotSurveys <- function(D_Plot_Surveys, Plant_Surveys) {#
	Z = list()#
	# for each tag number in the demography plot survey data#
	for (i in 1:length(unique(D_Plot_Surveys$Tag_Number))) {#
		# pull all records for this Tag Number from plot surveys#
		L = filter(#
			D_Plot_Surveys, #
			Tag_Number==unique(D_Plot_Surveys$Tag_Number)[i]#
		)#
		Z[[i]] 			<- as.data.frame(matrix(NA,length(unique(L$Date)),1))#
		Z[[i]][, 1] 	<- L$Tag_Number[1]#
		Z[[i]][, "Date"] <- unique(L$Date)#
		# for each date#
		for (j in 1:length(unique(L$Date))) {#
			# pull all plant survey records for this Tag Number and date from plant surveys#
			M = filter(#
				Plant_Surveys, #
				Tag_Number==L$Tag_Number[1], #
				Date==unique(L$Date)[j],#
				# remove plants marked as dead#
				Dead!=1#
			)#
			# remove plants marked as missing	#
			M = M[which(M$Missing!=1 | is.na(M$Missing)==T), ]#
			P = filter(M, HostSpecies=="pusilla")#
			Z[[i]][j, "P_plant_survey"] <-  ifelse(dim(P)[1] > 0, 1, 0) #
			Z[[i]][j, "P_Ca"] 			<-  max(P$CACA_t, na.rm=T) #
			Z[[i]][j, "P_Me"] 			<-  max(P$MEPR_t, na.rm=T) #
			Z[[i]][j, "P_Ch"] 			<-  max(P$CHVI_t, na.rm=T) #
			Z[[i]][j, "P_Umoth"] 		<-  max(P$Unknown_Moth_t, na.rm=T) #
			Z[[i]][j, "P_Omoth"] 		<-  max(P$Old_Moth_Evidence_t, na.rm=T) #
			Z[[i]][j, "P_H"] 			<- max(P$Max_Height, na.rm=T)#
			S = filter(M, HostSpecies=="stricta")#
			Z[[i]][j, "S_plant_survey"] <- ifelse(dim(S)[1] > 0, 1, 0) #
			Z[[i]][j, "S_Ca"] 			<- max(S$CACAt, na.rm=T) #
			Z[[i]][j, "S_Me"] 			<- max(S$MEPR_t, na.rm=T) #
			Z[[i]][j, "S_Ch"] 			<- max(S$CHVI_t, na.rm=T) #
			Z[[i]][j, "S_Umoth"] 		<- max(S$Unknown_Moth_t, na.rm=T) #
			Z[[i]][j, "S_Omoth"] 		<- max(S$Old_Moth_Evidence_t, na.rm=T) #
			Z[[i]][j, "S_H"] 			<- max(S$Max_Height, na.rm=T)#
		}#
	}#
	B <- do.call(rbind.data.frame, Z)#
	names(B)[1] <- "Tag_Number"#
	#  FIX DATA FORMAT#
	B[,c(#
		column_list,#
		"P_H", #
		"S_H")] %<>%#
		apply(., 2, as.numeric#
	)#
	B[,c(#
		column_list,#
		"P_H",  #
		"S_H")] %<>%#
		apply(., 2, NA_Function#
	)#
	return(B)	#
}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
#' @export#
#
createPlotSurveysfromPlantSurveys <- function(Plant_Surveys, Plot_Surveys, D_Plot_Surveys) {#
	# create Tag/Date Combo Field#
	Plant_Surveys 	%<>% mutate(Tag_Date=paste(Tag_Number, Date))#
	Plot_Surveys 	%<>% mutate(Tag_Date=paste(Tag_Number, Date))#
	D_Plot_Surveys 	%<>% mutate(Tag_Date=paste(Tag_Number, Date))#
	# keep records of Tag Numbers not surveyed on particular dates#
	temp.plant.surveys <- filter(#
		Plant_Surveys_All, #
		!(Tag_Date %in% Plot_Surveys_All$Tag_Date),#
		!(Tag_Date %in% D_Plot_Surveys$Tag_Date)#
	)#
	# print plants with Tag_Number==NA as warning#
	warning("Plants with Tag_Number==NA:"#
		print(filter(#
			temp.plant.surveys, #
			is.na(temp.plant.surveys$Tag_Number)==TRUE)$PlantID#
		)#
	)#
	# remove plants with Tag_Number==NA#
	temp.plant.surveys <- filter(#
		temp.plant.surveys, #
		is.na(temp.plant.surveys$Tag_Number)==FALSE#
	)#
	Z = list()#
	# for each tag number in the demography plot survey data#
	for (i in 1:length(unique(temp.plant.surveys$Tag_Number))) {#
		# pull all records for this Tag Number from temp.plant.surveys#
		L = filter(#
			temp.plant.surveys, #
			Tag_Number==unique(temp.plant.surveys$Tag_Number)[i]#
		)#
		Z[[i]] 			<- as.data.frame(matrix(NA,length(unique(L$Date)),1))	#
		Z[[i]][, 1] 	<- L$Tag_Number[1]#
		Z[[i]][, "Date"] <- unique(L$Date)#
		# for each date#
		for (j in 1:length(unique(L$Date))) {#
			# pull all plant survey records for this Tag Number and date from plant surveys remove plants marked as missing or dead	#
			M = filter(L, Date==unique(L$Date)[j], Dead!=1)#
			M = M[which(M$Missing!=1 | is.na(M$Missing)==T), ]#
			# get list of PlantIDs for this plot#
			N = filter(#
				Plant_Info, #
				Tag_Number==L$Tag_Number[1], #
				# only include plants that are listed as having been added to Plant.Info on or after Date#
				First.Survey.Date <= unique(L$Date)[j],#
				# exclude dead plants (including date plant was first recorded as dead)#
				FirstDeadMissingObservation > unique(L$Date)[j] | #
					is.na(FirstDeadMissingObservation)==T#
			)#
			# if all PlotPlantIDs were surveyed for a given date:#
			if (identical(#
				M$PlotPlantID[order(M$PlotPlantID)], #
				N$PlotPlantID[order(N$PlotPlantID)]#
			)==T) {#
				P = filter(M, HostSpecies=="pusilla")#
				Z[[i]][j, "P_plant_survey"] <- ifelse(dim(P)[1] > 0, 1, 0) #
				Z[[i]][j, "P_Ca"] 			<- max(P$CACA_t, na.rm=T) #
				Z[[i]][j, "P_Me"] 			<- max(P$MEPR_t, na.rm=T) #
				Z[[i]][j, "P_Ch"] 			<- max(P$CHVI_t, na.rm=T) #
				Z[[i]][j, "P_Umoth"] 		<- max(P$Unknown_Moth_t, na.rm=T) #
				Z[[i]][j, "P_Omoth"] 		<- max(P$Old_Moth_Evidence_t, na.rm=T) #
				S = filter(M, HostSpecies=="stricta")#
				Z[[i]][j, "S_plant_survey"] <- ifelse(dim(S)[1] > 0, 1, 0) #
				Z[[i]][j, "S_Ca"] 			<- max(S$CACA_t, na.rm=T) #
				Z[[i]][j, "S_Me"] 			<- max(S$MEPR_t, na.rm=T) #
				Z[[]][j, "S_Ch"] 			<- max(S$CHVI_t, na.rm=T) #
				Z[[i]][j, "S_Umoth"] 		<- max(S$Unknown_Moth_t, na.rm=T) #
				Z[[i]][j, "S_Omoth"] 		<- max(S$Old_Moth_Evidence_t, na.rm=T)#
			} #
			# if all PlotPlantIDs were NOT surveyed on this date#
			else {#
				P = filter(M, HostSpecies=="pusilla")#
				Z[[i]][j, "P_plant_survey"] <- ifelse(dim(P)[1] > 0, 1, NA) #
				Z[[i]][j, "P_Ca"] 			<- mysum1(P$CACA_t)#
				Z[[i]][j, "P_Me"] 			<- mysum1(P$MEPR_t)#
				Z[[i]][j, "P_Ch"] 			<- mysum1(P$CHVI_t)#
				Z[[i]][j, "P_Umoth"] 		<- mysum1(P$Unknown_Moth_t)#
				Z[[i]][j, "P_Omoth"] 		<- mysum1(P$Old_Moth_Evidence_t)#
				S = filter(M, HostSpecies=="stricta")#
				Z[[i]][j, "S_plant_survey"] <- ifelse(dim(S)[1] > 0, 1, NA) #
				Z[[i]][j, "S_Ca"] 			<- mysum1(S$CACA_t)#
				Z[[i]][j, "S_Me"] 			<- mysum1(S$MEPR_t)#
				Z[[i]][j, "S_Ch"] 			<- mysum1(S$CHVI_t)#
				Z[[i]][j, "S_Umoth"] 		<- mysum1(S$Unknown_Moth_t)#
				Z[[i]][j, "S_Omoth"] 		<- mysum1(S$Old_Moth_Evidence_t)#
			}#
		}#
	}	#
	C <- do.call(rbind.data.frame, Z)#
	names(C)[1] <- "Tag_Number"#
	# FIX DATA FORMAT#
	C[, column_list] %<>% apply(., 2, as.numeric)#
	C[, column_list] %<>% apply(., 2, NA_Function)#
	return(C)	#
}#
#
#' Crea
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
mergePlantSurveysPlotSurveys <- function(Plot_Surveys, Plant_Surveys) {#
	temp_A = filter(#
		Plot_Surveys, #
		Date > "2012-12-01", Tag_Number %in% Plant_Surveys$Tag_Number#
	)#
	Z = list()#
	# for each tag number in the plot surveys data#
	for (i in 1:length(unique(temp_A$Tag_Number))) {#
		# pull all records for this Tag Number from plot surveys#
		L = filter(temp_A, Tag_Number==unique(temp_A$Tag_Number)[i])#
		Z[[i]] <- as.data.frame(matrix(NA,length(L$Date),1))#
		Z[[i]][, 1] 					<- L$Tag_Number[1]#
		Z[[i]][, "Date"] 				<- L$Date#
		Z[[i]][, "Pictures"] 			<- L$Pictures#
		Z[[i]][, "PictureDirection"] 	<- L$PictureDirection#
		Z[[i]][, "Notes"] 				<- L$Notes#
		# for each date#
		for (j in 1:dim(L)[1]) {#
			# fill with occupancy survey data#
			Z[[i]][j, "P_plot_survey"] 	<- L$Pusilla[j]#
			Z[[i]][j, "P_plant_survey"] <-  "NA"#
			Z[[i]][j, "P_Ca"] 			<- L$Ca_P[j]#
			Z[[i]][j, "P_Me"] 			<- L$Me_P[j]#
			Z[[i]][j, "P_Ch"] 			<- L$Ch_P[j]#
			Z[[i]][j, "P_Umoth"] 		<- L$Umoth_P[j]#
			Z[[i]][j, "P_Omoth"] 		<- L$Omoth_P[j]#
			Z[[i]][j, "P_PC"] 			<- L$PC_P[j]#
			Z[[i]][j, "P_H"] 			<- L$H_P[j]#
			Z[[i]][j, "S_plot_survey"] 	<- L$Stricta[j]#
			Z[[i]][j, "S_plant_survey"] <- "NA"#
			Z[[i]][j, "S_Ca"] 			<- L$Ca_S[j]#
			Z[[i]][j, "S_Me"] 			<- L$Me_S[j]#
			Z[[i]][j, "S_Ch"] 			<- L$Ch_S[j]#
			Z[[i]][j, "S_Umoth"] 		<- L$Umoth_S[j]#
			Z[[i]][j, "S_Omoth"] 		<- L$Omoth_S[j]#
			Z[[i]][j, "S_PC"] 			<- L$PC_S[j]#
			Z[[i]][j, "S_H"] 			<- L$H_S[j]#
			# pull all plant survey records for this Tag Number and date from plant surveys#
			M = filter(Plant_Surveys_All, #
				Tag_Number==L$Tag_Number[1], #
				Date==unique(L$Date)[j],#
				# remove plants marked as dead#
				Dead!=1)#
			# remove plants marked as missing	#
			M = M[which(M$Missing!=1 | is.na(M$Missing)==T), ]#
			# if there is plant survey data for this date, update the occupancy survey data#
			# if the M dataframe has at least one row of data:#
			if (dim(M)[1] > 0) {#
				P = filter(M, HostSpecies=="pusilla")#
				Z[[i]][j, "P_plot_survey"] 	<- L$Pusilla[j]#
				Z[[i]][j, "P_plant_survey"] <- ifelse(dim(P)[1] > 0, 1, 0)#
				Z[[i]][j, "P_Ca"] 			<- max(P$CA_t, L[j,]$Ca_P, na.rm=T)#
				Z[[i]][j, "P_Me"] 			<- max(P$ME_t, L[j,]$Me_P, na.rm=T)#
				Z[[i]][j, "P_Ch"] 			<- max(P$CH_t, L[j,]$Ch_P, na.rm=T)#
				Z[[i]][j, "P_Umoth"] 		<- max(#
												P$Unknown_Moth_t, #
												L[j,]$Umoth_P, na.rm=T#
											)#
				Z[[i]][j, "P_Omoth"] 		<- max(#
												P$Old_Moth_Evidence_t, #
												L[j,]$Omoth_P, na.rm=T#
											)#
				Z[[i]][j, "P_PC"] 			<- L$PC_P[j]#
				# Height - if plot survey height is NA, then replace with max height from plant surveys#
				Z[[i]][j, "P_H"] 			<- ifelse(#
												is.na(L$H_P[j]) & dim(P)[1] > 0,#
												max(P$Max_Height, na.rm=T), #
												L$H_P[j]#
											) #
				S = filter(M, HostSpecies=="stricta")#
				Z[[i]][j, "S_plot_survey"] 	<- L$Stricta[j]#
				Z[[i]][j, "S_plant_survey"] <- ifelse(dim(S)[1] > 0, 1, 0)#
				Z[[i]][j, "S_Ca"] 			<- max(S$CA_t, L[j,]$Ca_S, na.rm=T)#
				Z[[i]][j, "S_Me"] 			<- max(S$ME_t, L[j,]$Me_S, na.rm=T)#
				Z[[i]][j, "S_Ch"] 			<- max(S$CH_t, L[j,]$Ch_S, na.rm=T)#
				Z[[i]][j, "S_Umoth"] 		<- max(#
												S$Unknown_Moth_t, #
												L[j,]$Umoth_S, #
												na.rm=T#
											)#
				Z[[i]][j, "S_Omoth"] 		<- max(#
												S$Old_Moth_Evidence_t, #
												L[j,]$Omoth_S,#
												na.rm=T#
											)#
				Z[[i]][j, "S_PC"] 			<- L$PC_S[j]#
				# Height - if plot survey height is NA, then replace with max height from plant surveys#
				Z[[i]][j, "S_H"] <- ifelse(#
					is.na(L$H_S[j]) & dim(S)[1] > 0, #
					max(S$Max_Height, na.rm=T), #
					L$H_S[j]#
				)#
			}#
		}	#
	}#
	A <- do.call(rbind.data.frame, Z)#
	names(A)[1] <- "Tag_Number"#
	#  FIX DATA FORMAT#
	A[,c(column_list,#
		"P_plot_survey", #
		"P_PC", #
		"P_H", #
		"S_plot_survey", #
		"S_PC", #
		"S_H")] %<>%#
		apply(., 2, as.numeric#
	)#
	A[,c(column_list,#
		"P_plot_survey", #
		"P_PC", #
		"P_H", #
		"S_plot_survey", #
		"S_PC", #
		"S_H")] %<>%#
		apply(., 2, NA_Function#
	)#
	return(A)#
}#
#
#' fill demography plot surveys wit
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
processOccupancyPlotSurveys <- function(Plot_Surveys) {#
	# ---------------------------- LIMIT TO ONLY SURVEYS OF PLOTS STILL IN STUDY#
	# Plot_Surveys_All <- Plot_Surveys#
	Plot_Surveys %<>% .[(.$Tag_Number %in% Plot_Info$Tag_Number), ]#
	# -------------------------------------------------------------- FORMAT DATE#
	Plot_Surveys$Date %<>% Format_Date_Function#
	# -------------------------------------------------- CHANGE YES, NO to 0, 1 #
	Plot_Surveys[,c(#
		"Ammophila",#
		"CACA_on_Ammo",#
		"MEPR_on_Ammo",#
		"CHVI_on_Ammo",#
		"DACT_on_Ammo",#
		"UnknwnMoth_on_Ammo",#
		"Old_Moth_Evidence_Ammophila",#
		"Pusilla",#
		"CACA_on_Pusilla",#
		"MEPR_on_Pusilla",#
		"CHVI_on_Pusilla",#
		"DACT_on_Pusilla",#
		"UnknwnMoth_on_Pusilla",#
		"Old_Moth_Evidence_Pusilla",#
		"Stricta",#
		"CACA_on_Stricta",#
		"MEPR_on_Stricta",#
		"CHVI_on_Stricta",#
		"DACT_on_Stricta",#
		"UnknwnMoth_on_Stricta",#
		"Old_Moth_Evidence_Stricta")] %<>% #
		apply(., 2, Yes_Function#
	)#
	Plot_Surveys[,c(#
		"Ammophila",#
		"CACA_on_Ammo",#
		"MEPR_on_Ammo",#
		"CHVI_on_Ammo",#
		"DACT_on_Ammo",#
		"UnknwnMoth_on_Ammo",#
		"Old_Moth_Evidence_Ammophila",#
		"Pusilla",#
		"CACA_on_Pusilla",#
		"MEPR_on_Pusilla",#
		"CHVI_on_Pusilla",#
		"DACT_on_Pusilla",#
		"UnknwnMoth_on_Pusilla",#
		"Old_Moth_Evidence_Pusilla",#
		"Stricta",#
		"CACA_on_Stricta",#
		"MEPR_on_Stricta",#
		"CHVI_on_Stricta",#
		"DACT_on_Stricta",#
		"UnknwnMoth_on_Stricta",#
		"Old_Moth_Evidence_Stricta")] %<>%#
		apply(., 2, No_Function#
	)#
	Plot_Surveys[,c(#
		"Ammophila",#
		"CACA_on_Ammo",#
		"MEPR_on_Ammo",#
		"CHVI_on_Ammo",#
		"DACT_on_Ammo",#
		"UnknwnMoth_on_Ammo",#
		"Old_Moth_Evidence_Ammophila",#
		"Pusilla",#
		"CACA_on_Pusilla",#
		"MEPR_on_Pusilla",#
		"CHVI_on_Pusilla",#
		"DACT_on_Pusilla",#
		"UnknwnMoth_on_Pusilla",#
		"Old_Moth_Evidence_Pusilla",#
		"Stricta",#
		"CACA_on_Stricta",#
		"MEPR_on_Stricta",#
		"CHVI_on_Stricta",#
		"DACT_on_Stricta",#
		"UnknwnMoth_on_Stricta",#
		"Old_Moth_Evidence_Stricta")] %<>% #
		apply(., 2, NA_Function#
	)#
	# ------------------------------------------------------------- MAKE NUMERIC#
	Plot_Surveys[,c(#
		"Ammophila",#
		"CACA_on_Ammo",#
		"MEPR_on_Ammo",#
		"CHVI_on_Ammo",#
		"DACT_on_Ammo",#
		"UnknwnMoth_on_Ammo",#
		"Old_Moth_Evidence_Ammophila",#
		"Pusilla",#
		"CACA_on_Pusilla",#
		"MEPR_on_Pusilla",#
		"CHVI_on_Pusilla",#
		"DACT_on_Pusilla",#
		"UnknwnMoth_on_Pusilla",#
		"Old_Moth_Evidence_Pusilla",#
		"Stricta",#
		"CACA_on_Stricta",#
		"MEPR_on_Stricta",#
		"CHVI_on_Stricta",#
		"DACT_on_Stricta",#
		"UnknwnMoth_on_Stricta",#
		"Old_Moth_Evidence_Stricta")] %<>% #
		apply(., 2, as.numeric#
	)#
	# ------------------ CHANGE CACTUS DEPENDENT DATA TO NA IF CACTI NOT PRESENT#
	# If pusilla is not present, change all pusilla-dependent data to NA#
	Plot_Surveys_Pusilla_1 <- Plot_Surveys %>% filter(Pusilla==1)#
	Plot_Surveys_Pusilla_0 <- Plot_Surveys %>% #
		filter(Pusilla==0 | is.na(Pusilla))#
	Plot_Surveys_Pusilla_0[,c(#
		"CACA_on_Pusilla",#
		"MEPR_on_Pusilla",#
		"CHVI_on_Pusilla",#
		"DACT_on_Pusilla",#
		"UnknwnMoth_on_Pusilla",#
		"Old_Moth_Evidence_Pusilla",#
		"Old_Moth_Evidence_recent_Pusilla",#
		"Percent_Cover_Pusilla",#
		"Height_Pusilla")] %<>% #
		apply(2, NA_Function#
	)#
	Plot_Surveys <- rbind(Plot_Surveys_Pusilla_1, Plot_Surveys_Pusilla_0)#
	# If stricta is not present, change all stricta-dependent data to NA#
	Plot_Surveys_Stricta_1 <- Plot_Surveys %>% filter(Stricta==1)#
	Plot_Surveys_Stricta_0 <- Plot_Surveys %>% #
		filter(Stricta==0 | is.na(Stricta))#
	Plot_Surveys_Stricta_0[,c(#
		"CACA_on_Stricta",#
		"MEPR_on_Stricta",#
		"CHVI_on_Stricta",#
		"DACT_on_Stricta",#
		"UnknwnMoth_on_Stricta",#
		"Old_Moth_Evidence_Stricta",#
		"Old_Moth_Evidence_recent_Stricta",#
		"Percent_Cover_Stricta",#
		"Height_Stricta")] %<>% #
		apply(2, NA_Function#
	)#
	Plot_Surveys <- rbind(Plot_Surveys_Stricta_1, Plot_Surveys_Stricta_0)#
	# ------------------------------------------------------------------------ ##
	return(Plot_Surveys)#
}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
#' Process Plant Survey Data#
#'#
#' @description Steps:#
#' \itemize{#
#'  \item Fix column names#
#'  \item format dates#
#'  \item format PlantIDs#
#'  \item format convert "999" values to NA#
#'  \item format change "yes"/"no" values of the insect survey, missing, and dead columns to 0/1#
#'  \item format numeric columns#
#'  \item add total segment column#
#'  \item add fruit count column#
#'  \item add fruit/flower count column#
#'  \item check for observations of 0 pads, 0 height, or 0 width; if there are observations, stop#
#' 	}#
#' Column Names:#
#' \itemize{#
#'  \item PlantMeasureID Record number if Microsoft Access database#
#'  \item First_Observer_Initials Initials of primary observer (should always be KS, for Kristen Sauby)#
#'  \item Second_Observer_Initials Initials of secondary observer; CJP - Cory Penca; YP - Yani Paulay; KS - Kristen Sauby; JW: Juliana Welch; CW: Cedric Worman; AP: Adam Payton#
#'  \item Date Date#
#'  \item PlantID Unique number for the individual plant#
#'  \item Plant_collected Were plant samples collected?#
#'  \item Time#
#'  \item PlantPictures identifying numbers of photos taken#
#'  \item PlantPictures_Direction direction that the photo(s) was(were) taken#
#
#'  \item CA_t Presence/absence (1/0) of Cactoblastis cactorum#
#'  \item CACA_collected Were samples of Cactoblastis cactorum collected?#
#'  \item CACA_quantity Number of Cactoblastis cactorum samples collected#
#
#'  \item ME_t Presence/absence (1/0) of Melitara prodenialis#
#'  \item MEPR_collected Were samples of Melitara prodenialis collected?#
#'  \item MEPR_quantity Number of Melitara prodenialis samples collected#
#
#'  \item CH_t Presence/absence (1/0) of Chelinidea vittiger#
#'  \item CHVI_collected Were samples of Chelinidea vittiger collected?#
#'  \item CHVI_quantity Number of Chelinidea vittiger samples collected#
#
#'  \item DA_t Presence/absence (1/0) of Dactylopius species#
#'  \item DACT_collected Were samples of Dactylopius species collected?#
#'  \item DACT_quantity Number of Dactylopius species samples collected#
#
#'  \item Unknown_Moth_t Presence/absence (1/0) of unknown moth#
#'  \item UnknownMoth_collected Were samples of unknown moth collected?#
#'  \item UnknownMoth_quantity Number of unknown moth samples collected#
#
#'  \item Old_Moth_Evidence_t Evidence of past moth infestation#
#'  \item Old_Moth_Evidence_recent Whether evidence of past moth infestation appears recent or old#
#
#'  \item Fungus Presence/absence (1/0) of plant fungal infection#
#'  \item Gerstaeckeria Presence/absence (1/0) of Gerstaeckeria#
#'  \item Plant_Segments_total Number of segments#
#'  \item Plant_Segments_w_leaves New, green segments with leaves#
#'  \item Plant_Segments_wo_leaves Green segments without leaves#
#'  \item Plant_Segments_woody number of woody segments/trunks; these segments are entirely brown on the outside      #
#'  \item Height_t maximum height in cm#
#'  \item Width_t maximum width in cm#
#'  \item Perpen_Width width, perpendicular to max width, in cm#
#'  \item Num_FlowerBuds Number of flower buds#
#'  \item Num_Fruit_red Number of red fruit#
#'  \item Num_Fruit_green Number of green fruit#
#'  \item Num_Flowers Number of flowers#
#'  \item Num_Fruit use this when number is recorded but distinction by color is not made#
#'  \item Pollinators#
#'  \item Spiders#
#'  \item Ants#
#'  \item Other_collected_quantity#
#'  \item Plant_Notes#
#'  \item Insect_Notes        #
#'  \item Other_Notes#
#'  \item Dead Whether the plant is observed to be dead; 0 or 1#
#'  \item Missing#
#'  \item OutsideOfPlot "Yes" if plant is no longer in plot#
#'  \item PlotPlantID Unique number for the individual plant; if a plant is counted in multiple plots, a letter is appended to the plant ID here (e.g., 9606a) and then removed for analysis#
#'  \item Size_t The sum of Plant_Segments_total, Plant_Segments_w_leaves, Plant_Segments_wo_leaves, and Plant_Segments_woody#
#
#'  \item Fruit_t The sum of Num_Fruit_red, Num_Fruit_green, and Num_Fruit#
#'  \item Fruit_Flowers_t The sum of Num_FlowerBuds, Num_Flowers, Num_Fruit_red, Num_Fruit_green, and Num_Fruit#
#' 	}#
#'#
#' @export#
#
processPlantSurveys <- function(Plant_Surveys) {#
	# ------------------------------------------------------------- CHANGE NAMES#
	# remame size and height#
	Plant_Surveys %<>%	as.data.table %>%#
		setnames("Max_Height", 				"Height_t") %>%#
		setnames("Max_Width", 				"Width_t") %>%#
		setnames("CACA_Larvae", 			"CA_t") %>%#
		setnames("MEPR_Larvae", 			"ME_t") %>%#
		setnames("CHVI_Evidence", 			"CH_t") %>%#
		setnames("DACT_Evidence", 			"DA_t") %>%#
		setnames("UnknownMoth_Evidence", 	"Unknown_Moth_t") %>%#
		setnames("Old_Moth_Evidence", 		"Old_Moth_Evidence_t") %>%#
		setnames("DateSurveyed", 			"Date") %>%#
		as.data.frame#
	# formatting/preparation necessary for prepping Demographic Plant Info#
	Plant_Surveys$Date %<>% Format_Date_Function#
	Plant_Surveys %<>% arrange(Date)#
	Plant_Surveys %<>% Format_PlantIDs_Function#
	# ------------------------------------------------ CONVERT ALL "999s" to NAs#
	Plant_Surveys[,c(#
		"Plant_Segments_total", #
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		"Perpen_Width",#
		"Width_t",#
		"Height_t",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------- INSECT SURVEYS, MISSING, DEAD - CHANGE YES, NO to 0, 1#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, Yes_Function#
	)#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>%#
		apply(2, No_Function#
	)#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------------------------------------------------- MAKE NUMERIC#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		"Plant_Segments_total",#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		"Height_t",#
		"Width_t",#
		"Perpen_Width",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, as.numeric#
	)#
	# ------------------------------------------------- ADD TOTAL SEGMENT COLUMN#
	# do this so that plants that have no segments recorded (all NAs) have a total segment count = NA#
	# for those plants that have fewer than four NAs (at least one segment column has a number), sum the segments#
	Plant_Surveys$Size_t <- Plant_Surveys %>%#
							dplyr::select(#
								Plant_Segments_total,#
								Plant_Segments_w_leaves,#
								Plant_Segments_wo_leaves,#
								Plant_Segments_woody#
							) %>%#
							apply(1, mysum)#
	Plant_Surveys$Size_t %<>% Zero_is_NA_Function#
	# --------------------------------------------------------- ADD FRUIT COLUMN#
	Plant_Surveys$Fruit_t <- Plant_Surveys %>%#
							dplyr::select(#
								Num_Fruit_red,#
								Num_Fruit_green,#
								Num_Fruit#
							) %>%#
							apply(1, mysum)#
	Plant_Surveys$Fruit_Flowers_t <- Plant_Surveys %>%#
							dplyr::select(#
								Num_FlowerBuds,#
								Num_Flowers,#
								Num_Fruit_red,#
								Num_Fruit_green,#
								Num_Fruit#
							) %>%#
							apply(1, mysum)#
	# ----------------------------------------------------------- ERROR MESSAGES#
	# There should never be observations of 0 pads, 0 height, or 0 width#
	# replace 0 with NA#
	dups <- Plant_Surveys %>% filter(Size_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Size_t equal 0.")}#
#
	dups <- Plant_Surveys %>% filter(Height_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Height_t equal 0.")}#
#
	dups <- Plant_Surveys %>% filter(Width_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Width_t equal 0.")}#
#
	dups <- Plant_Surveys %>% filter(Perpen_Width==0)#
	if (dim(dups)[1] > 0) {stop("Values for Perpen_Width equal 0.")}#
	return(Plant_Surveys)#
}#
#' Merge Plant Info and Plant Surveys data files#
#'#
#' @description Add Island, Cluster, and Host Species information to the Plant_Surveys dataset.#
#' @param Plant_Surveys Plant Survey Dataset#
#' @param Plant_Info  Plant Information Dataset#
#'#
#' @export#
#
mergePlantSurveysPlantInfo <- function(Plant_Surveys, Plant_Info) {#
	Plant_Surveys <- Plant_Info %>%#
		dplyr::select(#
			ClusterID, #
			InDemographicStudy, #
			PlotPlantID, #
			Tag_Number, #
			Island, #
			Cluster2, #
			Network, #
			Species, #
			InBigPlantStudy, #
			N.PlotPlantIDs, #
			Easting, #
			Northing,#
			ReproductiveMode#
		) %>%#
		merge(Plant_Surveys, by = "PlotPlantID")#
	return(Plant_Surveys)#
}#
#
#' Add Sampling Period Variable#
#'#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
addSamplingPeriods <- function(Plant_Surveys) {#
	Plant_Surveys$DemographicSurvey <- "NA"#
	Plant_Surveys %<>% #
		group_by(Date) %>% #
		mutate(#
			# SURVEY 1 - SPRING/SUMMER 2013#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2013-05-14" & Date < "2013-08-06"), "1"),#
			# SURVEY 2 - FALL/WINTER 2013/2014#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2013-12-13" & Date < "2014-01-28"), "2"),#
			# SURVEY 3 - SPRING/SUMMER 2014#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2014-05-06" & Date < "2014-09-24"), "3"),#
			# SURVEY 4 - WINTER 2015#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2015-01-08" & Date < "2015-02-21"), "4"),#
			# SURVEY 5 - SPRING/SUMMER 2015#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2015-05-01"), "5"))#
	return(Plant_Surveys)#
}#
#
#' Add Sampling Year Variable#
#'#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
addSamplingYear <- function(Plant_Surveys) {#
	Plant_Surveys$SamplingYear <- NA#
	Plant_Surveys %<>% #
		group_by(Date) %>% #
		mutate(#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2012-12-02" & Date < "2013-05-01"), #
				2012#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2013-05-01" & Date < "2014-05-01"), #
				2013#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2014-05-01" & Date < "2015-05-01"), #
				2014#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2015-05-01"), #
				2015#
			)#
		)#
	return(Plant_Surveys)#
}#
#
#' Determine Fruit and Flower Presence#
#'#
#' @description Create separate variables indicating whether fruit and fruit and flowers were present.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
calculateFruitPresence <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		mutate(#
			FruitPres_t 		= ifelse(Fruit_t > 0, 1, 0),#
			FruitFlowerPres_t 	= ifelse(Fruit_Flowers_t > 0, 1, 0)#
		) %>%#
		as.data.table %>%#
		# add NAs#
		.[is.na(Fruit_t), FruitPres_t := NA] %>%#
		.[is.na(Fruit_Flowers_t), FruitPres_t := NA] %>%#
		as.data.frame#
}#
#
#' Calculate Plant Volume#
#'#
#' @description Calculate plant volume as a cone, cylinder, and elliptic cylinder.#
#' @param Plant_Surveys Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
calculatePlantVolume <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		mutate(#
			Cone_t 				= pi * (((Width_t + Perpen_Width)/4)^2) * #
									Height_t / 3,#
			Cylinder_t 			= pi * ((Perpen_Width/2)^2) * Width_t,#
			Elliptic_Cylinder_t = pi * Height_t/2 * Perpen_Width/2 * Width_t#
		)#
}#
#
#' Determine if a survey was complete#
#'#
#' @param x Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
Complete_Surveys_function <- function(x){#
	ifelse(rowSums(is.na(x))==0, 1, 0)#
	return(x)#
}#
#
#' Determine whether a survey was complete#
#'#
#' @description Determine whether all data was collected during a survey.#
#' Determine complete surveys for:#
#' \itemize{#
#'  \item insect surveys#
#'  \item plant size#
#'  \item size measurements (cm)#
#'  \item fruit, flowers, and flower buds#
#'  \item all data#
#' 	}#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
determineCompleteSurveys <- function(Plant_Surveys) {#
	Plant_Surveys$complete_insect_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"CA_t",#
			"ME_t",#
			"Unknown_Moth_t",#
			"Old_Moth_Evidence_t"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_segments_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Plant_Segments_w_leaves",#
			"Plant_Segments_wo_leaves",#
			"Plant_Segments_woody"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_size_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Height_t",#
			"Width_t",#
			"Perpen_Width"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_fruit_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Num_FlowerBuds",#
			"Num_Fruit_red",#
			"Num_Fruit_green",#
			"Num_Flowers"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
		# insects#
		"CA_t",#
		"ME_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		# number of segments#
		"Size_t",#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		# size in cm#
		"Height_t",#
		"Width_t",#
		"Perpen_Width",#
		# flowers and fruit#
		"Fruit_t" #
		)]))==0, 1, 0#
	)#
	return(Plant_Surveys)#
}#
#
#' Determine if an insect species was ever detected during the study period#
#'#
#' @description Determine if an insect species was ever detected during the study period.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
determineInsectPresenceDuringStudy <- function(Plant_Surveys) {#
	Plant_Surveys.present <- Plant_Surveys %>%#
		group_by(PlantID) %>%#
		summarise(#
			CAPresent = ifelse(sum(CA_t, na.rm=T) > 0, 1, 0),#
			MEPresent = ifelse(sum(ME_t, na.rm=T) > 0, 1, 0)#
			) %>%#
		as.data.frame()#
	Plant_Surveys %>% merge(Plant_Surveys.present, by="PlantID")#
}#
#
#' Rename Species levels#
#'#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
renameSpecies <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		as.data.table %>%#
		.[Species == "pusilla", Species := "Opuntia pusilla"] %>%#
		.[Species == "stricta", Species := "Opuntia stricta"] %>%#
		as.data.frame#
}#
#
#' Rename Convert 1/0 to Yes/No#
#'#
#' @param x Vector of 0/1 data#
#'#
#' @export#
#
Yes_No_from_1_0_Function <- function(x){#
	x[x > 0] <- "Yes"#
	x[x == 0] <- "No"#
	return(x)#
}#
#
#' Make Insect Factor Variables#
#'#
#' @description Make new insect variables with "yes"/"no" values instead of 0/1.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
createInsectFactorVariables <- function(Plant_Surveys) {#
	Plant_Surveys$C_cactorum 	<- Plant_Surveys$CA_t#
	Plant_Surveys$M_prodenialis <- Plant_Surveys$ME_t#
	Plant_Surveys[,c(#
		"C_cactorum",#
		"M_prodenialis")] %<>%#
		apply(., 2, Yes_No_from_1_0_Function) %>%#
		apply(., 2, as.factor#
	)#
	return(Plant_Surveys)#
}#
#
#' Format as Factors#
#'#
#' @description Format variables as factors.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
formatasFactors <- function(x) {#
	factors <- c("ClusterID", "Network", "Island", "Species", #
		"DemographicSurvey", "SamplingYear", "Year", "Season", "C_cactorum", #
		"M_prodenialis")#
	for (i in 1:length(factors)) {#
		if (factors[i] %in% names(x)) {#
			x[, factors[i]] %<>% as.factor#
		}#
	}#
	return(x)#
}#
#
#' Process Plant Survey Data#
#'#
#' @description Steps:#
#' \itemize{#
#'  \item add column, "DemographicSurvey"#
#'	\itemize{#
#'		\item survey 1 - spring/summer 2013#
#'		\item survey 2 - fall/winter 2013/2014#
#'		\item survey 3 - spring/summer 2014#
#'		\item survey 4 - winter 2015#
#'		\item survey 5 - spring/summer 2015#
#'	}#
#'  \item addSamplingYear#
#'	\itemize{#
#'		\item 2012 - Date >= "2012-12-02" & Date < "2013-05-01"#
#'		\item 2013 - Date >= "2013-05-01" & Date < "2014-05-01"#
#'		\item 2014 - Date >= "2014-05-01" & Date < "2015-05-01"#
#'		\item 2015 - Date >= "2015-05-01"#
#'	}#
#' }#
#'#
#' @export#
#
processPlantSurveysafterMergewPlantInfo <- function(Plant_Surveys) {#
	Plant_Surveys %>%#
		addSamplingPeriods %>%#
		addSamplingYear %>%#
		as.data.frame#
#
#' Process Plant Survey Data, per plant#
#'#
#' @description Steps:#
#' \itemize{#
#'  	\item merge records for the same plant from multiple plots; the data to be merged must have been collected on the same day.#
#'  	\item Create separate variables indicating whether fruit and fruit and flowers were present#
#'  	\item Calculate plant volume as a cone, cylinder, and elliptic cylinder#
#'  	\item Determine if an insect species was ever detected during the study period#
#'  	\item Rename species levels ("Opuntia stricta" instead of "stricta" and "Opuntia pusilla" instead of "pusilla")#
#' 	 	\item Make new insect variables with "yes"/"no" values instead of 0/1, named "C_cactorum" and "M_prodenialis"#
#'  	\item format the variables "ClusterID", "Network", "Island", "Species", "DemographicSurvey", "SamplingYear", "Year", "Season", "C_cactorum", "M_prodenialis" as factors#
#' 	}#
#'#
#' @export#
processSurveysMergedbyPlant <- function(Plant_Surveys) {#
	Plant_Surveys %>%#
		mergePlantRecordsfromMultiplePlots %>%#
		calculateFruitPresence %>%#
		calculatePlantVolume %>%#
		determineInsectPresenceDuringStudy %>%#
		renameSpecies %>%#
		createInsectFactorVariables %>%#
		formatasFactors#
}
}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
#' Process Plant Survey Data#
#'#
#' @description Steps:#
#' \itemize{#
#'  \item Fix column names#
#'  \item format dates#
#'  \item format PlantIDs#
#'  \item format convert "999" values to NA#
#'  \item format change "yes"/"no" values of the insect survey, missing, and dead columns to 0/1#
#'  \item format numeric columns#
#'  \item add total segment column#
#'  \item add fruit count column#
#'  \item add fruit/flower count column#
#'  \item check for observations of 0 pads, 0 height, or 0 width; if there are observations, stop#
#' 	}#
#' Column Names:#
#' \itemize{#
#'  \item PlantMeasureID Record number if Microsoft Access database#
#'  \item First_Observer_Initials Initials of primary observer (should always be KS, for Kristen Sauby)#
#'  \item Second_Observer_Initials Initials of secondary observer; CJP - Cory Penca; YP - Yani Paulay; KS - Kristen Sauby; JW: Juliana Welch; CW: Cedric Worman; AP: Adam Payton#
#'  \item Date Date#
#'  \item PlantID Unique number for the individual plant#
#'  \item Plant_collected Were plant samples collected?#
#'  \item Time#
#'  \item PlantPictures identifying numbers of photos taken#
#'  \item PlantPictures_Direction direction that the photo(s) was(were) taken#
#
#'  \item CA_t Presence/absence (1/0) of Cactoblastis cactorum#
#'  \item CACA_collected Were samples of Cactoblastis cactorum collected?#
#'  \item CACA_quantity Number of Cactoblastis cactorum samples collected#
#
#'  \item ME_t Presence/absence (1/0) of Melitara prodenialis#
#'  \item MEPR_collected Were samples of Melitara prodenialis collected?#
#'  \item MEPR_quantity Number of Melitara prodenialis samples collected#
#
#'  \item CH_t Presence/absence (1/0) of Chelinidea vittiger#
#'  \item CHVI_collected Were samples of Chelinidea vittiger collected?#
#'  \item CHVI_quantity Number of Chelinidea vittiger samples collected#
#
#'  \item DA_t Presence/absence (1/0) of Dactylopius species#
#'  \item DACT_collected Were samples of Dactylopius species collected?#
#'  \item DACT_quantity Number of Dactylopius species samples collected#
#
#'  \item Unknown_Moth_t Presence/absence (1/0) of unknown moth#
#'  \item UnknownMoth_collected Were samples of unknown moth collected?#
#'  \item UnknownMoth_quantity Number of unknown moth samples collected#
#
#'  \item Old_Moth_Evidence_t Evidence of past moth infestation#
#'  \item Old_Moth_Evidence_recent Whether evidence of past moth infestation appears recent or old#
#
#'  \item Fungus Presence/absence (1/0) of plant fungal infection#
#'  \item Gerstaeckeria Presence/absence (1/0) of Gerstaeckeria#
#'  \item Plant_Segments_total Number of segments#
#'  \item Plant_Segments_w_leaves New, green segments with leaves#
#'  \item Plant_Segments_wo_leaves Green segments without leaves#
#'  \item Plant_Segments_woody number of woody segments/trunks; these segments are entirely brown on the outside      #
#'  \item Height_t maximum height in cm#
#'  \item Width_t maximum width in cm#
#'  \item Perpen_Width width, perpendicular to max width, in cm#
#'  \item Num_FlowerBuds Number of flower buds#
#'  \item Num_Fruit_red Number of red fruit#
#'  \item Num_Fruit_green Number of green fruit#
#'  \item Num_Flowers Number of flowers#
#'  \item Num_Fruit use this when number is recorded but distinction by color is not made#
#'  \item Pollinators#
#'  \item Spiders#
#'  \item Ants#
#'  \item Other_collected_quantity#
#'  \item Plant_Notes#
#'  \item Insect_Notes        #
#'  \item Other_Notes#
#'  \item Dead Whether the plant is observed to be dead; 0 or 1#
#'  \item Missing#
#'  \item OutsideOfPlot "Yes" if plant is no longer in plot#
#'  \item PlotPlantID Unique number for the individual plant; if a plant is counted in multiple plots, a letter is appended to the plant ID here (e.g., 9606a) and then removed for analysis#
#'  \item Size_t The sum of Plant_Segments_total, Plant_Segments_w_leaves, Plant_Segments_wo_leaves, and Plant_Segments_woody#
#
#'  \item Fruit_t The sum of Num_Fruit_red, Num_Fruit_green, and Num_Fruit#
#'  \item Fruit_Flowers_t The sum of Num_FlowerBuds, Num_Flowers, Num_Fruit_red, Num_Fruit_green, and Num_Fruit#
#' 	}#
#'#
#' @export#
#
processPlantSurveys <- function(Plant_Surveys) {#
	# ------------------------------------------------------------- CHANGE NAMES#
	# remame size and height#
	Plant_Surveys %<>%	as.data.table %>%#
		setnames("Max_Height", 				"Height_t") %>%#
		setnames("Max_Width", 				"Width_t") %>%#
		setnames("CACA_Larvae", 			"CA_t") %>%#
		setnames("MEPR_Larvae", 			"ME_t") %>%#
		setnames("CHVI_Evidence", 			"CH_t") %>%#
		setnames("DACT_Evidence", 			"DA_t") %>%#
		setnames("UnknownMoth_Evidence", 	"Unknown_Moth_t") %>%#
		setnames("Old_Moth_Evidence", 		"Old_Moth_Evidence_t") %>%#
		setnames("DateSurveyed", 			"Date") %>%#
		as.data.frame#
	# formatting/preparation necessary for prepping Demographic Plant Info#
	Plant_Surveys$Date %<>% Format_Date_Function#
	Plant_Surveys %<>% arrange(Date)#
	Plant_Surveys %<>% Format_PlantIDs_Function#
	# ------------------------------------------------ CONVERT ALL "999s" to NAs#
	Plant_Surveys[,c(#
		"Plant_Segments_total", #
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		"Perpen_Width",#
		"Width_t",#
		"Height_t",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------- INSECT SURVEYS, MISSING, DEAD - CHANGE YES, NO to 0, 1#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, Yes_Function#
	)#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>%#
		apply(2, No_Function#
	)#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------------------------------------------------- MAKE NUMERIC#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		"Plant_Segments_total",#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		"Height_t",#
		"Width_t",#
		"Perpen_Width",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, as.numeric#
	)#
	# ------------------------------------------------- ADD TOTAL SEGMENT COLUMN#
	# do this so that plants that have no segments recorded (all NAs) have a total segment count = NA#
	# for those plants that have fewer than four NAs (at least one segment column has a number), sum the segments#
	Plant_Surveys$Size_t <- Plant_Surveys %>%#
							dplyr::select(#
								Plant_Segments_total,#
								Plant_Segments_w_leaves,#
								Plant_Segments_wo_leaves,#
								Plant_Segments_woody#
							) %>%#
							apply(1, mysum)#
	Plant_Surveys$Size_t %<>% Zero_is_NA_Function#
	# --------------------------------------------------------- ADD FRUIT COLUMN#
	Plant_Surveys$Fruit_t <- Plant_Surveys %>%#
							dplyr::select(#
								Num_Fruit_red,#
								Num_Fruit_green,#
								Num_Fruit#
							) %>%#
							apply(1, mysum)#
	Plant_Surveys$Fruit_Flowers_t <- Plant_Surveys %>%#
							dplyr::select(#
								Num_FlowerBuds,#
								Num_Flowers,#
								Num_Fruit_red,#
								Num_Fruit_green,#
								Num_Fruit#
							) %>%#
							apply(1, mysum)#
	# ----------------------------------------------------------- ERROR MESSAGES#
	# There should never be observations of 0 pads, 0 height, or 0 width#
	# replace 0 with NA#
	dups <- Plant_Surveys %>% filter(Size_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Size_t equal 0.")}#
#
	dups <- Plant_Surveys %>% filter(Height_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Height_t equal 0.")}#
#
	dups <- Plant_Surveys %>% filter(Width_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Width_t equal 0.")}#
#
	dups <- Plant_Surveys %>% filter(Perpen_Width==0)#
	if (dim(dups)[1] > 0) {stop("Values for Perpen_Width equal 0.")}#
	return(Plant_Surveys)#
}#
#' Merge Plant Info and Plant Surveys data files#
#'#
#' @description Add Island, Cluster, and Host Species information to the Plant_Surveys dataset.#
#' @param Plant_Surveys Plant Survey Dataset#
#' @param Plant_Info  Plant Information Dataset#
#'#
#' @export#
#
mergePlantSurveysPlantInfo <- function(Plant_Surveys, Plant_Info) {#
	Plant_Surveys <- Plant_Info %>%#
		dplyr::select(#
			ClusterID, #
			InDemographicStudy, #
			PlotPlantID, #
			Tag_Number, #
			Island, #
			Cluster2, #
			Network, #
			Species, #
			InBigPlantStudy, #
			N.PlotPlantIDs, #
			Easting, #
			Northing,#
			ReproductiveMode#
		) %>%#
		merge(Plant_Surveys, by = "PlotPlantID")#
	return(Plant_Surveys)#
}#
#
#' Add Sampling Period Variable#
#'#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
addSamplingPeriods <- function(Plant_Surveys) {#
	Plant_Surveys$DemographicSurvey <- "NA"#
	Plant_Surveys %<>% #
		group_by(Date) %>% #
		mutate(#
			# SURVEY 1 - SPRING/SUMMER 2013#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2013-05-14" & Date < "2013-08-06"), "1"),#
			# SURVEY 2 - FALL/WINTER 2013/2014#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2013-12-13" & Date < "2014-01-28"), "2"),#
			# SURVEY 3 - SPRING/SUMMER 2014#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2014-05-06" & Date < "2014-09-24"), "3"),#
			# SURVEY 4 - WINTER 2015#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2015-01-08" & Date < "2015-02-21"), "4"),#
			# SURVEY 5 - SPRING/SUMMER 2015#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2015-05-01"), "5"))#
	return(Plant_Surveys)#
}#
#
#' Add Sampling Year Variable#
#'#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
addSamplingYear <- function(Plant_Surveys) {#
	Plant_Surveys$SamplingYear <- NA#
	Plant_Surveys %<>% #
		group_by(Date) %>% #
		mutate(#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2012-12-02" & Date < "2013-05-01"), #
				2012#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2013-05-01" & Date < "2014-05-01"), #
				2013#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2014-05-01" & Date < "2015-05-01"), #
				2014#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2015-05-01"), #
				2015#
			)#
		)#
	return(Plant_Surveys)#
}#
#
#' Determine Fruit and Flower Presence#
#'#
#' @description Create separate variables indicating whether fruit and fruit and flowers were present.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
calculateFruitPresence <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		mutate(#
			FruitPres_t 		= ifelse(Fruit_t > 0, 1, 0),#
			FruitFlowerPres_t 	= ifelse(Fruit_Flowers_t > 0, 1, 0)#
		) %>%#
		as.data.table %>%#
		# add NAs#
		.[is.na(Fruit_t), FruitPres_t := NA] %>%#
		.[is.na(Fruit_Flowers_t), FruitPres_t := NA] %>%#
		as.data.frame#
}#
#
#' Calculate Plant Volume#
#'#
#' @description Calculate plant volume as a cone, cylinder, and elliptic cylinder.#
#' @param Plant_Surveys Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
calculatePlantVolume <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		mutate(#
			Cone_t 				= pi * (((Width_t + Perpen_Width)/4)^2) * #
									Height_t / 3,#
			Cylinder_t 			= pi * ((Perpen_Width/2)^2) * Width_t,#
			Elliptic_Cylinder_t = pi * Height_t/2 * Perpen_Width/2 * Width_t#
		)#
}#
#
#' Determine if a survey was complete#
#'#
#' @param x Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
Complete_Surveys_function <- function(x){#
	ifelse(rowSums(is.na(x))==0, 1, 0)#
	return(x)#
}#
#
#' Determine whether a survey was complete#
#'#
#' @description Determine whether all data was collected during a survey.#
#' Determine complete surveys for:#
#' \itemize{#
#'  \item insect surveys#
#'  \item plant size#
#'  \item size measurements (cm)#
#'  \item fruit, flowers, and flower buds#
#'  \item all data#
#' 	}#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
determineCompleteSurveys <- function(Plant_Surveys) {#
	Plant_Surveys$complete_insect_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"CA_t",#
			"ME_t",#
			"Unknown_Moth_t",#
			"Old_Moth_Evidence_t"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_segments_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Plant_Segments_w_leaves",#
			"Plant_Segments_wo_leaves",#
			"Plant_Segments_woody"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_size_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Height_t",#
			"Width_t",#
			"Perpen_Width"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_fruit_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Num_FlowerBuds",#
			"Num_Fruit_red",#
			"Num_Fruit_green",#
			"Num_Flowers"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
		# insects#
		"CA_t",#
		"ME_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		# number of segments#
		"Size_t",#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		# size in cm#
		"Height_t",#
		"Width_t",#
		"Perpen_Width",#
		# flowers and fruit#
		"Fruit_t" #
		)]))==0, 1, 0#
	)#
	return(Plant_Surveys)#
}#
#
#' Determine if an insect species was ever detected during the study period#
#'#
#' @description Determine if an insect species was ever detected during the study period.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
determineInsectPresenceDuringStudy <- function(Plant_Surveys) {#
	Plant_Surveys.present <- Plant_Surveys %>%#
		group_by(PlantID) %>%#
		summarise(#
			CAPresent = ifelse(sum(CA_t, na.rm=T) > 0, 1, 0),#
			MEPresent = ifelse(sum(ME_t, na.rm=T) > 0, 1, 0)#
			) %>%#
		as.data.frame()#
	Plant_Surveys %>% merge(Plant_Surveys.present, by="PlantID")#
}#
#
#' Rename Species levels#
#'#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
renameSpecies <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		as.data.table %>%#
		.[Species == "pusilla", Species := "Opuntia pusilla"] %>%#
		.[Species == "stricta", Species := "Opuntia stricta"] %>%#
		as.data.frame#
}#
#
#' Rename Convert 1/0 to Yes/No#
#'#
#' @param x Vector of 0/1 data#
#'#
#' @export#
#
Yes_No_from_1_0_Function <- function(x){#
	x[x > 0] <- "Yes"#
	x[x == 0] <- "No"#
	return(x)#
}#
#
#' Make Insect Factor Variables#
#'#
#' @description Make new insect variables with "yes"/"no" values instead of 0/1.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
createInsectFactorVariables <- function(Plant_Surveys) {#
	Plant_Surveys$C_cactorum 	<- Plant_Surveys$CA_t#
	Plant_Surveys$M_prodenialis <- Plant_Surveys$ME_t#
	Plant_Surveys[,c(#
		"C_cactorum",#
		"M_prodenialis")] %<>%#
		apply(., 2, Yes_No_from_1_0_Function) %>%#
		apply(., 2, as.factor#
	)#
	return(Plant_Surveys)#
}#
#
#' Format as Factors#
#'#
#' @description Format variables as factors.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
formatasFactors <- function(x) {#
	factors <- c("ClusterID", "Network", "Island", "Species", #
		"DemographicSurvey", "SamplingYear", "Year", "Season", "C_cactorum", #
		"M_prodenialis")#
	for (i in 1:length(factors)) {#
		if (factors[i] %in% names(x)) {#
			x[, factors[i]] %<>% as.factor#
		}#
	}#
	return(x)#
}#
#
#' Process Plant Survey Data#
#'#
#' @description Steps:#
#' \itemize{#
#'  \item add column, "DemographicSurvey"#
#'	\itemize{#
#'		\item survey 1 - spring/summer 2013#
#'		\item survey 2 - fall/winter 2013/2014#
#'		\item survey 3 - spring/summer 2014#
#'		\item survey 4 - winter 2015#
#'		\item survey 5 - spring/summer 2015#
#'	}#
#'  \item addSamplingYear#
#'	\itemize{#
#'		\item 2012 - Date >= "2012-12-02" & Date < "2013-05-01"#
#'		\item 2013 - Date >= "2013-05-01" & Date < "2014-05-01"#
#'		\item 2014 - Date >= "2014-05-01" & Date < "2015-05-01"#
#'		\item 2015 - Date >= "2015-05-01"#
#'	}#
#' }#
#'#
#' @export#
#
processPlantSurveysafterMergewPlantInfo <- function(Plant_Surveys) {#
	Plant_Surveys %>%#
		addSamplingPeriods %>%#
		addSamplingYear %>%#
		as.data.frame#
#
#' Process Plant Survey Data, per plant#
#'#
#' @description Steps:#
#' \itemize{#
#'  	\item merge records for the same plant from multiple plots; the data to be merged must have been collected on the same day.#
#'  	\item Create separate variables indicating whether fruit and fruit and flowers were present#
#'  	\item Calculate plant volume as a cone, cylinder, and elliptic cylinder#
#'  	\item Determine if an insect species was ever detected during the study period#
#'  	\item Rename species levels ("Opuntia stricta" instead of "stricta" and "Opuntia pusilla" instead of "pusilla")#
#' 	 	\item Make new insect variables with "yes"/"no" values instead of 0/1, named "C_cactorum" and "M_prodenialis"#
#'  	\item format the variables "ClusterID", "Network", "Island", "Species", "DemographicSurvey", "SamplingYear", "Year", "Season", "C_cactorum", "M_prodenialis" as factors#
#' 	}#
#'#
#' @export#
processSurveysMergedbyPlant <- function(Plant_Surveys) {#
	Plant_Surveys %>%#
		mergePlantRecordsfromMultiplePlots %>%#
		calculateFruitPresence %>%#
		calculatePlantVolume %>%#
		determineInsectPresenceDuringStudy %>%#
		renameSpecies %>%#
		createInsectFactorVariables %>%#
		formatasFactors#
}
}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
processPlantSurveys <- function(Plant_Surveys) {#
	# ------------------------------------------------------------- CHANGE NAMES#
	# remame size and height#
	Plant_Surveys %<>%	as.data.table %>%#
		setnames("Max_Height", 				"Height_t") %>%#
		setnames("Max_Width", 				"Width_t") %>%#
		setnames("CACA_Larvae", 			"CA_t") %>%#
		setnames("MEPR_Larvae", 			"ME_t") %>%#
		setnames("CHVI_Evidence", 			"CH_t") %>%#
		setnames("DACT_Evidence", 			"DA_t") %>%#
		setnames("UnknownMoth_Evidence", 	"Unknown_Moth_t") %>%#
		setnames("Old_Moth_Evidence", 		"Old_Moth_Evidence_t") %>%#
		setnames("DateSurveyed", 			"Date") %>%#
		as.data.frame#
	# formatting/preparation necessary for prepping Demographic Plant Info#
	Plant_Surveys$Date %<>% Format_Date_Function#
	Plant_Surveys %<>% arrange(Date)#
	Plant_Surveys %<>% Format_PlantIDs_Function#
	# ------------------------------------------------ CONVERT ALL "999s" to NAs#
	Plant_Surveys[,c(#
		"Plant_Segments_total", #
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		"Perpen_Width",#
		"Width_t",#
		"Height_t",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------- INSECT SURVEYS, MISSING, DEAD - CHANGE YES, NO to 0, 1#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, Yes_Function#
	)#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>%#
		apply(2, No_Function#
	)#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------------------------------------------------- MAKE NUMERIC#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		"Plant_Segments_total",#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		"Height_t",#
		"Width_t",#
		"Perpen_Width",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, as.numeric#
	)#
	# ------------------------------------------------- ADD TOTAL SEGMENT COLUMN#
	# do this so that plants that have no segments recorded (all NAs) have a total segment count = NA#
	# for those plants that have fewer than four NAs (at least one segment column has a number), sum the segments#
	Plant_Surveys$Size_t <- Plant_Surveys %>%#
							dplyr::select(#
								Plant_Segments_total,#
								Plant_Segments_w_leaves,#
								Plant_Segments_wo_leaves,#
								Plant_Segments_woody#
							) %>%#
							apply(1, mysum)#
	Plant_Surveys$Size_t %<>% Zero_is_NA_Function#
	# --------------------------------------------------------- ADD FRUIT COLUMN#
	Plant_Surveys$Fruit_t <- Plant_Surveys %>%#
							dplyr::select(#
								Num_Fruit_red,#
								Num_Fruit_green,#
								Num_Fruit#
							) %>%#
							apply(1, mysum)#
	Plant_Surveys$Fruit_Flowers_t <- Plant_Surveys %>%#
							dplyr::select(#
								Num_FlowerBuds,#
								Num_Flowers,#
								Num_Fruit_red,#
								Num_Fruit_green,#
								Num_Fruit#
							) %>%#
							apply(1, mysum)#
	# ----------------------------------------------------------- ERROR MESSAGES#
	# There should never be observations of 0 pads, 0 height, or 0 width#
	# replace 0 with NA#
	dups <- Plant_Surveys %>% filter(Size_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Size_t equal 0.")}#
#
	dups <- Plant_Surveys %>% filter(Height_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Height_t equal 0.")}#
#
	dups <- Plant_Surveys %>% filter(Width_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Width_t equal 0.")}#
#
	dups <- Plant_Surveys %>% filter(Perpen_Width==0)#
	if (dim(dups)[1] > 0) {stop("Values for Perpen_Width equal 0.")}#
	return(Plant_Surveys)#
}#
#' Merge Plant Info and Plant Surveys data files
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
mergePlantSurveysPlantInfo <- function(Plant_Surveys, Plant_Info) {#
	Plant_Surveys <- Plant_Info %>%#
		dplyr::select(#
			ClusterID, #
			InDemographicStudy, #
			PlotPlantID, #
			Tag_Number, #
			Island, #
			Cluster2, #
			Network, #
			Species, #
			InBigPlantStudy, #
			N.PlotPlantIDs, #
			Easting, #
			Northing,#
			ReproductiveMode#
		) %>%#
		merge(Plant_Surveys, by = "PlotPlantID")#
	return(Plant_Surveys)#
}#
#
#' Add Sampling Period Variable
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
addSamplingPeriods <- function(Plant_Surveys) {#
	Plant_Surveys$DemographicSurvey <- "NA"#
	Plant_Surveys %<>% #
		group_by(Date) %>% #
		mutate(#
			# SURVEY 1 - SPRING/SUMMER 2013#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2013-05-14" & Date < "2013-08-06"), "1"),#
			# SURVEY 2 - FALL/WINTER 2013/2014#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2013-12-13" & Date < "2014-01-28"), "2"),#
			# SURVEY 3 - SPRING/SUMMER 2014#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2014-05-06" & Date < "2014-09-24"), "3"),#
			# SURVEY 4 - WINTER 2015#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2015-01-08" & Date < "2015-02-21"), "4"),#
			# SURVEY 5 - SPRING/SUMMER 2015#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2015-05-01"), "5"))#
	return(Plant_Surveys)#
}#
#
#' Add Sampling Year Variable#
#'#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
addSamplingYear <- function(Plant_Surveys) {#
	Plant_Surveys$SamplingYear <- NA#
	Plant_Surveys %<>% #
		group_by(Date) %>% #
		mutate(#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2012-12-02" & Date < "2013-05-01"), #
				2012#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2013-05-01" & Date < "2014-05-01"), #
				2013#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2014-05-01" & Date < "2015-05-01"), #
				2014#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2015-05-01"), #
				2015#
			)#
		)#
	return(Plant_Surveys)#
}#
#
#' Determine Fruit and Flower Presence
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
calculateFruitPresence <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		mutate(#
			FruitPres_t 		= ifelse(Fruit_t > 0, 1, 0),#
			FruitFlowerPres_t 	= ifelse(Fruit_Flowers_t > 0, 1, 0)#
		) %>%#
		as.data.table %>%#
		# add NAs#
		.[is.na(Fruit_t), FruitPres_t := NA] %>%#
		.[is.na(Fruit_Flowers_t), FruitPres_t := NA] %>%#
		as.data.frame#
}#
#
#' Calculate Plant Volume
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
calculatePlantVolume <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		mutate(#
			Cone_t 				= pi * (((Width_t + Perpen_Width)/4)^2) * #
									Height_t / 3,#
			Cylinder_t 			= pi * ((Perpen_Width/2)^2) * Width_t,#
			Elliptic_Cylinder_t = pi * Height_t/2 * Perpen_Width/2 * Width_t#
		)#
}#
#
#' Determine if a survey was complete#
#'
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Complete_Surveys_function <- function(x){#
	ifelse(rowSums(is.na(x))==0, 1, 0)#
	return(x)#
}#
#
#' Determine whether a survey was complete#
#'
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
determineCompleteSurveys <- function(Plant_Surveys) {#
	Plant_Surveys$complete_insect_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"CA_t",#
			"ME_t",#
			"Unknown_Moth_t",#
			"Old_Moth_Evidence_t"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_segments_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Plant_Segments_w_leaves",#
			"Plant_Segments_wo_leaves",#
			"Plant_Segments_woody"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_size_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Height_t",#
			"Width_t",#
			"Perpen_Width"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_fruit_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Num_FlowerBuds",#
			"Num_Fruit_red",#
			"Num_Fruit_green",#
			"Num_Flowers"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
		# insects#
		"CA_t",#
		"ME_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		# number of segments#
		"Size_t",#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		# size in cm#
		"Height_t",#
		"Width_t",#
		"Perpen_Width",#
		# flowers and fruit#
		"Fruit_t" #
		)]))==0, 1, 0#
	)#
	return(Plant_Surveys)#
}#
#
#' Determine if an insect species was ever detected during the study period#
#'#
#' @description Determine if an insect species was e
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
determineInsectPresenceDuringStudy <- function(Plant_Surveys) {#
	Plant_Surveys.present <- Plant_Surveys %>%#
		group_by(PlantID) %>%#
		summarise(#
			CAPresent = ifelse(sum(CA_t, na.rm=T) > 0, 1, 0),#
			MEPresent = ifelse(sum(ME_t, na.rm=T) > 0, 1, 0)#
			) %>%#
		as.data.frame()#
	Plant_Surveys %>% merge(Plant_Surveys.present, by="PlantID")#
}#
#
#' Rename Species levels
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
renameSpecies <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		as.data.table %>%#
		.[Species == "pusilla", Species := "Opuntia pusilla"] %>%#
		.[Species == "stricta", Species := "Opuntia stricta"] %>%#
		as.data.frame#
}#
#
#' Rename Convert 1/0 to Yes/No#
#'
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Yes_No_from_1_0_Function <- function(x){#
	x[x > 0] <- "Yes"#
	x[x == 0] <- "No"#
	return(x)#
}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
createInsectFactorVariables <- function(Plant_Surveys) {#
	Plant_Surveys$C_cactorum 	<- Plant_Surveys$CA_t#
	Plant_Surveys$M_prodenialis <- Plant_Surveys$ME_t#
	Plant_Surveys[,c(#
		"C_cactorum",#
		"M_prodenialis")] %<>%#
		apply(., 2, Yes_No_from_1_0_Function) %>%#
		apply(., 2, as.factor#
	)#
	return(Plant_Surveys)#
}#
#
#' Format as Factors
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
formatasFactors <- function(x) {#
	factors <- c("ClusterID", "Network", "Island", "Species", #
		"DemographicSurvey", "SamplingYear", "Year", "Season", "C_cactorum", #
		"M_prodenialis")#
	for (i in 1:length(factors)) {#
		if (factors[i] %in% names(x)) {#
			x[, factors[i]] %<>% as.factor#
		}#
	}#
	return(x)#
}#
#
#' Process Plant Survey Data
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
processPlantSurveysafterMergewPlantInfo <- function(Plant_Surveys) {#
	Plant_Surveys %>%#
		addSamplingPeriods %>%#
		addSamplingYear %>%#
		as.data.frame#
}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
processSurveysMergedbyPlant <- function(Plant_Surveys) {#
	Plant_Surveys %>%#
		mergePlantRecordsfromMultiplePlots %>%#
		calculateFruitPresence %>%#
		calculatePlantVolume %>%#
		determineInsectPresenceDuringStudy %>%#
		renameSpecies %>%#
		createInsectFactorVariables %>%#
		formatasFactors#
}
setwd('/Users/KSauby/Documents/Projects')
setwd("./dataproc")#
#setwd("./modresproc")#
#devtools::test()#
devtools::document()#
devtools::install()
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
processOccupancyPlotInfo <- function(Plot_Info) {#
	#--------------------------------------- Misc#
	# fix Cluster name#
	"Cluster" -> Plot_Info$Sampling[which(Plot_Info$Sampling=="Clusters")]#
	Plot_Info$Island %<>% as.factor#
	# file with ALL plots#
	# Plot_Info_All <- Plot_Info#
	#--------------------------------- include "In Demography Study" information#
	Plot_Info %<>% merge(ClustersInDemographicStudy, by = "Cluster", all=T)#
	# change NA to "no"#
	Plot_Info$InDemographicStudy[which(is.na(Plot_Info$InDemographicStudy))] <- "no"#
	# ---------------------------------------- ADD VEGETATION INFO ----------- ##
	# has two records for 1572#
	Plot_Info %<>% merge(Plot.Vegetation, by="Tag_Number", all=T)#
	# ---------------------------------------- ADD GIS INFO ------------------ ##
	# GIS_data_updated has remote sensing information, including elevation, dist_water#
	Plot_Info %<>% merge(GIS_data_updated, by="Tag_Number", all=T)#
	# limit to only plots still in study#
	Plot_Info %<>% filter(RemovedFromStudy!="Yes")#
	# make coordinates numeric#
	Plot_Info[,c(#
		"Easting", #
		"Northing")] %<>% #
		apply(., 2, as.numeric#
	)#
	return(Plot_Info)	#
}#
#
#' Process Plot Survey Data
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
processOccupancyPlotSurveys <- function(Plot_Surveys) {#
	# ---------------------------- LIMIT TO ONLY SURVEYS OF PLOTS STILL IN STUDY#
	# Plot_Surveys_All <- Plot_Surveys#
	Plot_Surveys %<>% .[(.$Tag_Number %in% Plot_Info$Tag_Number), ]#
	# -------------------------------------------------------------- FORMAT DATE#
	Plot_Surveys$Date %<>% Format_Date_Function#
	# -------------------------------------------------- CHANGE YES, NO to 0, 1 #
	Plot_Surveys[,c(#
		"Ammophila",#
		"CACA_on_Ammo",#
		"MEPR_on_Ammo",#
		"CHVI_on_Ammo",#
		"DACT_on_Ammo",#
		"UnknwnMoth_on_Ammo",#
		"Old_Moth_Evidence_Ammophila",#
		"Pusilla",#
		"CACA_on_Pusilla",#
		"MEPR_on_Pusilla",#
		"CHVI_on_Pusilla",#
		"DACT_on_Pusilla",#
		"UnknwnMoth_on_Pusilla",#
		"Old_Moth_Evidence_Pusilla",#
		"Stricta",#
		"CACA_on_Stricta",#
		"MEPR_on_Stricta",#
		"CHVI_on_Stricta",#
		"DACT_on_Stricta",#
		"UnknwnMoth_on_Stricta",#
		"Old_Moth_Evidence_Stricta")] %<>% #
		apply(., 2, Yes_Function#
	)#
	Plot_Surveys[,c(#
		"Ammophila",#
		"CACA_on_Ammo",#
		"MEPR_on_Ammo",#
		"CHVI_on_Ammo",#
		"DACT_on_Ammo",#
		"UnknwnMoth_on_Ammo",#
		"Old_Moth_Evidence_Ammophila",#
		"Pusilla",#
		"CACA_on_Pusilla",#
		"MEPR_on_Pusilla",#
		"CHVI_on_Pusilla",#
		"DACT_on_Pusilla",#
		"UnknwnMoth_on_Pusilla",#
		"Old_Moth_Evidence_Pusilla",#
		"Stricta",#
		"CACA_on_Stricta",#
		"MEPR_on_Stricta",#
		"CHVI_on_Stricta",#
		"DACT_on_Stricta",#
		"UnknwnMoth_on_Stricta",#
		"Old_Moth_Evidence_Stricta")] %<>%#
		apply(., 2, No_Function#
	)#
	Plot_Surveys[,c(#
		"Ammophila",#
		"CACA_on_Ammo",#
		"MEPR_on_Ammo",#
		"CHVI_on_Ammo",#
		"DACT_on_Ammo",#
		"UnknwnMoth_on_Ammo",#
		"Old_Moth_Evidence_Ammophila",#
		"Pusilla",#
		"CACA_on_Pusilla",#
		"MEPR_on_Pusilla",#
		"CHVI_on_Pusilla",#
		"DACT_on_Pusilla",#
		"UnknwnMoth_on_Pusilla",#
		"Old_Moth_Evidence_Pusilla",#
		"Stricta",#
		"CACA_on_Stricta",#
		"MEPR_on_Stricta",#
		"CHVI_on_Stricta",#
		"DACT_on_Stricta",#
		"UnknwnMoth_on_Stricta",#
		"Old_Moth_Evidence_Stricta")] %<>% #
		apply(., 2, NA_Function#
	)#
	# ------------------------------------------------------------- MAKE NUMERIC#
	Plot_Surveys[,c(#
		"Ammophila",#
		"CACA_on_Ammo",#
		"MEPR_on_Ammo",#
		"CHVI_on_Ammo",#
		"DACT_on_Ammo",#
		"UnknwnMoth_on_Ammo",#
		"Old_Moth_Evidence_Ammophila",#
		"Pusilla",#
		"CACA_on_Pusilla",#
		"MEPR_on_Pusilla",#
		"CHVI_on_Pusilla",#
		"DACT_on_Pusilla",#
		"UnknwnMoth_on_Pusilla",#
		"Old_Moth_Evidence_Pusilla",#
		"Stricta",#
		"CACA_on_Stricta",#
		"MEPR_on_Stricta",#
		"CHVI_on_Stricta",#
		"DACT_on_Stricta",#
		"UnknwnMoth_on_Stricta",#
		"Old_Moth_Evidence_Stricta")] %<>% #
		apply(., 2, as.numeric#
	)#
	# ------------------ CHANGE CACTUS DEPENDENT DATA TO NA IF CACTI NOT PRESENT#
	# If pusilla is not present, change all pusilla-dependent data to NA#
	Plot_Surveys_Pusilla_1 <- Plot_Surveys %>% filter(Pusilla==1)#
	Plot_Surveys_Pusilla_0 <- Plot_Surveys %>% #
		filter(Pusilla==0 | is.na(Pusilla))#
	Plot_Surveys_Pusilla_0[,c(#
		"CACA_on_Pusilla",#
		"MEPR_on_Pusilla",#
		"CHVI_on_Pusilla",#
		"DACT_on_Pusilla",#
		"UnknwnMoth_on_Pusilla",#
		"Old_Moth_Evidence_Pusilla",#
		"Old_Moth_Evidence_recent_Pusilla",#
		"Percent_Cover_Pusilla",#
		"Height_Pusilla")] %<>% #
		apply(2, NA_Function#
	)#
	Plot_Surveys <- rbind(Plot_Surveys_Pusilla_1, Plot_Surveys_Pusilla_0)#
	# If stricta is not present, change all stricta-dependent data to NA#
	Plot_Surveys_Stricta_1 <- Plot_Surveys %>% filter(Stricta==1)#
	Plot_Surveys_Stricta_0 <- Plot_Surveys %>% #
		filter(Stricta==0 | is.na(Stricta))#
	Plot_Surveys_Stricta_0[,c(#
		"CACA_on_Stricta",#
		"MEPR_on_Stricta",#
		"CHVI_on_Stricta",#
		"DACT_on_Stricta",#
		"UnknwnMoth_on_Stricta",#
		"Old_Moth_Evidence_Stricta",#
		"Old_Moth_Evidence_recent_Stricta",#
		"Percent_Cover_Stricta",#
		"Height_Stricta")] %<>% #
		apply(2, NA_Function#
	)#
	Plot_Surveys <- rbind(Plot_Surveys_Stricta_1, Plot_Surveys_Stricta_0)#
	# ------------------------------------------------------------------------ ##
	return(Plot_Surveys)#
}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
mergePlantSurveysPlotSurveys <- function(Plot_Surveys, Plant_Surveys) {#
	temp_A = filter(#
		Plot_Surveys, #
		Date > "2012-12-01", Tag_Number %in% Plant_Surveys$Tag_Number#
	)#
	Z = list()#
	# for each tag number in the plot surveys data#
	for (i in 1:length(unique(temp_A$Tag_Number))) {#
		# pull all records for this Tag Number from plot surveys#
		L = filter(temp_A, Tag_Number==unique(temp_A$Tag_Number)[i])#
		Z[[i]] <- as.data.frame(matrix(NA,length(L$Date),1))#
		Z[[i]][, 1] 					<- L$Tag_Number[1]#
		Z[[i]][, "Date"] 				<- L$Date#
		Z[[i]][, "Pictures"] 			<- L$Pictures#
		Z[[i]][, "PictureDirection"] 	<- L$PictureDirection#
		Z[[i]][, "Notes"] 				<- L$Notes#
		# for each date#
		for (j in 1:dim(L)[1]) {#
			# fill with occupancy survey data#
			Z[[i]][j, "P_plot_survey"] 	<- L$Pusilla[j]#
			Z[[i]][j, "P_plant_survey"] <-  "NA"#
			Z[[i]][j, "P_Ca"] 			<- L$Ca_P[j]#
			Z[[i]][j, "P_Me"] 			<- L$Me_P[j]#
			Z[[i]][j, "P_Ch"] 			<- L$Ch_P[j]#
			Z[[i]][j, "P_Umoth"] 		<- L$Umoth_P[j]#
			Z[[i]][j, "P_Omoth"] 		<- L$Omoth_P[j]#
			Z[[i]][j, "P_PC"] 			<- L$PC_P[j]#
			Z[[i]][j, "P_H"] 			<- L$H_P[j]#
			Z[[i]][j, "S_plot_survey"] 	<- L$Stricta[j]#
			Z[[i]][j, "S_plant_survey"] <- "NA"#
			Z[[i]][j, "S_Ca"] 			<- L$Ca_S[j]#
			Z[[i]][j, "S_Me"] 			<- L$Me_S[j]#
			Z[[i]][j, "S_Ch"] 			<- L$Ch_S[j]#
			Z[[i]][j, "S_Umoth"] 		<- L$Umoth_S[j]#
			Z[[i]][j, "S_Omoth"] 		<- L$Omoth_S[j]#
			Z[[i]][j, "S_PC"] 			<- L$PC_S[j]#
			Z[[i]][j, "S_H"] 			<- L$H_S[j]#
			# pull all plant survey records for this Tag Number and date from plant surveys#
			M = filter(Plant_Surveys_All, #
				Tag_Number==L$Tag_Number[1], #
				Date==unique(L$Date)[j],#
				# remove plants marked as dead#
				Dead!=1)#
			# remove plants marked as missing	#
			M = M[which(M$Missing!=1 | is.na(M$Missing)==T), ]#
			# if there is plant survey data for this date, update the occupancy survey data#
			# if the M dataframe has at least one row of data:#
			if (dim(M)[1] > 0) {#
				P = filter(M, HostSpecies=="pusilla")#
				Z[[i]][j, "P_plot_survey"] 	<- L$Pusilla[j]#
				Z[[i]][j, "P_plant_survey"] <- ifelse(dim(P)[1] > 0, 1, 0)#
				Z[[i]][j, "P_Ca"] 			<- max(P$CA_t, L[j,]$Ca_P, na.rm=T)#
				Z[[i]][j, "P_Me"] 			<- max(P$ME_t, L[j,]$Me_P, na.rm=T)#
				Z[[i]][j, "P_Ch"] 			<- max(P$CH_t, L[j,]$Ch_P, na.rm=T)#
				Z[[i]][j, "P_Umoth"] 		<- max(#
												P$Unknown_Moth_t, #
												L[j,]$Umoth_P, na.rm=T#
											)#
				Z[[i]][j, "P_Omoth"] 		<- max(#
												P$Old_Moth_Evidence_t, #
												L[j,]$Omoth_P, na.rm=T#
											)#
				Z[[i]][j, "P_PC"] 			<- L$PC_P[j]#
				# Height - if plot survey height is NA, then replace with max height from plant surveys#
				Z[[i]][j, "P_H"] 			<- ifelse(#
												is.na(L$H_P[j]) & dim(P)[1] > 0,#
												max(P$Max_Height, na.rm=T), #
												L$H_P[j]#
											) #
				S = filter(M, HostSpecies=="stricta")#
				Z[[i]][j, "S_plot_survey"] 	<- L$Stricta[j]#
				Z[[i]][j, "S_plant_survey"] <- ifelse(dim(S)[1] > 0, 1, 0)#
				Z[[i]][j, "S_Ca"] 			<- max(S$CA_t, L[j,]$Ca_S, na.rm=T)#
				Z[[i]][j, "S_Me"] 			<- max(S$ME_t, L[j,]$Me_S, na.rm=T)#
				Z[[i]][j, "S_Ch"] 			<- max(S$CH_t, L[j,]$Ch_S, na.rm=T)#
				Z[[i]][j, "S_Umoth"] 		<- max(#
												S$Unknown_Moth_t, #
												L[j,]$Umoth_S, #
												na.rm=T#
											)#
				Z[[i]][j, "S_Omoth"] 		<- max(#
												S$Old_Moth_Evidence_t, #
												L[j,]$Omoth_S,#
												na.rm=T#
											)#
				Z[[i]][j, "S_PC"] 			<- L$PC_S[j]#
				# Height - if plot survey height is NA, then replace with max height from plant surveys#
				Z[[i]][j, "S_H"] <- ifelse(#
					is.na(L$H_S[j]) & dim(S)[1] > 0, #
					max(S$Max_Height, na.rm=T), #
					L$H_S[j]#
				)#
			}#
		}	#
	}#
	A <- do.call(rbind.data.frame, Z)#
	names(A)[1] <- "Tag_Number"#
	#  FIX DATA FORMAT#
	A[,c(column_list,#
		"P_plot_survey", #
		"P_PC", #
		"P_H", #
		"S_plot_survey", #
		"S_PC", #
		"S_H")] %<>%#
		apply(., 2, as.numeric#
	)#
	A[,c(column_list,#
		"P_plot_survey", #
		"P_PC", #
		"P_H", #
		"S_plot_survey", #
		"S_PC", #
		"S_H")] %<>%#
		apply(., 2, NA_Function#
	)#
	return(A)#
}#
#
#' fill demography plot surveys with info from pl
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
mergePlotSurveysDemoPlotSurveys <- function(D_Plot_Surveys, Plant_Surveys) {#
	Z = list()#
	# for each tag number in the demography plot survey data#
	for (i in 1:length(unique(D_Plot_Surveys$Tag_Number))) {#
		# pull all records for this Tag Number from plot surveys#
		L = filter(#
			D_Plot_Surveys, #
			Tag_Number==unique(D_Plot_Surveys$Tag_Number)[i]#
		)#
		Z[[i]] 			<- as.data.frame(matrix(NA,length(unique(L$Date)),1))#
		Z[[i]][, 1] 	<- L$Tag_Number[1]#
		Z[[i]][, "Date"] <- unique(L$Date)#
		# for each date#
		for (j in 1:length(unique(L$Date))) {#
			# pull all plant survey records for this Tag Number and date from plant surveys#
			M = filter(#
				Plant_Surveys, #
				Tag_Number==L$Tag_Number[1], #
				Date==unique(L$Date)[j],#
				# remove plants marked as dead#
				Dead!=1#
			)#
			# remove plants marked as missing	#
			M = M[which(M$Missing!=1 | is.na(M$Missing)==T), ]#
			P = filter(M, HostSpecies=="pusilla")#
			Z[[i]][j, "P_plant_survey"] <-  ifelse(dim(P)[1] > 0, 1, 0) #
			Z[[i]][j, "P_Ca"] 			<-  max(P$CACA_t, na.rm=T) #
			Z[[i]][j, "P_Me"] 			<-  max(P$MEPR_t, na.rm=T) #
			Z[[i]][j, "P_Ch"] 			<-  max(P$CHVI_t, na.rm=T) #
			Z[[i]][j, "P_Umoth"] 		<-  max(P$Unknown_Moth_t, na.rm=T) #
			Z[[i]][j, "P_Omoth"] 		<-  max(P$Old_Moth_Evidence_t, na.rm=T) #
			Z[[i]][j, "P_H"] 			<- max(P$Max_Height, na.rm=T)#
			S = filter(M, HostSpecies=="stricta")#
			Z[[i]][j, "S_plant_survey"] <- ifelse(dim(S)[1] > 0, 1, 0) #
			Z[[i]][j, "S_Ca"] 			<- max(S$CACAt, na.rm=T) #
			Z[[i]][j, "S_Me"] 			<- max(S$MEPR_t, na.rm=T) #
			Z[[i]][j, "S_Ch"] 			<- max(S$CHVI_t, na.rm=T) #
			Z[[i]][j, "S_Umoth"] 		<- max(S$Unknown_Moth_t, na.rm=T) #
			Z[[i]][j, "S_Omoth"] 		<- max(S$Old_Moth_Evidence_t, na.rm=T) #
			Z[[i]][j, "S_H"] 			<- max(S$Max_Height, na.rm=T)#
		}#
	}#
	B <- do.call(rbind.data.frame, Z)#
	names(B)[1] <- "Tag_Number"#
	#  FIX DATA FORMAT#
	B[,c(#
		column_list,#
		"P_H", #
		"S_H")] %<>%#
		apply(., 2, as.numeric#
	)#
	B[,c(#
		column_list,#
		"P_H",  #
		"S_H")] %<>%#
		apply(., 2, NA_Function#
	)#
	return(B)	#
}#
#' Create occupancy plot survey data from plant surveys#
#' @description This data is from when I wa
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
createPlotSurveysfromPlantSurveys <- function(Plant_Surveys, Plot_Surveys, D_Plot_Surveys) {#
	# create Tag/Date Combo Field#
	Plant_Surveys 	%<>% mutate(Tag_Date=paste(Tag_Number, Date))#
	Plot_Surveys 	%<>% mutate(Tag_Date=paste(Tag_Number, Date))#
	D_Plot_Surveys 	%<>% mutate(Tag_Date=paste(Tag_Number, Date))#
	# keep records of Tag Numbers not surveyed on particular dates#
	temp.plant.surveys <- filter(#
		Plant_Surveys_All, #
		!(Tag_Date %in% Plot_Surveys_All$Tag_Date),#
		!(Tag_Date %in% D_Plot_Surveys$Tag_Date)#
	)#
	# print plants with Tag_Number==NA as warning#
	warning("Plants with Tag_Number==NA:"#
		print(filter(#
			temp.plant.surveys, #
			is.na(temp.plant.surveys$Tag_Number)==TRUE)$PlantID#
		)#
	)#
	# remove plants with Tag_Number==NA#
	temp.plant.surveys <- filter(#
		temp.plant.surveys, #
		is.na(temp.plant.surveys$Tag_Number)==FALSE#
	)#
	Z = list()#
	# for each tag number in the demography plot survey data#
	for (i in 1:length(unique(temp.plant.surveys$Tag_Number))) {#
		# pull all records for this Tag Number from temp.plant.surveys#
		L = filter(#
			temp.plant.surveys, #
			Tag_Number==unique(temp.plant.surveys$Tag_Number)[i]#
		)#
		Z[[i]] 			<- as.data.frame(matrix(NA,length(unique(L$Date)),1))	#
		Z[[i]][, 1] 	<- L$Tag_Number[1]#
		Z[[i]][, "Date"] <- unique(L$Date)#
		# for each date#
		for (j in 1:length(unique(L$Date))) {#
			# pull all plant survey records for this Tag Number and date from plant surveys remove plants marked as missing or dead	#
			M = filter(L, Date==unique(L$Date)[j], Dead!=1)#
			M = M[which(M$Missing!=1 | is.na(M$Missing)==T), ]#
			# get list of PlantIDs for this plot#
			N = filter(#
				Plant_Info, #
				Tag_Number==L$Tag_Number[1], #
				# only include plants that are listed as having been added to Plant.Info on or after Date#
				First.Survey.Date <= unique(L$Date)[j],#
				# exclude dead plants (including date plant was first recorded as dead)#
				FirstDeadMissingObservation > unique(L$Date)[j] | #
					is.na(FirstDeadMissingObservation)==T#
			)#
			# if all PlotPlantIDs were surveyed for a given date:#
			if (identical(#
				M$PlotPlantID[order(M$PlotPlantID)], #
				N$PlotPlantID[order(N$PlotPlantID)]#
			)==T) {#
				P = filter(M, HostSpecies=="pusilla")#
				Z[[i]][j, "P_plant_survey"] <- ifelse(dim(P)[1] > 0, 1, 0) #
				Z[[i]][j, "P_Ca"] 			<- max(P$CACA_t, na.rm=T) #
				Z[[i]][j, "P_Me"] 			<- max(P$MEPR_t, na.rm=T) #
				Z[[i]][j, "P_Ch"] 			<- max(P$CHVI_t, na.rm=T) #
				Z[[i]][j, "P_Umoth"] 		<- max(P$Unknown_Moth_t, na.rm=T) #
				Z[[i]][j, "P_Omoth"] 		<- max(P$Old_Moth_Evidence_t, na.rm=T) #
				S = filter(M, HostSpecies=="stricta")#
				Z[[i]][j, "S_plant_survey"] <- ifelse(dim(S)[1] > 0, 1, 0) #
				Z[[i]][j, "S_Ca"] 			<- max(S$CACA_t, na.rm=T) #
				Z[[i]][j, "S_Me"] 			<- max(S$MEPR_t, na.rm=T) #
				Z[[]][j, "S_Ch"] 			<- max(S$CHVI_t, na.rm=T) #
				Z[[i]][j, "S_Umoth"] 		<- max(S$Unknown_Moth_t, na.rm=T) #
				Z[[i]][j, "S_Omoth"] 		<- max(S$Old_Moth_Evidence_t, na.rm=T)#
			} #
			# if all PlotPlantIDs were NOT surveyed on this date#
			else {#
				P = filter(M, HostSpecies=="pusilla")#
				Z[[i]][j, "P_plant_survey"] <- ifelse(dim(P)[1] > 0, 1, NA) #
				Z[[i]][j, "P_Ca"] 			<- mysum1(P$CACA_t)#
				Z[[i]][j, "P_Me"] 			<- mysum1(P$MEPR_t)#
				Z[[i]][j, "P_Ch"] 			<- mysum1(P$CHVI_t)#
				Z[[i]][j, "P_Umoth"] 		<- mysum1(P$Unknown_Moth_t)#
				Z[[i]][j, "P_Omoth"] 		<- mysum1(P$Old_Moth_Evidence_t)#
				S = filter(M, HostSpecies=="stricta")#
				Z[[i]][j, "S_plant_survey"] <- ifelse(dim(S)[1] > 0, 1, NA) #
				Z[[i]][j, "S_Ca"] 			<- mysum1(S$CACA_t)#
				Z[[i]][j, "S_Me"] 			<- mysum1(S$MEPR_t)#
				Z[[i]][j, "S_Ch"] 			<- mysum1(S$CHVI_t)#
				Z[[i]][j, "S_Umoth"] 		<- mysum1(S$Unknown_Moth_t)#
				Z[[i]][j, "S_Omoth"] 		<- mysum1(S$Old_Moth_Evidence_t)#
			}#
		}#
	}	#
	C <- do.call(rbind.data.frame, Z)#
	names(C)[1] <- "Tag_Number"#
	# FIX DATA FORMAT#
	C[, column_list] %<>% apply(., 2, as.numeric)#
	C[, column_list] %<>% apply(., 2, NA_Function)#
	return(C)	#
}#
#
#' Create occupancy plot survey data from original plant su
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
createPlotSurveysfromPlantSurveys <- function(Plant_Surveys, Plot_Surveys, D_Plot_Surveys) {#
	# create Tag/Date Combo Field#
	Plant_Surveys 	%<>% mutate(Tag_Date=paste(Tag_Number, Date))#
	Plot_Surveys 	%<>% mutate(Tag_Date=paste(Tag_Number, Date))#
	D_Plot_Surveys 	%<>% mutate(Tag_Date=paste(Tag_Number, Date))#
	# keep records of Tag Numbers not surveyed on particular dates#
	temp.plant.surveys <- filter(#
		Plant_Surveys_All, #
		!(Tag_Date %in% Plot_Surveys_All$Tag_Date),#
		!(Tag_Date %in% D_Plot_Surveys$Tag_Date)#
	)#
	# print plants with Tag_Number==NA as warning#
	warning("Plants with Tag_Number==NA:"#
		print(filter(#
			temp.plant.surveys, #
			is.na(temp.plant.surveys$Tag_Number)==TRUE)$PlantID#
		)#
	)#
	# remove plants with Tag_Number==NA#
	temp.plant.surveys <- filter(#
		temp.plant.surveys, #
		is.na(temp.plant.surveys$Tag_Number)==FALSE#
	)#
	Z = list()#
	# for each tag number in the demography plot survey data#
	for (i in 1:length(unique(temp.plant.surveys$Tag_Number))) {#
		# pull all records for this Tag Number from temp.plant.surveys#
		L = filter(#
			temp.plant.surveys, #
			Tag_Number==unique(temp.plant.surveys$Tag_Number)[i]#
		)#
		Z[[i]] 			<- as.data.frame(matrix(NA,length(unique(L$Date)),1))	#
		Z[[i]][, 1] 	<- L$Tag_Number[1]#
		Z[[i]][, "Date"] <- unique(L$Date)#
		# for each date#
		for (j in 1:length(unique(L$Date))) {#
			# pull all plant survey records for this Tag Number and date from plant surveys remove plants marked as missing or dead	#
			M = filter(L, Date==unique(L$Date)[j], Dead!=1)#
			M = M[which(M$Missing!=1 | is.na(M$Missing)==T), ]#
			# get list of PlantIDs for this plot#
			N = filter(#
				Plant_Info, #
				Tag_Number==L$Tag_Number[1], #
				# only include plants that are listed as having been added to Plant.Info on or after Date#
				First.Survey.Date <= unique(L$Date)[j],#
				# exclude dead plants (including date plant was first recorded as dead)#
				FirstDeadMissingObservation > unique(L$Date)[j] | #
					is.na(FirstDeadMissingObservation)==T#
			)#
			# if all PlotPlantIDs were surveyed for a given date:#
			if (identical(#
				M$PlotPlantID[order(M$PlotPlantID)], #
				N$PlotPlantID[order(N$PlotPlantID)]#
			)==T) {#
				P = filter(M, HostSpecies=="pusilla")#
				Z[[i]][j, "P_plant_survey"] <- ifelse(dim(P)[1] > 0, 1, 0) #
				Z[[i]][j, "P_Ca"] 			<- max(P$CACA_t, na.rm=T) #
				Z[[i]][j, "P_Me"] 			<- max(P$MEPR_t, na.rm=T) #
				Z[[i]][j, "P_Ch"] 			<- max(P$CHVI_t, na.rm=T) #
				Z[[i]][j, "P_Umoth"] 		<- max(P$Unknown_Moth_t, na.rm=T) #
				Z[[i]][j, "P_Omoth"] 		<- max(P$Old_Moth_Evidence_t, na.rm=T) #
				S = filter(M, HostSpecies=="stricta")#
				Z[[i]][j, "S_plant_survey"] <- ifelse(dim(S)[1] > 0, 1, 0) #
				Z[[i]][j, "S_Ca"] 			<- max(S$CACA_t, na.rm=T) #
				Z[[i]][j, "S_Me"] 			<- max(S$MEPR_t, na.rm=T) #
				Z[[]][j, "S_Ch"] 			<- max(S$CHVI_t, na.rm=T) #
				Z[[i]][j, "S_Umoth"] 		<- max(S$Unknown_Moth_t, na.rm=T) #
				Z[[i]][j, "S_Omoth"] 		<- max(S$Old_Moth_Evidence_t, na.rm=T)#
			} #
			# if all PlotPlantIDs were NOT surveyed on this date#
			else {#
				P = filter(M, HostSpecies=="pusilla")#
				Z[[i]][j, "P_plant_survey"] <- ifelse(dim(P)[1] > 0, 1, NA) #
				Z[[i]][j, "P_Ca"] 			<- mysum1(P$CACA_t)#
				Z[[i]][j, "P_Me"] 			<- mysum1(P$MEPR_t)#
				Z[[i]][j, "P_Ch"] 			<- mysum1(P$CHVI_t)#
				Z[[i]][j, "P_Umoth"] 		<- mysum1(P$Unknown_Moth_t)#
				Z[[i]][j, "P_Omoth"] 		<- mysum1(P$Old_Moth_Evidence_t)#
				S = filter(M, HostSpecies=="stricta")#
				Z[[i]][j, "S_plant_survey"] <- ifelse(dim(S)[1] > 0, 1, NA) #
				Z[[i]][j, "S_Ca"] 			<- mysum1(S$CACA_t)#
				Z[[i]][j, "S_Me"] 			<- mysum1(S$MEPR_t)#
				Z[[i]][j, "S_Ch"] 			<- mysum1(S$CHVI_t)#
				Z[[i]][j, "S_Umoth"] 		<- mysum1(S$Unknown_Moth_t)#
				Z[[i]][j, "S_Omoth"] 		<- mysum1(S$Old_Moth_Evidence_t)#
			}#
		}#
	}	#
	C <- do.call(rbind.data.frame, Z)#
	names(C)[1] <- "Tag_Number"#
	# FIX DATA FORMAT#
	C[, column_list] %<>% apply(., 2, as.numeric)#
	C[, column_list] %<>% apply(., 2, NA_Function)#
	return(C)	#
}#
#
#' Create occupancy plot survey data from original plant su
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys#
#
# --------------------------------------------------------------------------- ##
# --------------------------------------------------------------------------- ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info) %>%#
	processPlantSurveysafterMergewPlantInfo#
Plant_Surveys_by_Plant <- Plant_Surveys %>% processSurveysMergedbyPlant#
# create Fecundity and RGR dataset - only measured size during the spring and summer#
Plant_Surveys_by_Year <- Plant_Surveys_by_Plant %>% #
	group_by(SamplingYear, PlantID) %>%#
	summarise(#
		Species = Species[1],#
		Network = Network[1],#
		Island = Island[1],#
		ReproductiveMode = ReproductiveMode[1],#
		Date = min(Date),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		FruitFlowerPres_t = max(FruitFlowerPres_t, na.rm=T),#
		Size_t = max(Size_t, na.rm=T),#
		Height_t = max(Height_t, na.rm=T),#
		Fruit_t = max(Fruit_t, na.rm=T),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		CA_t = max(CA_t, na.rm=T),#
		ME_t = max(ME_t, na.rm=T),#
		DA_t = max(DA_t, na.rm=T),#
		CH_t = max(CH_t, na.rm=T),#
		Old_Moth_Evidence_t = max(Old_Moth_Evidence_t, na.rm=T)#
	) %>% #
	mutate(PrevSamplingYear = SamplingYear - 1) %>%#
	# lag variables#
	calculateSizeLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateDateLags %>%#
	createNewInsectVariables(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateInsectLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	as.data.frame %>%#
	calculateRGR ## this leads to a few values with PlantID = NA#
# --------------------------------------------------------------------------- ##
########################## ERROR MESSAGE#
	# check for PlantID = NA#
	dups <- Plant_Surveys_by_Year %>% #
		filter(is.na(PlantID))#
#
	if (dim(dups)[1] > 0) {#
			stop("NA values for PlantID.")#
	}#
	# should not be any non-NA values for RGR for SamplingYear 2012#
	dups <- Plant_Surveys_by_Year %>% #
		filter(SamplingYear==2012) %>%#
		filter(!is.na(RGR_Height))#
#
	if (dim(dups)[1] > 0) {#
			stop("Non-NA values for RGR for first Sampling Year.")#
	}#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Size_t_1 %<>% as.numeric#
Plant_Surveys_by_Year[,c(#
	"Old_Moth_Evidence_t",#
	"NatInsect_t",#
	"Insect_t",#
	"DA_t",#
	"CH_t",#
	"ME_t",#
	"CA_t",                #
	"Size_t",#
	"FruitPres_t",#
	"FruitFlowerPres_t",#
	"Fruit_t",#
	"Size_t_1",#
	"DaysSincePrevSurvey",#
	"DaysSinceStart",#
	"CA_t_1",#
	"ME_t_1",#
	"CH_t_1",#
	"DA_t_1",#
	"Insect_t_1",#
	"NatInsect_t_1",#
	"Old_Moth_Evidence_t_1"#
)] %<>% apply(., 2, as.integer)#
Plant_Surveys_by_Year[,c(#
	"Height_t",#
	"Height_t_1",#
	"RGR_Height",#
	"RGR_Height365",#
	"RGR_Size",#
	"RGR_Size365"#
)] %<>% apply(., 2, as.numeric)#
Plant_Surveys_by_Year$PlantID %<>% as.factor	#
Plant_Surveys_by_Year$SamplingYear %<>% as.factor#
Plant_Surveys_by_Year$Species %<>% as.factor#
Plant_Surveys_by_Year$Network %<>% as.factor#
Plant_Surveys_by_Year$Island %<>% as.factor#
Plant_Surveys_by_Year$ReproductiveMode %<>% as.factor#
Plant_Surveys_by_Year$Year <- year(Plant_Surveys_by_Year$Date)#
Plant_Surveys_by_Year$PrevYear <- year(Plant_Surveys_by_Year$Date) - 1#
#
Plant_Surveys_analysis <- Plant_Surveys_by_Year %>% 	#
	as.data.frame %>%#
 	droplevels %>% #
 	mutate(Ln_Size_t_1_st = arm::rescale(log(Size_t_1))) %>%#
 	dplyr::select(#
 		Species,#
		PlantID,#
 		Date,#
		Year,#
		PrevYear,#
 		Network,#
 		Island,#
 		Size_t_1,#
 		Height_t_1,#
 		CA_t_1,#
 		ME_t_1,#
 		Old_Moth_Evidence_t_1,#
 		RGR_Size,#
 		RGR_Height,#
 		Ln_Size_t_1_st,#
 		FruitPres_t,#
 		Fruit_t#
 	) %>%#
 	.[complete.cases(.),]#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling/data')#
# write.csv(Plant_Surveys_stricta_analysis, "Plant_Surveys_stricta.csv")#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_stricta")#
################################################################################
# Save modified timeseries dataset - just pusilla#
################################################################################
# Plant_Surveys_pusilla =	Plant_Surveys_by_Year %>% #
# 	filter(Species=="Opuntia pusilla")#
# Plant_Surveys_pusilla$Species %<>% droplevels#
#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_pusilla")
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# ---------------------------------------------------- DATA CHECKING#
# compare these numbers to the numbers after data is further processed#
#
# number of CACA observations#
length(Plot_Surveys[which(Plot_Surveys$CACA_on_Stricta=="Yes"), ]$CACA_on_Stricta)#
# number of MEPR observations#
length(Plot_Surveys[which(Plot_Surveys$MEPR_on_Stricta=="Yes"), ]$MEPR_on_Stricta)#
# don't exclude all plots for the demography study#
#
# --------------------------------------------------------------------------- ##
# --------------- Occupancy Plot Info --------------------------------------- ##
# --------------------------------------------------------------------------- ##
#
Plot_Info %<>% processOccupancyPlotInfo#
#
# check errors by keeping track of dataframe size#
Plot_Info_Size = as.data.frame(matrix(NA, 1, 1))#
Plot_Info_Size[, 1] = dim(Plot_Info)[1]#
#
Plot_Surveys %<>% processOccupancyPlotSurveys
library(dataproc)
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# ---------------------------------------------------- DATA CHECKING#
# compare these numbers to the numbers after data is further processed#
#
# number of CACA observations#
length(Plot_Surveys[which(Plot_Surveys$CACA_on_Stricta=="Yes"), ]$CACA_on_Stricta)#
# number of MEPR observations#
length(Plot_Surveys[which(Plot_Surveys$MEPR_on_Stricta=="Yes"), ]$MEPR_on_Stricta)#
# don't exclude all plots for the demography study#
#
# --------------------------------------------------------------------------- ##
# --------------- Occupancy Plot Info --------------------------------------- ##
# --------------------------------------------------------------------------- ##
#
Plot_Info %<>% processOccupancyPlotInfo#
#
# check errors by keeping track of dataframe size#
Plot_Info_Size = as.data.frame(matrix(NA, 1, 1))#
Plot_Info_Size[, 1] = dim(Plot_Info)[1]#
#
Plot_Surveys %<>% processOccupancyPlotSurveys
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys#
#
# --------------------------------------------------------------------------- ##
# --------------------------------------------------------------------------- ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info) %>%#
	processPlantSurveysafterMergewPlantInfo#
Plant_Surveys_by_Plant <- Plant_Surveys %>% processSurveysMergedbyPlant#
# create Fecundity and RGR dataset - only measured size during the spring and summer#
Plant_Surveys_by_Year <- Plant_Surveys_by_Plant %>% #
	group_by(SamplingYear, PlantID) %>%#
	summarise(#
		Species = Species[1],#
		Network = Network[1],#
		Island = Island[1],#
		ReproductiveMode = ReproductiveMode[1],#
		Date = min(Date),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		FruitFlowerPres_t = max(FruitFlowerPres_t, na.rm=T),#
		Size_t = max(Size_t, na.rm=T),#
		Height_t = max(Height_t, na.rm=T),#
		Fruit_t = max(Fruit_t, na.rm=T),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		CA_t = max(CA_t, na.rm=T),#
		ME_t = max(ME_t, na.rm=T),#
		DA_t = max(DA_t, na.rm=T),#
		CH_t = max(CH_t, na.rm=T),#
		Old_Moth_Evidence_t = max(Old_Moth_Evidence_t, na.rm=T)#
	) %>% #
	mutate(PrevSamplingYear = SamplingYear - 1) %>%#
	# lag variables#
	calculateSizeLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateDateLags %>%#
	createNewInsectVariables(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateInsectLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	as.data.frame %>%#
	calculateRGR ## this leads to a few values with PlantID = NA#
# --------------------------------------------------------------------------- ##
########################## ERROR MESSAGE#
	# check for PlantID = NA#
	dups <- Plant_Surveys_by_Year %>% #
		filter(is.na(PlantID))#
#
	if (dim(dups)[1] > 0) {#
			stop("NA values for PlantID.")#
	}#
	# should not be any non-NA values for RGR for SamplingYear 2012#
	dups <- Plant_Surveys_by_Year %>% #
		filter(SamplingYear==2012) %>%#
		filter(!is.na(RGR_Height))#
#
	if (dim(dups)[1] > 0) {#
			stop("Non-NA values for RGR for first Sampling Year.")#
	}#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Size_t_1 %<>% as.numeric#
Plant_Surveys_by_Year[,c(#
	"Old_Moth_Evidence_t",#
	"NatInsect_t",#
	"Insect_t",#
	"DA_t",#
	"CH_t",#
	"ME_t",#
	"CA_t",                #
	"Size_t",#
	"FruitPres_t",#
	"FruitFlowerPres_t",#
	"Fruit_t",#
	"Size_t_1",#
	"DaysSincePrevSurvey",#
	"DaysSinceStart",#
	"CA_t_1",#
	"ME_t_1",#
	"CH_t_1",#
	"DA_t_1",#
	"Insect_t_1",#
	"NatInsect_t_1",#
	"Old_Moth_Evidence_t_1"#
)] %<>% apply(., 2, as.integer)#
Plant_Surveys_by_Year[,c(#
	"Height_t",#
	"Height_t_1",#
	"RGR_Height",#
	"RGR_Height365",#
	"RGR_Size",#
	"RGR_Size365"#
)] %<>% apply(., 2, as.numeric)#
Plant_Surveys_by_Year$PlantID %<>% as.factor	#
Plant_Surveys_by_Year$SamplingYear %<>% as.factor#
Plant_Surveys_by_Year$Species %<>% as.factor#
Plant_Surveys_by_Year$Network %<>% as.factor#
Plant_Surveys_by_Year$Island %<>% as.factor#
Plant_Surveys_by_Year$ReproductiveMode %<>% as.factor#
Plant_Surveys_by_Year$Year <- year(Plant_Surveys_by_Year$Date)#
Plant_Surveys_by_Year$PrevYear <- year(Plant_Surveys_by_Year$Date) - 1#
#
Plant_Surveys_analysis <- Plant_Surveys_by_Year %>% 	#
	as.data.frame %>%#
 	droplevels %>% #
 	mutate(Ln_Size_t_1_st = arm::rescale(log(Size_t_1))) %>%#
 	dplyr::select(#
 		Species,#
		PlantID,#
 		Date,#
		Year,#
		PrevYear,#
 		Network,#
 		Island,#
 		Size_t_1,#
 		Height_t_1,#
 		CA_t_1,#
 		ME_t_1,#
 		Old_Moth_Evidence_t_1,#
 		RGR_Size,#
 		RGR_Height,#
 		Ln_Size_t_1_st,#
 		FruitPres_t,#
 		Fruit_t#
 	) %>%#
 	.[complete.cases(.),]#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling/data')#
# write.csv(Plant_Surveys_stricta_analysis, "Plant_Surveys_stricta.csv")#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_stricta")#
################################################################################
# Save modified timeseries dataset - just pusilla#
################################################################################
# Plant_Surveys_pusilla =	Plant_Surveys_by_Year %>% #
# 	filter(Species=="Opuntia pusilla")#
# Plant_Surveys_pusilla$Species %<>% droplevels#
#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_pusilla")
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# ---------------------------------------------------- DATA CHECKING#
# compare these numbers to the numbers after data is further processed#
#
# number of CACA observations#
length(Plot_Surveys[which(Plot_Surveys$CACA_on_Stricta=="Yes"), ]$CACA_on_Stricta)#
# number of MEPR observations#
length(Plot_Surveys[which(Plot_Surveys$MEPR_on_Stricta=="Yes"), ]$MEPR_on_Stricta)#
# don't exclude all plots for the demography study#
#
# --------------------------------------------------------------------------- ##
# --------------- Occupancy Plot Info --------------------------------------- ##
# --------------------------------------------------------------------------- ##
#
Plot_Info %<>% processOccupancyPlotInfo#
#
# check errors by keeping track of dataframe size#
Plot_Info_Size = as.data.frame(matrix(NA, 1, 1))#
Plot_Info_Size[, 1] = dim(Plot_Info)[1]#
#
Plot_Surveys %<>% processOccupancyPlotSurveys
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
# --------------------------------------------------------------------------- ##
# CHECK THIS FILE TO SEE THAT CACTUS PRESENCE FROM PLOT SURVEYS MATCHES CACTUS PRESENCE FROM PLANT SURVEYS#
# --------------------------------------------------------------------------- ##
# WHY IS THERE A TAG NUMBER = NA?#
# STILL NOT CORRECT#
# LOTS OF NAS FOR STRICTA AND PUSILLA FOR THEIR PRESENCE/ABSENCE#
#
changeVariableNames <- function(Plot_Surveys) {#
	Plot_Surveys %<>% #
		as.data.table %<>%#
		# pusilla#
		setnames("CACA_on_Pusilla", 			"P_Ca") %>%#
		setnames("MEPR_on_Pusilla", 			"P_Me") %>%#
		setnames("CHVI_on_Pusilla", 			"P_Ch") %>%#
		setnames("UnknwnMoth_on_Pusilla", 		"P_Umoth") %>%#
		setnames("Old_Moth_Evidence_Pusilla", 	"P_Omoth") %>%#
		setnames("Height_Pusilla", 				"P_H") %>%#
		setnames("Percent_Cover_Pusilla",		"P_PC")  %>%#
		# stricta#
		setnames("CACA_on_Stricta", 			"S_Ca") %>%#
		setnames("MEPR_on_Stricta", 			"S_Me") %>%#
		setnames("CHVI_on_Stricta", 			"S_Ch") %>%#
		setnames("UnknwnMoth_on_Stricta", 		"S_Umoth") %>%#
		setnames("Old_Moth_Evidence_Stricta", 	"S_Omoth") %>%#
		setnames("Height_Stricta",				"S_H")  %>%#
		setnames("Percent_Cover_Stricta",		"S_PC") %>%#
		as.data.frame	#
}#
#
column_list <- c(		#
	"P_plant_survey", #
	"P_Ca", #
	"P_Me", #
	"P_Ch", #
	"P_Umoth", #
	"P_Omoth", #
	"S_plant_survey", #
	"S_Ca", #
	"S_Me", #
	"S_Ch", #
	"S_Umoth", #
	"S_Omoth"#
)
setwd('/Users/KSauby/Documents/Dropbox/gradschool/Research/Projects/sampling/munge')
A <- mergePlantSurveysPlotSurveys(Plot_Surveys, Plant_Surveys)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
temp_A = filter(#
		Plot_Surveys, #
		Date > "2012-12-01", Tag_Number %in% Plant_Surveys$Tag_Number#
	)#
	Z = list()
dim(temp_A)
i=1
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
L = filter(temp_A, Tag_Number==unique(temp_A$Tag_Number)[i])#
		Z[[i]] <- as.data.frame(matrix(NA,length(L$Date),1))#
		Z[[i]][, 1] 					<- L$Tag_Number[1]#
		Z[[i]][, "Date"] 				<- L$Date#
		Z[[i]][, "Pictures"] 			<- L$Pictures#
		Z[[i]][, "PictureDirection"] 	<- L$PictureDirection#
		Z[[i]][, "Notes"] 				<- L$Notes
L
j=1
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
mergePlantSurveysPlotSurveys <- function(Plot_Surveys, Plant_Surveys) {#
	temp_A = filter(#
		Plot_Surveys, #
		Date > "2012-12-01", Tag_Number %in% Plant_Surveys$Tag_Number#
	)#
	Z = list()#
	# for each tag number in the plot surveys data#
	for (i in 1:length(unique(temp_A$Tag_Number))) {#
		# pull all records for this Tag Number from plot surveys#
		L = filter(temp_A, Tag_Number==unique(temp_A$Tag_Number)[i])#
		Z[[i]] <- as.data.frame(matrix(NA,length(L$Date),1))#
		Z[[i]][, 1] 					<- L$Tag_Number[1]#
		Z[[i]][, "Date"] 				<- L$Date#
		Z[[i]][, "Pictures"] 			<- L$Pictures#
		Z[[i]][, "PictureDirection"] 	<- L$PictureDirection#
		Z[[i]][, "Notes"] 				<- L$Notes#
		# for each date#
		for (j in 1:dim(L)[1]) {#
			# fill with occupancy survey data#
			Z[[i]][j, "P_plot_survey"] 	<- L$Pusilla[j]#
			Z[[i]][j, "P_plant_survey"] <-  "NA"#
			Z[[i]][j, "P_Ca"] 			<- L$P_Ca[j]#
			Z[[i]][j, "P_Me"] 			<- L$P_Me[j]#
			Z[[i]][j, "P_Ch"] 			<- L$P_Ch[j]#
			Z[[i]][j, "P_Umoth"] 		<- L$P_Umoth[j]#
			Z[[i]][j, "P_Omoth"] 		<- L$P_Omoth[j]#
			Z[[i]][j, "P_PC"] 			<- L$P_PC[j]#
			Z[[i]][j, "P_H"] 			<- L$P_H[j]#
			Z[[i]][j, "S_plot_survey"] 	<- L$Stricta[j]#
			Z[[i]][j, "S_plant_survey"] <- "NA"#
			Z[[i]][j, "S_Ca"] 			<- L$S_Ca[j]#
			Z[[i]][j, "S_Me"] 			<- L$S_Me[j]#
			Z[[i]][j, "S_Ch"] 			<- L$S_Ch[j]#
			Z[[i]][j, "S_Umoth"] 		<- L$S_Umoth[j]#
			Z[[i]][j, "S_Omoth"] 		<- L$S_Omoth[j]#
			Z[[i]][j, "S_PC"] 			<- L$S_PC[j]#
			Z[[i]][j, "S_H"] 			<- L$S_H[j]#
			# pull all plant survey records for this Tag Number and date from plant surveys#
			M = filter(Plant_Surveys_All, #
				Tag_Number==L$Tag_Number[1], #
				Date==unique(L$Date)[j],#
				# remove plants marked as dead#
				Dead!=1)#
			# remove plants marked as missing	#
			M = M[which(M$Missing!=1 | is.na(M$Missing)==T), ]#
			# if there is plant survey data for this date, update the occupancy survey data#
			# if the M dataframe has at least one row of data:#
			if (dim(M)[1] > 0) {#
				P = filter(M, HostSpecies=="pusilla")#
				Z[[i]][j, "P_plot_survey"] 	<- L$Pusilla[j]#
				Z[[i]][j, "P_plant_survey"] <- ifelse(dim(P)[1] > 0, 1, 0)#
				Z[[i]][j, "P_Ca"] 			<- max(P$CA_t, L[j,]$P_Ca, na.rm=T)#
				Z[[i]][j, "P_Me"] 			<- max(P$ME_t, L[j,]$P_Me, na.rm=T)#
				Z[[i]][j, "P_Ch"] 			<- max(P$CH_t, L[j,]$P_Ch, na.rm=T)#
				Z[[i]][j, "P_Umoth"] 		<- max(#
												P$Unknown_Moth_t, #
												L[j,]$P_Umoth, na.rm=T#
											)#
				Z[[i]][j, "P_Omoth"] 		<- max(#
												P$Old_Moth_Evidence_t, #
												L[j,]$P_Omoth, na.rm=T#
											)#
				Z[[i]][j, "P_PC"] 			<- L$P_PC_P[j]#
				# Height - if plot survey height is NA, then replace with max height from plant surveys#
				Z[[i]][j, "P_H"] 			<- ifelse(#
												is.na(L$H_P[j]) & dim(P)[1] > 0,#
												max(P$Max_Height, na.rm=T), #
												L$P_H_P[j]#
											) #
				S = filter(M, HostSpecies=="stricta")#
				Z[[i]][j, "S_plot_survey"] 	<- L$Stricta[j]#
				Z[[i]][j, "S_plant_survey"] <- ifelse(dim(S)[1] > 0, 1, 0)#
				Z[[i]][j, "S_Ca"] 			<- max(S$CA_t, L[j,]$S_Ca, na.rm=T)#
				Z[[i]][j, "S_Me"] 			<- max(S$ME_t, L[j,]$S_Me, na.rm=T)#
				Z[[i]][j, "S_Ch"] 			<- max(S$CH_t, L[j,]$S_Ch, na.rm=T)#
				Z[[i]][j, "S_Umoth"] 		<- max(#
												S$Unknown_Moth_t, #
												L[j,]$S_Umoth, #
												na.rm=T#
											)#
				Z[[i]][j, "S_Omoth"] 		<- max(#
												S$Old_Moth_Evidence_t, #
												L[j,]$S_Omoth,#
												na.rm=T#
											)#
				Z[[i]][j, "S_PC"] 			<- L$S_PC[j]#
				# Height - if plot survey height is NA, then replace with max height from plant surveys#
				Z[[i]][j, "S_H"] <- ifelse(#
					is.na(L$H_S[j]) & dim(S)[1] > 0, #
					max(S$Max_Height, na.rm=T), #
					L$H_S[j]#
				)#
			}#
		}	#
	}#
	A <- do.call(rbind.data.frame, Z)#
	names(A)[1] <- "Tag_Number"#
	#  FIX DATA FORMAT#
	A[,c(column_list,#
		"P_plot_survey", #
		"P_PC", #
		"P_H", #
		"S_plot_survey", #
		"S_PC", #
		"S_H")] %<>%#
		apply(., 2, as.numeric#
	)#
	A[,c(column_list,#
		"P_plot_survey", #
		"P_PC", #
		"P_H", #
		"S_plot_survey", #
		"S_PC", #
		"S_H")] %<>%#
		apply(., 2, NA_Function#
	)#
	return(A)#
}#
#
#' fill demography pl
setwd('/Users/KSauby/Documents/Projects')
setwd("./dataproc")#
#setwd("./modresproc")#
#devtools::test()#
devtools::document()#
devtools::install()
library(dataproc)
