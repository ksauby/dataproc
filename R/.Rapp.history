29/37
28/37
27/37
35/37
30/37
29/37
26/37
26/37 - .6757
28/37
30/37
29/37
37-12
25/37
219*.8
219*.8 - 17
26/3
17/900
42/900
49/900
29/40
1/25
8/25
10/25
(7.5 + 3.75)/15
12*0.75
11 * 0.75
11/15
11*0.25
11/15 * 6
32/41 +0.03.5
32/41 + 0.035
(32/41 + 0.035)*100
100/41
23/40 * 100
(23/40 * 100)+5
(164 + 13.5 + 6)
(164 + 13.5 + 6)/365
(164 + 13.5 + 6 + (50))/365
(164 + 13.5 + 6 + (60))/365
(164 + 13.5 + 6 + (70))/365
(164 + 13.5 + 6 + (75))/365
102/40
102/41
?table
9.49/2
12.75+8.25
(10.5 + 6.5)/(12.75+8.25)
.25^2 * 2
(.25^2 * 2)^0.5
(.25^2 * 2)^0.5 * 2
3/8
5/8
6/8
30*1.5
40*15
40*1.5
13.25 - 4.5
(276.29+8.75)/365
16*3
16*4
84/12
9/12
9/12*14
22+60+78+80+88+98
22+38+18+2+8+10
239/785
(239+53)/785
.492+.139
.412+.166+.002
.412/.58
.166/.58
.412*.58
.71*.58
98-54
22+49+43+33+36+44
60-11
78-26
80-35
88-47
98-52
22+49+52+45+41+46
library(RMark)
?test_ddl
data(dipper)    dipper.processed=process.data(dipper,groups=("sex"))    release.gof(dipper.processed)
4+19+7+12
4+17.83+7+12
40.83/42
40.83/42*14
14
(11.25+5)/(25.5 + 10.25 - 14)
365*0.6666
365*0.6666 - 75.89
5/6 * 2
5/6 * 2 + 75.89
365*0.6666 -77.55667
365*0.6666 -77.55667 - 6 - 13 - 1
145.7523/2
15*3
11*5
8/12*14
4+15.33+5.5+12
(4+15.33+5.5+12)
(4+15.33+5.5+12)/(4+19+7+12)
(4+19+7+12)
(4+15.33+5.5+12)/(4+19+7+12)*14
2.5+17.5+12
32/42
32/42 * 14
4+12+6.5+12
(4+12+6.5+12)/42 * 14
5/6*2
5/6*2 + 0.25
5/6*2 + 0.5
2577.77/12
15/20
15/20*6
300 - 4*50
300 - 4*40
4.5/12*14
9+9+7+9
33.5/34 * 14
32/34 * 14
32/34*14
7+8.5+7+7
(7+8.5+7+7)/34 * 14
(7+5.5+5.5+8.5)/34 * 14
(7+5.5+5.5+8.5)/(9+7+9+9) * 14
9+7+9+9
(14.25+7.25)/(24.75+10.25-9)
(16.5+7.75)/(24.75+10.25)
(16.5+7.75)/(24.75+10.25)*6
(5.25+5.5)/(22.5+10.5)
(5.25+5.5)/(22.5+10.5)*6
(9.75+5.5)/(24.7+10.25-5)*6
(9.75+5.5)/(24.7+10.25-5)
3.98/6
(9.75+5.5)/(24.7+10.25-10)
(9.75+5.5)/(24.7+10.25-10)*6
5/6*2
1.83-5/6*2
1.83-4/6*2
5/6*2 + 0.5
4/6*2 + 0.5
4/6*2
4/6 + 0.5
4/6*2 + 0.5
33/34 * 14
17.5*4
24*4 + 1.75*4
library(dplyr)
library(plyr)
600*.22
setwd('/Users/KSauby/Documents/Projects')
setwd("./dataproc")#
#setwd("./modresproc")#
#setwd("./unmarked")#
#setwd("./RPresence")#
#devtools::test()#
devtools::document()#
devtools::install()
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis')
library(ProjectTemplate)#
#
# when working on a Windows computer#
# setwd("C:/Users/KSauby/Dropbox/gradschool/Research/Projects/sampling")#
#
# load project#
load.project()
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
Plant_Surveys_All <- Demographic.Plant.Surveys#
Plant_Info_All <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y") # Demographic Plot Surveys#
Plant_Surveys %<>% processPlantSurveys(Plant_Info) # Plant Surveys#
Plant_Surveys %<>% fixInconsistentDeadMissingRecords#
Plant_Info %<>% processPlantInfo(Plot_Info) # Plant Info#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info) # Plant Surveys#
Plant_Surveys %<>% processPlantSurveysafterMergewPlantInfo %>%#
	filter(InDemographicStudy=="yes")#
	# cached here#
Plant_Surveys_by_Plant <- Plant_Surveys %>% #
	processSurveysMergedbyPlant#
Plant_Surveys_by_Plant %>% filter(AllSurveyed==F) %>% write.csv("incompletesurveys.csv")#
#
Plant_Surveys %>% filter(N.PlotPlantIDs > 1) %>% filter(Dead==1 | Missing == 1) %>% write.csv("deadmissing.csv")#
#
h <- function(w) if( any( grepl( "no non-missing arguments to max", w) ) ) invokeRestart( "muffleWarning" )#
Plant_Surveys_by_Plant <- withCallingHandlers(#
	createPlantInsectPresence(Plant_Surveys_by_Plant),#
	warning = h#
)#
# create Fecundity and RGR dataset#
Plant_Surveys_by_Year <- createPlantSurveysbyYear(Plant_Surveys_by_Plant) %>%#
	renamePatches #%>%#
	#createMothOccupancytVariable %>%#
	#createMothOccupancyVariable %>%#
	#createDeadFactorVariable#
# Second Plant ID#
Plant_Surveys_by_Year %<>% mutate(#
	PlantIDb = paste(#
		Island,#
		PlantID,#
		sep=", "#
	),#
	PlantIDc = paste(#
		Island,#
		PlantID,#
		sep="\n"#
	)#
)
setwd('/Users/KSauby/Documents/Projects')
setwd("./GTMNERRproc")#
#setwd("./dataproc")#
#setwd("./modresproc")#
#setwd("./unmarked")#
#setwd("./RPresence")#
#devtools::test()#
devtools::document()#
devtools::install()
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
Plant_Surveys_All <- Demographic.Plant.Surveys#
Plant_Info_All <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y") # Demographic Plot Surveys#
Plant_Surveys %<>% processPlantSurveys(Plant_Info) # Plant Surveys#
Plant_Surveys %<>% fixInconsistentDeadMissingRecords#
Plant_Info %<>% processPlantInfo(Plot_Info) # Plant Info#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info) # Plant Surveys#
Plant_Surveys %<>% processPlantSurveysafterMergewPlantInfo %>%#
	filter(InDemographicStudy=="yes")#
	# cached here#
Plant_Surveys_by_Plant <- Plant_Surveys %>% #
	processSurveysMergedbyPlant#
Plant_Surveys_by_Plant %>% filter(AllSurveyed==F) %>% write.csv("incompletesurveys.csv")#
#
Plant_Surveys %>% filter(N.PlotPlantIDs > 1) %>% filter(Dead==1 | Missing == 1) %>% write.csv("deadmissing.csv")#
#
h <- function(w) if( any( grepl( "no non-missing arguments to max", w) ) ) invokeRestart( "muffleWarning" )#
Plant_Surveys_by_Plant <- withCallingHandlers(#
	createPlantInsectPresence(Plant_Surveys_by_Plant),#
	warning = h#
)#
# create Fecundity and RGR dataset#
Plant_Surveys_by_Year <- createPlantSurveysbyYear(Plant_Surveys_by_Plant) %>%#
	renamePatches #%>%#
	#createMothOccupancytVariable %>%#
	#createMothOccupancyVariable %>%#
	#createDeadFactorVariable#
# Second Plant ID#
Plant_Surveys_by_Year %<>% mutate(#
	PlantIDb = paste(#
		Island,#
		PlantID,#
		sep=", "#
	),#
	PlantIDc = paste(#
		Island,#
		PlantID,#
		sep="\n"#
	)#
)
seasons
setwd('/Users/KSauby/Documents/Projects')
setwd("./GTMNERRproc")#
#setwd("./dataproc")#
#setwd("./modresproc")#
#setwd("./unmarked")#
#setwd("./RPresence")#
#devtools::test()#
devtools::document()#
devtools::install()
setwd('/Users/KSauby/Documents/Projects')
setwd("./dataproc")#
#setwd("./modresproc")#
#setwd("./unmarked")#
#setwd("./RPresence")#
#devtools::test()#
devtools::document()#
devtools::install()
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
Plant_Surveys_All <- Demographic.Plant.Surveys#
Plant_Info_All <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y") # Demographic Plot Surveys#
Plant_Surveys %<>% processPlantSurveys(Plant_Info) # Plant Surveys#
Plant_Surveys %<>% fixInconsistentDeadMissingRecords#
Plant_Info %<>% processPlantInfo(Plot_Info) # Plant Info#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info) # Plant Surveys#
Plant_Surveys %<>% processPlantSurveysafterMergewPlantInfo %>%#
	filter(InDemographicStudy=="yes")#
	# cached here#
Plant_Surveys_by_Plant <- Plant_Surveys %>% #
	processSurveysMergedbyPlant#
Plant_Surveys_by_Plant %>% filter(AllSurveyed==F) %>% write.csv("incompletesurveys.csv")#
#
Plant_Surveys %>% filter(N.PlotPlantIDs > 1) %>% filter(Dead==1 | Missing == 1) %>% write.csv("deadmissing.csv")#
#
h <- function(w) if( any( grepl( "no non-missing arguments to max", w) ) ) invokeRestart( "muffleWarning" )#
Plant_Surveys_by_Plant <- withCallingHandlers(#
	createPlantInsectPresence(Plant_Surveys_by_Plant),#
	warning = h#
)#
# create Fecundity and RGR dataset#
Plant_Surveys_by_Year <- createPlantSurveysbyYear(Plant_Surveys_by_Plant) %>%#
	renamePatches #%>%#
	#createMothOccupancytVariable %>%#
	#createMothOccupancyVariable %>%#
	#createDeadFactorVariable#
# Second Plant ID#
Plant_Surveys_by_Year %<>% mutate(#
	PlantIDb = paste(#
		Island,#
		PlantID,#
		sep=", "#
	),#
	PlantIDc = paste(#
		Island,#
		PlantID,#
		sep="\n"#
	)#
)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
Plant_Surveys_All <- Demographic.Plant.Surveys#
Plant_Info_All <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y") # Demographic Plot Surveys#
Plant_Surveys %<>% processPlantSurveys(Plant_Info) # Plant Surveys#
Plant_Surveys %<>% fixInconsistentDeadMissingRecords#
Plant_Info %<>% processPlantInfo(Plot_Info) # Plant Info#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info) # Plant Surveys
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
Plant_Surveys %<>%#
		addSamplingPeriods %>%#
		assignSeason
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
Plant_Surveys %<>%#
		addSamplingPeriods
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
SeasonStarts=seasons
head(Plant_Surveys)
str(Plant_Surveys)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info) # Plant Surveys
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
Plant_Surveys$DemographicSurvey <- "NA"#
	Plant_Surveys %<>% #
		group_by(Date) %>% #
		mutate(#
			# SURVEY 0#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date < "2013-05-14"), "0"),#
			# SURVEY 1 - SPRING/SUMMER 2013#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2013-05-14" & Date <= "2013-08-06"), "1"),#
			# SURVEY 2 - FALL/WINTER 2013/2014#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2013-12-13" & Date <= "2014-01-28"), "2"),#
			# SURVEY 3 - SPRING/SUMMER 2014#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2014-05-06" & Date <= "2014-09-24"), "3"),#
			# SURVEY 4 - WINTER 2015#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2015-01-08" & Date <= "2015-02-21"), "4"),#
			# SURVEY 5 - SPRING/SUMMER 2015#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2015-05-01"), "5")#
		) %>%#
		ungroup()
str(Plant_Surveys)
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
Plant_Surveys %<>%#
		#addSamplingPeriods %>%#
		assignSeason
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
SeasonStarts=seasons
dat <- Plant_Surveys
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dat %<>% mutate(#
		Season = lapply(Date,#
				function(x) {#
					findInterval(#
						x, #
						SeasonStarts[which(year(x)==year(SeasonStarts$WS)), ]#
					)#
				}#
			) %>% unlist	#
		)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dat[which(dat$Season==0 | dat$Season==4), ]$Season 	<- "Winter"
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dat[which(dat$Season==1), ]$Season 					<- "Spring"
unique(dat$Season)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
SeasonStarts$WS
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
year(SeasonStarts$WS)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
SeasonStarts
?findInterval
dat$Date %>% head
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dat %<>% mutate(#
		Season = lapply(Date,#
				function(x) {#
					findInterval(#
						x, #
						SeasonStarts[which(year(x)==year(SeasonStarts$WS)), ]#
					)#
				}#
			) %>% unlist	#
		)
unique(dat$Season)
str(dat)
dat %<>% as.data.frame
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dat %<>% mutate(#
		Season = lapply(Date,#
				function(x) {#
					findInterval(#
						x, #
						SeasonStarts[which(year(x)==year(SeasonStarts$WS)), ]#
					)#
				}#
			) %>% unlist	#
		)
unique(dat$Season)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
Plant_Surveys_All <- Demographic.Plant.Surveys#
Plant_Info_All <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y") # Demographic Plot Surveys#
Plant_Surveys %<>% processPlantSurveys(Plant_Info) # Plant Surveys#
Plant_Surveys %<>% fixInconsistentDeadMissingRecords#
Plant_Info %<>% processPlantInfo(Plot_Info) # Plant Info#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info) # Plant Surveys
setwd('/Users/KSauby/Documents/Projects/GTMNERRproc/R')
Plant_Surveys %<>%#
		addSamplingPeriods
str(Plant_Surveys)
Plant_Surveys %<>% as.data.frame
str(Plant_Surveys)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
SeasonStarts=seasons
dat <- Plant_Surveys
unique(dat$Date)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dat %<>% head %>% mutate(#
		Season = lapply(Date,#
				function(x) {#
					findInterval(#
						x, #
						SeasonStarts[which(year(x)==year(SeasonStarts$WS)), ]#
					)#
				}#
			) %>% unlist	#
		) %$% unique(Season)
dat
dat <- Plant_Surveys
?lapply
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
SeasonStarts
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
dat %>% head
dat %>% head %>% year(Date)
dat %>% head %>% mutate(year(Date))
year(dat$Date) %>% head
year(dat$Date) %>% tail
head(dat$Date)
lapply(head(dat$Date),#
				function(x) {#
					findInterval(#
						x, #
						SeasonStarts[which(year(x)==year(SeasonStarts$WS)), ]#
					)
}
)
