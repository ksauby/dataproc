21.4*.813
21.4 -21.4*.813
library(lubridaste)
library(lubrida=te)
library(lubridate)
-v
install.packages("rgeos", repos="http://R-Forge.R-project.org")#
require(rgeos)
library(rgeos)
require(rgeos)
library(rgeos)
install.packages("rgdal", repos="http://R-Forge.R-project.org")#
require(rgdal)
R CMD INSTALL ~/Downloads/rgdal_0.9-1.tar.gz --configure-args='--with-gdal-config=/Library/Frameworks/GDAL.framework/Programs/gdal-config#
 --with-proj-include=/Library/Frameworks/PROJ.framework/Headers#
 --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'
R CMD INSTALL ~/Downloads/rgdal_0.9-1.tar.gz --configure-args='--with-gdal-config=/Library/Frameworks/GDAL.framework/Programs/gdal-config--with-proj-include=/Library/Frameworks/PROJ.framework/Headers--with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'
library(lme3)
library(lme4)
300/241
.244*30
1.25*300
1.25*240
7*12
7849-7527
322/1353
8028-7527
501/1353
8028-7957
1353-501
852/71
7956-7878
8176-8029
8176-8092
250*.75
250*.25
42*2 + 17*2
118/19
21/6.2
59.5*.75
59.5*.5 + 59.5
71/12
597/80
597/8
432/8
15*8 + 9*3
?seq_len
7.25/3
7.25/4
for(i in 0:9){x=cos(2*pi/10*i);y=x+1;z=(y-2)*22;pie(c(y,8-y),col=c(0,7),init.angl=135-z,bo=F,la=NA)}
install.packages("ProjectTemplate")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("data.table")
install.packages("corrgram")
install.packages("survival")
install.packages("shapefiles")
install.packages("rgdal")
install.packages("PBSmapping")
install.packages("sp")
install.packages("gdistance")
install.packages("chron")
install.packages("unmarked")
install.packages("lme4")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")#
require(rgeos)
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
library(rgdal)
install.packages("http://cran.r-project.org/src/contrib/rgdal_0.9-1.tar.gz", repos = NULL, type="source", configure.args = "--with-gdal-config=/Library/Frameworks/GDAL.framework/Versions/1.10/unix/bin/gdal-config --with-proj-include=/Library/Frameworks/PROJ.framework/unix/include --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib")
18/1.618
189+114
library(lubridate)
library(magrittr)
seasons <- data.frame(#
	   SE = as.POSIXct(c("2009-3-20", "2010-3-20", "2011-3-20", "2012-3-20", #
            "2013-3-20", "2014-3-20"), format="%Y-%m-%d"),#
	   SS = as.POSIXct(c("2009-6-21", "2010-6-21", "2011-6-21", "2012-6-20",#
            "2013-6-20", "2014-6-20"), format="%Y-%m-%d"),#
	   FE = as.POSIXct(c("2009-9-22", "2010-9-23", "2011-9-23", "2012-9-22",#
            "2013-9-22", "2014-9-22"), format="%Y-%m-%d"),#
	   WS = as.POSIXct(c("2009-12-21", "2010-12-21", "2011-12-22", "2012-12-21", #
            "2013-12-21", "2014-12-21"), format="%Y-%m-%d")#
    )#
#
    assignSeason <- function(dat, SeasonStarts=seasons) {#
	    dat %<>% mutate(#
		    Season = lapply(Date,#
				function(x) {#
					findInterval(#
						x, #
						SeasonStarts[which(year(x)==year(SeasonStarts$WS)), ]#
					)#
				}#
			) %>% unlist	#
		)#
	    dat[which(dat$Season==0 | dat$Season==4), ]$Season 	<- "Winter"#
	    dat[which(dat$Season==1), ]$Season 					<- "Spring"#
	    dat[which(dat$Season==2), ]$Season 					<- "Summer"#
	    dat[which(dat$Season==3), ]$Season 					<- "Fall"#
	    return(dat)#
    }
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(dplyr)
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(devtoolks)
library(devtools)
?install_github
devtools::install_github("ksauby/ACSampling", auth_token="2ab30a602e52fae481f4249cc25e892c0a9ccfc7", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install_github("ksauby/ACSampling", auth_token="2794c3f10db92f525181a0b1f6c19064fe3a2ef3", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
library(devtools)
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
install.packages("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
??limit
37-13
24/37
37-13
26/37
25/37
23/37
29/37
30/37
22/37
30/37
29/37
28/37
27/37
35/37
30/37
29/37
26/37
26/37 - .6757
28/37
30/37
29/37
37-12
25/37
219*.8
219*.8 - 17
26/3
17/900
42/900
49/900
29/40
1/25
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis')
library(ProjectTemplate)#
#
# when working on a Windows computer#
# setwd("C:/Users/KSauby/Dropbox/gradschool/Research/Projects/sampling")#
#
# load project#
load.project()
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys#
#
# --------------------------------------------------------------------------- ##
# --------------------------------------------------------------------------- ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
#
Plant_Info_Analysis <- Plant_Info %>%#
	group_by(PlantID) %>%#
	summarise(#
		Island = Island[1],#
		Network = Network[1],#
		Species = Species[1],#
		ReproductiveMode = ReproductiveMode[1],#
		Parent = Parent[1],#
		DaysAlive = DaysAlive[1],#
		Dead = min(ConfirmedDeadMissing)#
	) %>%#
	filter(DaysAlive!=0) %>%#
	filter(!is.na(Network))#
Plant_Info_Analysis %<>% mutate(#
	Parent = replace(#
		Parent,#
		which(is.na(Parent)),#
		"Unknown"#
	),#
	ReproductiveMode = replace(#
		ReproductiveMode,#
		which(is.na(ReproductiveMode)),#
		"Unknown"#
	)#
)	#
Plant_Info_Analysis %<>% arrange(desc(Island), desc(Parent))#
# --------------------------------------------------------------------------- ##
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info)#
Plant_Surveys %<>% processPlantSurveysafterMergewPlantInfo#
Plant_Surveys_by_Plant <- Plant_Surveys %>% processSurveysMergedbyPlant#
# create Fecundity and RGR dataset - only measured size during the spring and summer#
Plant_Surveys_by_Year <- Plant_Surveys_by_Plant %>% #
	group_by(SamplingYear, PlantID) %>%#
	summarise(#
		Species = Species[1],#
		Network = Network[1],#
		Island = Island[1],#
		ReproductiveMode = ReproductiveMode[1],#
		Date = min(Date),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		Fruit_Flowers_t = max(Fruit_Flowers_t, na.rm=T),#
		FruitFlowerPres_t = max(FruitFlowerPres_t, na.rm=T),#
		Size_t = max(Size_t, na.rm=T),#
		Height_t = max(Height_t, na.rm=T),#
		Fruit_t = max(Fruit_t, na.rm=T),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		CA_t = max(CA_t, na.rm=T),#
		ME_t = max(ME_t, na.rm=T),#
		DA_t = max(DA_t, na.rm=T),#
		CH_t = max(CH_t, na.rm=T),#
		Old_Moth_Evidence_t = max(Old_Moth_Evidence_t, na.rm=T),#
		Dead = max(Dead, na.rm=T),#
		Missing = max(Missing, na.rm=T)#
	) %>% #
	mutate(PrevSamplingYear = SamplingYear - 1) %>%#
	# lag variables#
#	calculateSizeLags(#
#		arrange.variable="Date", #
#		grouping.variable="PlantID"#
#	) %>%#
#	calculateDateLags %>%#
	createNewInsectVariables(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
#	calculateInsectLags(#
#		arrange.variable="Date", #
#		grouping.variable="PlantID"#
#	) %>%#
	as.data.frame #%>%#
#	calculateRGR ## this leads to a few values with PlantID = NA#
# --------------------------------------------------------------------------- ##
########################## ERROR MESSAGE#
	# check for PlantID = NA#
	dups <- Plant_Surveys_by_Year %>% #
		filter(is.na(PlantID))#
#
	if (dim(dups)[1] > 0) {#
			stop("NA values for PlantID.")#
	}#
	# should not be any non-NA values for RGR for SamplingYear 2012#
	#dups <- Plant_Surveys_by_Year %>% #
	#	filter(SamplingYear==2012) %>%#
	#	filter(!is.na(RGR_Height))#
#
	#if (dim(dups)[1] > 0) {#
	#		stop("Non-NA values for RGR for first Sampling Year.")#
	#}#
# --------------------------------------------------------------------------- ##
#Plant_Surveys_by_Year$Size_t_1 %<>% as.numeric#
Plant_Surveys_by_Year[,c(#
	"Old_Moth_Evidence_t",#
	"NatInsect_t",#
	"Insect_t",#
	"DA_t",#
	"CH_t",#
	"ME_t",#
	"CA_t",                #
	"Size_t",#
	"FruitPres_t",#
	"FruitFlowerPres_t"#,#
	#"Fruit_t",#
	#"Size_t_1",#
	#"DaysSincePrevSurvey",#
	#"DaysSinceStart",#
	#"CA_t_1",#
	#"ME_t_1",#
	#"CH_t_1",#
	#"DA_t_1",#
	#"Insect_t_1",#
	#"NatInsect_t_1",#
	#"Old_Moth_Evidence_t_1"#
)] %<>% apply(., 2, as.integer)#
Plant_Surveys_by_Year[,c(#
	"Height_t"#,#
	#"Height_t_1",#
	#"RGR_Height",#
	#"RGR_Height365",#
	#"RGR_Size",#
	#"RGR_Size365"#
)] %<>% as.numeric #apply(., 2, as.numeric)#
Plant_Surveys_by_Year$PlantID %<>% as.factor	#
Plant_Surveys_by_Year$SamplingYear %<>% as.factor#
Plant_Surveys_by_Year$Species %<>% as.factor#
Plant_Surveys_by_Year$Network %<>% as.factor#
Plant_Surveys_by_Year$Island %<>% as.factor#
Plant_Surveys_by_Year$Year <- year(Plant_Surveys_by_Year$Date)#
#Plant_Surveys_by_Year$PrevYear <- year(Plant_Surveys_by_Year$Date) - 1#
#
# Stage#
Plant_Surveys_by_Year$Stage <- Plant_Surveys_by_Year$ReproductiveMode#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Stage!="Seedling"), ]$Stage <- "Adult"#
Plant_Surveys_by_Year[which(is.na(Plant_Surveys_by_Year$Stage)), ]$Stage <- "Adult"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Dead==1), ]$Stage <- "Dead"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Missing==1), ]$Stage <- "Dead"#
#Plant_Surveys_by_Year$ReproductiveMode %<>% as.factor#
#Plant_Surveys_by_Year$Stage %<>% as.factor#
#
Plant_Surveys_analysis %<>% group_by(Network) %>%#
mutate(#
	Invasive_Moth_Present = ifelse(#
		sum(CA_t, na.rm=T) > 0,#
		1,#
		0#
	),#
	n_Plants = length(unique(PlantID))#
)#
#
Plant_Surveys_analysis <- Plant_Surveys_by_Year %>% 	#
	as.data.frame %>%#
 	droplevels %>% #
 	#mutate(Ln_Size_t_1_st = arm::rescale(log(Size_t_1))) %>%#
 	dplyr::select(#
 		Species,#
		PlantID,#
		Stage,#
 		Date,#
		Year,#
		#PrevYear,#
 		Network,#
 		Island,#
		Size_t,#
 		CA_t,#
		ME_t,#
		Old_Moth_Evidence_t,#
		#Size_t_1,#
 		#Height_t_1,#
 		#CA_t_1,#
 		#ME_t_1,#
 		#Old_Moth_Evidence_t_1,#
 		#RGR_Size,#
 		#RGR_Height,#
 		#Ln_Size_t_1_st,#
 		#FruitPres_t,#
 		#Fruit_t,#
		Fruit_Flowers_t#
 	) %>%#
 	.[complete.cases(.),]#
Original_Plant_Data %<>% processOriginalPlantData#
#
Plant_Surveys_stricta <- Plant_Surveys_analysis %>% 	filter(Species=="Opuntia stricta")#
Plant_Surveys_stricta %>% write.csv("/Users/KSauby/Documents/Projects/GTMNERR_analysis/data/Plant_Surveys_stricta.csv")#
#
Plant_Surveys_pusilla <- Plant_Surveys_analysis %>% #
	filter(Species=="Opuntia pusilla")#
Plant_Surveys_pusilla %>% write.csv("/Users/KSauby/Documents/Projects/GTMNERR_analysis/data/Plant_Surveys_pusilla.csv")#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling/data')#
# write.csv(Plant_Surveys_stricta_analysis, "Plant_Surveys_stricta.csv")#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_stricta")#
################################################################################
# Save modified timeseries dataset - just pusilla#
################################################################################
# Plant_Surveys_pusilla =	Plant_Surveys_by_Year %>% #
# 	filter(Species=="Opuntia pusilla")#
# Plant_Surveys_pusilla$Species %<>% droplevels#
#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_pusilla")#
#
# Survival Data#
temp_summary <- Plant_Surveys_by_Year %>%#
	group_by(PlantID) %>%#
	summarise(#
		Old_Moth_Evidence = max(Old_Moth_Evidence_t, na.rm=T),#
		Insect = max(Insect_t, na.rm=T),#
		ME = max(ME_t, na.rm=T),#
		CA = max(CA_t, na.rm=T)#
	)#
Plant_Info_Analysis %<>% merge(temp_summary, by="PlantID")#
#
write.csv(Plant_Info_Analysis, "/Users/KSauby/Documents/Projects/GTMNERR_analysis/data/Plant_Info_Analysis.csv")
setwd('/Users/KSauby/Documents/Projects')
setwd("./dataproc")#
#setwd("./modresproc")#
#devtools::test()#
devtools::document()#
devtools::install()
library(dataproc)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys#
#
# --------------------------------------------------------------------------- ##
# --------------------------------------------------------------------------- ##
Plant_Info %<>% processPlantInfo(Plot_Info)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Info_Analysis <- Plant_Info %>%#
	group_by(PlantID) %>%#
	summarise(#
		Island = Island[1],#
		Network = Network[1],#
		Species = Species[1],#
		ReproductiveMode = ReproductiveMode[1],#
		Parent = Parent[1],#
		DaysAlive = DaysAlive[1],#
		Dead = min(ConfirmedDeadMissing)#
	) %>%#
	filter(DaysAlive!=0) %>%#
	filter(!is.na(Network))#
Plant_Info_Analysis %<>% mutate(#
	Parent = replace(#
		Parent,#
		which(is.na(Parent)),#
		"Unknown"#
	),#
	ReproductiveMode = replace(#
		ReproductiveMode,#
		which(is.na(ReproductiveMode)),#
		"Unknown"#
	)#
)	#
Plant_Info_Analysis %<>% arrange(desc(Island), desc(Parent))#
# --------------------------------------------------------------------------- ##
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info)#
Plant_Surveys %<>% processPlantSurveysafterMergewPlantInfo#
Plant_Surveys_by_Plant <- Plant_Surveys %>% processSurveysMergedbyPlant#
# create Fecundity and RGR dataset - only measured size during the spring and summer#
Plant_Surveys_by_Year <- Plant_Surveys_by_Plant %>% #
	group_by(SamplingYear, PlantID) %>%#
	summarise(#
		Species = Species[1],#
		Network = Network[1],#
		Island = Island[1],#
		ReproductiveMode = ReproductiveMode[1],#
		Date = min(Date),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		Fruit_Flowers_t = max(Fruit_Flowers_t, na.rm=T),#
		FruitFlowerPres_t = max(FruitFlowerPres_t, na.rm=T),#
		Size_t = max(Size_t, na.rm=T),#
		Height_t = max(Height_t, na.rm=T),#
		Fruit_t = max(Fruit_t, na.rm=T),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		CA_t = max(CA_t, na.rm=T),#
		ME_t = max(ME_t, na.rm=T),#
		DA_t = max(DA_t, na.rm=T),#
		CH_t = max(CH_t, na.rm=T),#
		Old_Moth_Evidence_t = max(Old_Moth_Evidence_t, na.rm=T),#
		Dead = max(Dead, na.rm=T),#
		Missing = max(Missing, na.rm=T)#
	) %>% #
	mutate(PrevSamplingYear = SamplingYear - 1) %>%#
	# lag variables#
#	calculateSizeLags(#
#		arrange.variable="Date", #
#		grouping.variable="PlantID"#
#	) %>%#
#	calculateDateLags %>%#
	createNewInsectVariables(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
#	calculateInsectLags(#
#		arrange.variable="Date", #
#		grouping.variable="PlantID"#
#	) %>%#
	as.data.frame #%>%#
#	calculateRGR ## this leads to a few values with PlantID = NA#
# --------------------------------------------------------------------------- ##
########################## ERROR MESSAGE#
	# check for PlantID = NA#
	dups <- Plant_Surveys_by_Year %>% #
		filter(is.na(PlantID))#
#
	if (dim(dups)[1] > 0) {#
			stop("NA values for PlantID.")#
	}#
	# should not be any non-NA values for RGR for SamplingYear 2012#
	#dups <- Plant_Surveys_by_Year %>% #
	#	filter(SamplingYear==2012) %>%#
	#	filter(!is.na(RGR_Height))#
#
	#if (dim(dups)[1] > 0) {#
	#		stop("Non-NA values for RGR for first Sampling Year.")#
	#}#
# --------------------------------------------------------------------------- ##
#Plant_Surveys_by_Year$Size_t_1 %<>% as.numeric#
Plant_Surveys_by_Year[,c(#
	"Old_Moth_Evidence_t",#
	"NatInsect_t",#
	"Insect_t",#
	"DA_t",#
	"CH_t",#
	"ME_t",#
	"CA_t",                #
	"Size_t",#
	"FruitPres_t",#
	"FruitFlowerPres_t"#,#
	#"Fruit_t",#
	#"Size_t_1",#
	#"DaysSincePrevSurvey",#
	#"DaysSinceStart",#
	#"CA_t_1",#
	#"ME_t_1",#
	#"CH_t_1",#
	#"DA_t_1",#
	#"Insect_t_1",#
	#"NatInsect_t_1",#
	#"Old_Moth_Evidence_t_1"#
)] %<>% apply(., 2, as.integer)#
Plant_Surveys_by_Year[,c(#
	"Height_t"#,#
	#"Height_t_1",#
	#"RGR_Height",#
	#"RGR_Height365",#
	#"RGR_Size",#
	#"RGR_Size365"#
)] %<>% as.numeric #apply(., 2, as.numeric)#
Plant_Surveys_by_Year$PlantID %<>% as.factor	#
Plant_Surveys_by_Year$SamplingYear %<>% as.factor#
Plant_Surveys_by_Year$Species %<>% as.factor#
Plant_Surveys_by_Year$Network %<>% as.factor#
Plant_Surveys_by_Year$Island %<>% as.factor#
Plant_Surveys_by_Year$Year <- year(Plant_Surveys_by_Year$Date)#
#Plant_Surveys_by_Year$PrevYear <- year(Plant_Surveys_by_Year$Date) - 1#
#
# Stage#
Plant_Surveys_by_Year$Stage <- Plant_Surveys_by_Year$ReproductiveMode#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Stage!="Seedling"), ]$Stage <- "Adult"#
Plant_Surveys_by_Year[which(is.na(Plant_Surveys_by_Year$Stage)), ]$Stage <- "Adult"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Dead==1), ]$Stage <- "Dead"#
Plant_Surveys_by_Year[which(Plant_Surveys_by_Year$Missing==1), ]$Stage <- "Dead"#
#Plant_Surveys_by_Year$ReproductiveMode %<>% as.factor#
#Plant_Surveys_by_Year$Stage %<>% as.factor#
#
Plant_Surveys_analysis %<>% group_by(Network) %>%#
mutate(#
	Invasive_Moth_Present = ifelse(#
		sum(CA_t, na.rm=T) > 0,#
		1,#
		0#
	),#
	n_Plants = length(unique(PlantID))#
)#
#
Plant_Surveys_analysis <- Plant_Surveys_by_Year %>% 	#
	as.data.frame %>%#
 	droplevels %>% #
 	#mutate(Ln_Size_t_1_st = arm::rescale(log(Size_t_1))) %>%#
 	dplyr::select(#
 		Species,#
		PlantID,#
		Stage,#
 		Date,#
		Year,#
		#PrevYear,#
 		Network,#
 		Island,#
		Size_t,#
 		CA_t,#
		ME_t,#
		Old_Moth_Evidence_t,#
		#Size_t_1,#
 		#Height_t_1,#
 		#CA_t_1,#
 		#ME_t_1,#
 		#Old_Moth_Evidence_t_1,#
 		#RGR_Size,#
 		#RGR_Height,#
 		#Ln_Size_t_1_st,#
 		#FruitPres_t,#
 		#Fruit_t,#
		Fruit_Flowers_t#
 	) %>%#
 	.[complete.cases(.),]#
Original_Plant_Data %<>% processOriginalPlantData#
#
Plant_Surveys_stricta <- Plant_Surveys_analysis %>% 	filter(Species=="Opuntia stricta")#
Plant_Surveys_stricta %>% write.csv("/Users/KSauby/Documents/Projects/GTMNERR_analysis/data/Plant_Surveys_stricta.csv")#
#
Plant_Surveys_pusilla <- Plant_Surveys_analysis %>% #
	filter(Species=="Opuntia pusilla")#
Plant_Surveys_pusilla %>% write.csv("/Users/KSauby/Documents/Projects/GTMNERR_analysis/data/Plant_Surveys_pusilla.csv")#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling/data')#
# write.csv(Plant_Surveys_stricta_analysis, "Plant_Surveys_stricta.csv")#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_stricta")#
################################################################################
# Save modified timeseries dataset - just pusilla#
################################################################################
# Plant_Surveys_pusilla =	Plant_Surveys_by_Year %>% #
# 	filter(Species=="Opuntia pusilla")#
# Plant_Surveys_pusilla$Species %<>% droplevels#
#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_pusilla")#
#
# Survival Data#
temp_summary <- Plant_Surveys_by_Year %>%#
	group_by(PlantID) %>%#
	summarise(#
		Old_Moth_Evidence = max(Old_Moth_Evidence_t, na.rm=T),#
		Insect = max(Insect_t, na.rm=T),#
		ME = max(ME_t, na.rm=T),#
		CA = max(CA_t, na.rm=T)#
	)#
Plant_Info_Analysis %<>% merge(temp_summary, by="PlantID")#
#
write.csv(Plant_Info_Analysis, "/Users/KSauby/Documents/Projects/GTMNERR_analysis/data/Plant_Info_Analysis.csv")
Plant_Surveys %<>%#
		mergePlantRecordsfromMultiplePlots
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
temp_A <- filter(Plant_Surveys, N.PlotPlantIDs > 1)#
	Z = list()
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
for (i in 1:length(unique(temp_A$PlantID))) {#
		# pull all records for this Tag Number from plot surveys#
		L = filter(temp_A, PlantID==unique(temp_A$PlantID)[i])#
		Z[[i]] 	<- as.data.frame(matrix(NA,length(unique(L$Date)),1))	#
		Z[[i]][, 1] 					<- L$PlantID[1]#
		Z[[i]][, "Date"] 				<- unique(L$Date)#
		# can't include unique Tag_Number because some plants are in more than one plot#
		Z[[i]][, "ClusterID"] 			<- L$ClusterID[1]#
		Z[[i]][, "Network"] 			<- L$Network[1]#
		Z[[i]][, "Island"] 				<- L$Island[1]#
		Z[[i]][, "Species"] 			<- L$Species[1]#
		Z[[i]][, "Easting"] 			<- L$Easting[1]#
		Z[[i]][, "Northing"] 			<- L$Northing[1]#
		Z[[i]][, "ReproductiveMode"]	<- L$ReproductiveMode %>%#
												.[which(. != "NA")] %>%#
												.[which(!is.na(.))] %>%#
												unique(.) %>%#
												paste(collapse="")#
		# for each date#
		for (j in 1:length(unique(L$Date))) {#
			# pull all plant survey records for this date from plant surveys#
			M = filter(L, Date==unique(L$Date)[j])#
			# get list of PlotPlantIDs#
			N = filter(#
				Plant_Info, #
				PlantID==L$PlantID[1], #
				# only include plants that are listed as having been added to Plant_Info on or after Date#
				First.Survey.Date <= unique(L$Date)[j],#
				# exclude dead plants (including date plant was first recorded as dead)#
				FirstDeadMissingObservation > unique(L$Date)[j] | #
					is.na(FirstDeadMissingObservation)==T#
			)#
			# if all PlotPlantIDs were surveyed for a given date:#
			if (identical(M$PlotPlantID[order(M$PlotPlantID)], #
				N$PlotPlantID[order(N$PlotPlantID)])==T) {#
				Z[[i]][j, "CA_t"] 					<- mysum(M$CA_t)#
				Z[[i]][j, "ME_t"] 					<- mysum(M$ME_t)#
				Z[[i]][j, "CH_t"] 					<- mysum(M$CH_t)#
				Z[[i]][j, "DA_t"] 					<- mysum(M$DA_t)#
				Z[[i]][j, "Unknown_Moth_t"] 		<- mysum(M$Unknown_Moth_t)#
				Z[[i]][j, "Old_Moth_Evidence_t"]<- mysum(M$Old_Moth_Evidence_t)#
				# Dead or missing - has to be dead or missing in all plots#
				# (1) if the sum of Dead = # of PlotPlantIDs, the plant is dead in all plots#
				if (sum(M$Dead, na.rm=T)==dim(N)[1]) #
					{Z[[i]][j, "Dead"] <- 1} #
					else {Z[[i]][j, "Dead"] <- 0}#
				# Missing#
				if (sum(M$Missing, na.rm=T)==dim(N)[1]) #
					{Z[[i]][j, "Missing"] <- 1} #
					else {Z[[i]][j, "Missing"] <- 0}#
				# all surveyed = TRUE#
				Z[[i]][j, "AllSurveyed"] 			<- "TRUE"#
			}#
			else {#
				# if all PlotPlantIDs were NOT surveyed on this date consider the insect to be detected if the sum is greater than zero#
				Z[[i]][j, "CA_t"] 					<- mysum1(M$CA_t)#
				Z[[i]][j, "ME_t"] 					<- mysum1(M$ME_t)#
				Z[[i]][j, "CH_t"] 					<- mysum1(M$CH_t)#
				Z[[i]][j, "DA_t"] 					<- mysum1(M$DA_t)#
				Z[[i]][j, "Unknown_Moth_t"] 		<- mysum1(M$Unknown_Moth_t)#
				Z[[i]][j, "Old_Moth_Evidence_t"]<- mysum1(M$Old_Moth_Evidence_t)#
				# all surveyed = FALSE#
				Z[[i]][j, "AllSurveyed"] 			<- "FALSE"#
			}#
			# Number of segments#
			Z[[i]][j, "Size_t"] 					<- mysum(M$Size_t)#
			Z[[i]][j, "Plant_Segments_w_leaves"] <- #
				mysum(M$Plant_Segments_w_leaves)#
			Z[[i]][j, "Plant_Segments_wo_leaves"] <-#
			 	mysum(M$Plant_Segments_wo_leaves)#
			Z[[i]][j, "Plant_Segments_woody"] <- mysum(M$Plant_Segments_woody)#
			# Size#
			Z[[i]][j, "Height_t"] 					<- max(M$Height_t)#
			Z[[i]][j, "Width_t"] 					<- max(M$Width_t)#
			Z[[i]][j, "Perpen_Width"] 				<- max(M$Perpen_Width)#
			# Fruit	and Flowers#
			Z[[i]][j, "Num_FlowerBuds"] 			<- mysum(M$Num_FlowerBuds)#
			Z[[i]][j, "Num_Fruit_red"] 				<- mysum(M$Num_Fruit_red)#
			Z[[i]][j, "Num_Fruit_green"] 			<- mysum(M$Num_Fruit_green)#
			Z[[i]][j, "Num_Flowers"] 				<- mysum(M$Num_Flowers)#
			Z[[i]][j, "Fruit_t"] 					<- mysum(M$Fruit_t)#
			Z[[i]][j, "Fruit_Flowers_t"] 			<- mysum(M$Fruit_Flowers_t)#
			Z[[i]][j, "DemographicSurvey"] 			<- M$DemographicSurvey[1]#
			Z[[i]][j, "SamplingYear"] 				<- M$SamplingYear[1]#
			# Paste PlotPlantIDs together to know which plants were surveyed on this date#
			Z[[i]][j, "PlantsSurveyed"] <- paste(M$PlotPlantID, collapse=",")#
		}#
	}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
temp_B <- do.call(rbind.data.frame, Z)#
	names(temp_B)[1] <- "PlantID"#
	# max(NA, NA, na.rm=T) returns "-Inf"#
	temp_B[,c(#
		"Perpen_Width",#
		"Width_t",#
		"Height_t")] %<>% #
		apply(., 2, NA_Function#
	)
dim(temp_B)
dim(Z)
str(Z)
? rbind.data.frame
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
temp_A <- filter(Plant_Surveys, N.PlotPlantIDs > 1)#
	Z = list()
i=1
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
L = filter(temp_A, PlantID==unique(temp_A$PlantID)[i])#
		Z[[i]] 	<- as.data.frame(matrix(NA,length(unique(L$Date)),1))	#
		Z[[i]][, 1] 					<- L$PlantID[1]#
		Z[[i]][, "Date"] 				<- unique(L$Date)#
		# can't include unique Tag_Number because some plants are in more than one plot#
		Z[[i]][, "ClusterID"] 			<- L$ClusterID[1]#
		Z[[i]][, "Network"] 			<- L$Network[1]#
		Z[[i]][, "Island"] 				<- L$Island[1]#
		Z[[i]][, "Species"] 			<- L$Species[1]#
		Z[[i]][, "Easting"] 			<- L$Easting[1]#
		Z[[i]][, "Northing"] 			<- L$Northing[1]#
		Z[[i]][, "ReproductiveMode"]	<- L$ReproductiveMode %>%#
												.[which(. != "NA")] %>%#
												.[which(!is.na(.))] %>%#
												unique(.) %>%#
												paste(collapse="")#
		# for each date
j=1
