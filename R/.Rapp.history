21.4*.813
21.4 -21.4*.813
library(lubridaste)
library(lubrida=te)
library(lubridate)
-v
install.packages("rgeos", repos="http://R-Forge.R-project.org")#
require(rgeos)
library(rgeos)
require(rgeos)
library(rgeos)
install.packages("rgdal", repos="http://R-Forge.R-project.org")#
require(rgdal)
R CMD INSTALL ~/Downloads/rgdal_0.9-1.tar.gz --configure-args='--with-gdal-config=/Library/Frameworks/GDAL.framework/Programs/gdal-config#
 --with-proj-include=/Library/Frameworks/PROJ.framework/Headers#
 --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'
R CMD INSTALL ~/Downloads/rgdal_0.9-1.tar.gz --configure-args='--with-gdal-config=/Library/Frameworks/GDAL.framework/Programs/gdal-config--with-proj-include=/Library/Frameworks/PROJ.framework/Headers--with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib'
library(lme3)
library(lme4)
300/241
.244*30
1.25*300
1.25*240
7*12
7849-7527
322/1353
8028-7527
501/1353
8028-7957
1353-501
852/71
7956-7878
8176-8029
8176-8092
250*.75
250*.25
42*2 + 17*2
118/19
21/6.2
59.5*.75
59.5*.5 + 59.5
71/12
597/80
597/8
432/8
15*8 + 9*3
?seq_len
7.25/3
7.25/4
for(i in 0:9){x=cos(2*pi/10*i);y=x+1;z=(y-2)*22;pie(c(y,8-y),col=c(0,7),init.angl=135-z,bo=F,la=NA)}
install.packages("ProjectTemplate")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("data.table")
install.packages("corrgram")
install.packages("survival")
install.packages("shapefiles")
install.packages("rgdal")
install.packages("PBSmapping")
install.packages("sp")
install.packages("gdistance")
install.packages("chron")
install.packages("unmarked")
install.packages("lme4")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")#
require(rgeos)
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
library(rgdal)
install.packages("http://cran.r-project.org/src/contrib/rgdal_0.9-1.tar.gz", repos = NULL, type="source", configure.args = "--with-gdal-config=/Library/Frameworks/GDAL.framework/Versions/1.10/unix/bin/gdal-config --with-proj-include=/Library/Frameworks/PROJ.framework/unix/include --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib")
18/1.618
189+114
library(lubridate)
library(magrittr)
seasons <- data.frame(#
	   SE = as.POSIXct(c("2009-3-20", "2010-3-20", "2011-3-20", "2012-3-20", #
            "2013-3-20", "2014-3-20"), format="%Y-%m-%d"),#
	   SS = as.POSIXct(c("2009-6-21", "2010-6-21", "2011-6-21", "2012-6-20",#
            "2013-6-20", "2014-6-20"), format="%Y-%m-%d"),#
	   FE = as.POSIXct(c("2009-9-22", "2010-9-23", "2011-9-23", "2012-9-22",#
            "2013-9-22", "2014-9-22"), format="%Y-%m-%d"),#
	   WS = as.POSIXct(c("2009-12-21", "2010-12-21", "2011-12-22", "2012-12-21", #
            "2013-12-21", "2014-12-21"), format="%Y-%m-%d")#
    )#
#
    assignSeason <- function(dat, SeasonStarts=seasons) {#
	    dat %<>% mutate(#
		    Season = lapply(Date,#
				function(x) {#
					findInterval(#
						x, #
						SeasonStarts[which(year(x)==year(SeasonStarts$WS)), ]#
					)#
				}#
			) %>% unlist	#
		)#
	    dat[which(dat$Season==0 | dat$Season==4), ]$Season 	<- "Winter"#
	    dat[which(dat$Season==1), ]$Season 					<- "Spring"#
	    dat[which(dat$Season==2), ]$Season 					<- "Summer"#
	    dat[which(dat$Season==3), ]$Season 					<- "Fall"#
	    return(dat)#
    }
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(dplyr)
dat = data.frame(#
	    Date = as.POSIXct(strptime(as.Date("2011-12-01", format = "%Y-%m-%d") + #
            (0:10)*30, format="%Y-%m-%d" ))#
    )#
    dat %>% assignSeason
library(devtoolks)
library(devtools)
?install_github
devtools::install_github("ksauby/ACSampling", auth_token="2ab30a602e52fae481f4249cc25e892c0a9ccfc7", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install_github("ksauby/ACSampling", auth_token="2794c3f10db92f525181a0b1f6c19064fe3a2ef3", subdir="/code/Restricted_ACS_Simulations/ACSampling", repos=NULL)
devtools::install("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="~/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
library(devtools)
devtools::install_local(path="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
devtools::install(pkg="/Users/KSauby/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
install.packages("~/Documents/Projects/ACSampling/code/Restricted_ACS_Simulations/ACSampling_0.0.0.9000.tar.gz")
??limit
37-13
24/37
37-13
26/37
25/37
23/37
29/37
30/37
22/37
30/37
29/37
28/37
27/37
35/37
30/37
29/37
26/37
26/37 - .6757
28/37
30/37
29/37
37-12
25/37
219*.8
219*.8 - 17
26/3
17/900
42/900
49/900
29/40
install.package("popdemo")
install.packages("popdemo")
library(popdemo)
library(popdemo)
data(Tort)
n0 <- c(1,1,2,3,5,8,13,21)pr1 <- project(Tort, vector=n0, time=50) plot(pr1)
n0 <- c(1,1,2,3,5,8,13,21);pr1 <- project(Tort, vector=n0, time=50); plot(pr1)
Tort
no <- matrix(c(4,1),nrow=2)
no
library(demogR)
library(devtools)
?install_github
install_github("cran/ftsa")
library(popbio)
library(popbio)
data(test.census)
head(test.census)
tail(test.census)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis')
library(ProjectTemplate)#
#
# when working on a Windows computer#
# setwd("C:/Users/KSauby/Dropbox/gradschool/Research/Projects/sampling")#
#
# load project#
load.project()
head(Plant.Surveys.analysis)
head(Plant_Surveys_analysis)
head(Plant_Surveys_stricta)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# --------------------------------------------------------------------------- ##
print("List of Warnings")#
# --------------------------------------------------------------------------- ##
#
print("Plants listed as species Not Recorded")#
print(Plant_Info[which(Plant_Info$HostSpecies=="Not Recorded"), ]$PlantID)#
#
# if a plant ID is given more than one host species name print warning#
#
print("Plant IDs from Plant Surveys that are not in Plant Info")#
print(filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[, 4:5])#
#
print("Duplicates in Plot Surveys")#
duplicate.records = as.data.frame(summarise(group_by(Plot_Surveys, Tag_Number, Date),#
		Nrecords = length(CACA_on_Pusilla)))#
#
print(filter(duplicate.records, Nrecords > 1))#
# duplicates for 1795 on 2013-02-10 are okay - I accidentally surveyed the plot twice; keep it for detectability#
print("Duplicates in Plant Surveys")#
duplicate.records = as.data.frame(summarise(group_by(Plant_Surveys, PlantID, DateSurveyed),#
		Nrecords = length(First_Observer_Initials))) %>% arrange(PlantID)#
#
print(filter(duplicate.records, Nrecords > 1))#
# duplicates for 1795 on 2013-02-10 are okay - I accidentally surveyed the plot twice; keep it for detectability#
#
Plant_Surveys[which(Plant_Surveys$Max_Height=="0"), ]#
Plant_Surveys[which(Plant_Surveys$Max_Width=="0"), ]#
Plant_Surveys[which(Plant_Surveys$Perpen_Width=="0"), ]#
#
# are any plant IDs from Plant Surveys not in the Plant Info?#
filter(Plant_Surveys, !(PlantID %in% Plant_Info$PlantID))[,2:5]#
#
# are any plant IDs in Plant Info not in the surveys?#
filter(Plant_Info, !(PlantID %in% Plant_Surveys$PlantID))[,2:5]#
#
# plants recorded as dead, then alive#
#
# most recent survey should be alive#
# and at least one other survey would be dead#
#
# plants with no Tag Number#
#
# make sure that there is plot info for each tag number in plant info#
check <- Plant_Info[which(!(Plant_Info$Tag_Number %in% Plot_Info$Tag_Number)), ]
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
function_filtered_patch_plot <- function (patch_filter=patch_filter) {#
    gg <- data.frame(#
		Easting = 		patch_filter[, "Easting"],#
		Northing = 		patch_filter[, "Northing"],#
		realization = 	patch_filter[, "realization"])#
	p <- ggplot(gg, aes(Easting, Northing)) +#
		annotate("rect", xmin=x_start, xmax=x_end, ymin=y_start, ymax=y_end, alpha=0,#
			colour="grey") + #
		geom_point(size=4) + #
		facet_wrap(~realization)#
	return(p)#
}#
#
function_KES_histogram_plot <- function (data, variable, fill_variable, facet_variable, xlab_variable, ylab_variable, colors) {#
    gg <- data.frame(#
		variable = 			data[, variable], #
		fill_variable = 	data[, fill_variable],#
		facet_variable = 	data[, facet_variable])#
	p <- ggplot(gg, aes(variable, fill=factor(fill_variable))) +#
	geom_vline(x=0) +#
	geom_histogram(aes(y=..density..), alpha=0.5, position="identity") +#
	theme( #
		axis.title.x=element_text(face=c("bold.italic")),#
		axis.title.y=element_text(face=c("bold"))#
	) +#
	facet_wrap(~facet_variable) +#
	ylab(ylab_variable) +#
	xlab(xlab_variable) +#
	scale_fill_manual(values=colors)#
	return(p)#
}#
ggplot_colours <- c("#000000", "#2121D9", "#9999FF", "#D92121", "#FF9326")#
ggplot_colours2 <- c("#009e73", "#D92121", "#FF9326", "#000000", "#000000") #  9999FF#
#
ggplot_colours3 <- c("#B103B2", "#00C6FF", "#FF7E00", "#AD1CB2","#FF270E", "#163EB2", "#47B200", "#000000", "#000000") #  9999FF#
ggplot_colours_barplots <- c("#BEC5F0", "#FFF797", "#FF6662", "#B103B2","#3E87B2", "#FFA108", "#B28373", "#000000") #  9999FF#
#
ggplot_colours_stricta_insects_scatterplots <- c("#B103B2","#3E87B2", "#FFA108", "#000000") #  9999FF#
#
ggplot_colours_humifusa_insects_scatterplots <- c("#B103B2","#7F93B2", "#FFA108", "#4C3831", "#202D5A", "#FF1129", "#069932", "#000000") #  9999FF#
ggplot_cbbPalette <- c("#000000","#009E73", "#0072B2", "#D55E00", "#CC79A7")#
# CACA#
#
ggplot_insect_barplot <- c("#FFAE63", "#9CCC50", "#FFDF44", "#3DDAFF", "#C0C0C0","#C0C0C0","#C0C0C0","#C0C0C0")#
ggplot_CACA_boxplot <- c("#C0C0C0", "#D92121")#
ggplot_CACA_boxplot_flipped <- c("#FFAE63", "#C0C0C0")#
ggplot_CACA_scatterplot <- c("#000000", "#D92121")#
ggplot_CHVI_boxplot <- c("#C0C0C0", "#62B20D")#
ggplot_CHVI_boxplot_flipped <- c("#9CCC50", "#C0C0C0")#
ggplot_CHVI_scatterplot <- c("#000000", "#62B20D")#
#
ggplot_DACT_boxplot <- c("#C0C0C0", "#FFDF44")#
ggplot_DACT_boxplot_flipped <- c("#FFDF44", "#C0C0C0")#
ggplot_DACT_scatterplot <- c("#000000", "#FF7500")#
#
ggplot_MEPR_boxplot <- c("#C0C0C0", "#9111FF")#
ggplot_MEPR_boxplot_flipped <- c("#3DDAFF", "#C0C0C0")#
ggplot_MEPR_scatterplot <- c("#000000", "#9111FF")#
## Function for arranging ggplots. use png(); arrange(p1, p2, ncol=1); dev.off() to save.#
#	from http://gettinggeneticsdone.blogspot.com/2010/03/arrange-multiple-ggplot2-plots-in-same.html#
#	accessed 15 April 2014#
vp.layout <- function(x, y) viewport(layout.pos.row=x, layout.pos.col=y)#
arrange_ggplot2 <- function(..., nrow=NULL, ncol=NULL, as.table=FALSE) {#
	dots <- list(...)#
	n <- length(dots)#
	if(is.null(nrow) & is.null(ncol)) { nrow = floor(n/2) ; ncol = ceiling(n/nrow)}#
	if(is.null(nrow)) { nrow = ceiling(n/ncol)}#
	if(is.null(ncol)) { ncol = ceiling(n/nrow)}#
        ## NOTE see n2mfrow in grDevices for possible alternative#
grid.newpage()#
pushViewport(viewport(layout=grid.layout(nrow,ncol) ) )#
	ii.p <- 1#
	for(ii.row in seq(1, nrow)){#
	ii.table.row <- ii.row	#
	if(as.table) {ii.table.row <- nrow - ii.table.row + 1}#
		for(ii.col in seq(1, ncol)){#
			ii.table <- ii.p#
			if(ii.p > n) break#
			print(dots[[ii.table]], vp=vp.layout(ii.table.row, ii.col))#
			ii.p <- ii.p + 1#
		}#
	}#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys#
#
# --------------------------------------------------------------------------- ##
# --------------------------------------------------------------------------- ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info)#
Plant_Surveys %<>% processPlantSurveysafterMergewPlantInfo#
Plant_Surveys_by_Plant <- Plant_Surveys %>% processSurveysMergedbyPlant#
# create Fecundity and RGR dataset - only measured size during the spring and summer#
Plant_Surveys_by_Year <- Plant_Surveys_by_Plant %>% #
	group_by(SamplingYear, PlantID) %>%#
	summarise(#
		Species = Species[1],#
		Network = Network[1],#
		Island = Island[1],#
		ReproductiveMode = ReproductiveMode[1],#
		Date = min(Date),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		FruitFlowerPres_t = max(FruitFlowerPres_t, na.rm=T),#
		Size_t = max(Size_t, na.rm=T),#
		Height_t = max(Height_t, na.rm=T),#
		Fruit_t = max(Fruit_t, na.rm=T),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		CA_t = max(CA_t, na.rm=T),#
		ME_t = max(ME_t, na.rm=T),#
		DA_t = max(DA_t, na.rm=T),#
		CH_t = max(CH_t, na.rm=T),#
		Old_Moth_Evidence_t = max(Old_Moth_Evidence_t, na.rm=T)#
	) %>% #
	mutate(PrevSamplingYear = SamplingYear - 1) %>%#
	# lag variables#
	calculateSizeLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateDateLags %>%#
	createNewInsectVariables(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateInsectLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	as.data.frame %>%#
	calculateRGR ## this leads to a few values with PlantID = NA#
# --------------------------------------------------------------------------- ##
########################## ERROR MESSAGE#
	# check for PlantID = NA#
	dups <- Plant_Surveys_by_Year %>% #
		filter(is.na(PlantID))#
#
	if (dim(dups)[1] > 0) {#
			stop("NA values for PlantID.")#
	}#
	# should not be any non-NA values for RGR for SamplingYear 2012#
	dups <- Plant_Surveys_by_Year %>% #
		filter(SamplingYear==2012) %>%#
		filter(!is.na(RGR_Height))#
#
	if (dim(dups)[1] > 0) {#
			stop("Non-NA values for RGR for first Sampling Year.")#
	}#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Size_t_1 %<>% as.numeric#
Plant_Surveys_by_Year[,c(#
	"Old_Moth_Evidence_t",#
	"NatInsect_t",#
	"Insect_t",#
	"DA_t",#
	"CH_t",#
	"ME_t",#
	"CA_t",                #
	"Size_t",#
	"FruitPres_t",#
	"FruitFlowerPres_t",#
	"Fruit_t",#
	"Size_t_1",#
	"DaysSincePrevSurvey",#
	"DaysSinceStart",#
	"CA_t_1",#
	"ME_t_1",#
	"CH_t_1",#
	"DA_t_1",#
	"Insect_t_1",#
	"NatInsect_t_1",#
	"Old_Moth_Evidence_t_1"#
)] %<>% apply(., 2, as.integer)#
Plant_Surveys_by_Year[,c(#
	"Height_t",#
	"Height_t_1",#
	"RGR_Height",#
	"RGR_Height365",#
	"RGR_Size",#
	"RGR_Size365"#
)] %<>% apply(., 2, as.numeric)#
Plant_Surveys_by_Year$PlantID %<>% as.factor	#
Plant_Surveys_by_Year$SamplingYear %<>% as.factor#
Plant_Surveys_by_Year$Species %<>% as.factor#
Plant_Surveys_by_Year$Network %<>% as.factor#
Plant_Surveys_by_Year$Island %<>% as.factor#
Plant_Surveys_by_Year$ReproductiveMode %<>% as.factor#
Plant_Surveys_by_Year$Year <- year(Plant_Surveys_by_Year$Date)#
Plant_Surveys_by_Year$PrevYear <- year(Plant_Surveys_by_Year$Date) - 1#
#
Plant_Surveys_analysis <- Plant_Surveys_by_Year %>% 	#
	as.data.frame %>%#
 	droplevels %>% #
 	mutate(Ln_Size_t_1_st = arm::rescale(log(Size_t_1))) %>%#
 	dplyr::select(#
 		Species,#
		PlantID,#
 		Date,#
		Year,#
		PrevYear,#
 		Network,#
 		Island,#
		Size_t,#
 		Size_t_1,#
 		Height_t_1,#
 		CA_t_1,#
 		ME_t_1,#
 		Old_Moth_Evidence_t_1,#
 		RGR_Size,#
 		RGR_Height,#
 		Ln_Size_t_1_st,#
 		FruitPres_t,#
 		Fruit_t#
 	) %>%#
 	.[complete.cases(.),]#
Original_Plant_Data %<>% processOriginalPlantData#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling/data')#
# write.csv(Plant_Surveys_stricta_analysis, "Plant_Surveys_stricta.csv")#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_stricta")#
################################################################################
# Save modified timeseries dataset - just pusilla#
################################################################################
# Plant_Surveys_pusilla =	Plant_Surveys_by_Year %>% #
# 	filter(Species=="Opuntia pusilla")#
# Plant_Surveys_pusilla$Species %<>% droplevels#
#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_pusilla")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# list of climate files to fix#
climate_file_names <- c("NOAA.Palm.Coast.6.NE")#
climate_data <- mergeClimateFiles(climate_file_names) %>%#
	filterClimateDataByQuality %>%#
	formatconvertClimateData#
#
# check data#
climate_data %>%#
filter(MaxTemp < MinTemp)#
#
climate_data %>%#
filter(MaxTemp == MinTemp)#
#
# split files to calculate degree days#
climate_data %>% #
	dplyr::select(Date, MinTemp, MaxTemp) %>%#
	.[complete.cases(.),] %>%#
	write.csv("/Users/KSauby/Documents/Projects/GTMNERR_analysis/data/GTMNERR_data.csv", row.names=F)#
climate_data %>% filter(is.na(MinTemp) | is.na(MaxTemp) | is.na(Precip)) %>%#
	dplyr::select(Date, MinTemp, MaxTemp, Precip) %>%#
	write.csv("/Users/KSauby/Documents/Projects/GTMNERR_analysis/data/climate_data_NAs.csv", row.names=F)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
temp_variables = c("Max Temp, Mean",#
"Max Temp, SD",#
"Mean Degree Day",#
"Perc. Freezing Days",#
"Consec. Freezing Days, Mean",#
"Consec. Freezing Days, Max",#
"Consec. Freezing Days, SD"#
)#
#
#precip_variables = c("D.Precip.mean", "D.Precip.SD", "% D w/Rain", "D w/Rain, Mean", "D w/Rain, Max", "D w/Rain, SD", "D w/o Rain, Mean", "D w/o Rain, Max", "D w/o Rain, SD")#
#
precip_variables = c("Daily Precip, mean",#
"Daily Precip, SD",#
"Perc. Days w/Rain",#
"Consec. Days w/Rain, Mean",#
"Consec. Days w/Rain, Max",#
"Consec. Days w/Rain, SD",#
"Consec. Days w/o Rain, Mean",#
"Consec. Days w/o Rain, Max",#
"Consec. Days w/o Rain, SD"#
)#
temp_variables = c("E1","E2", "F")#
precip_variables = c("A1", "A2", "B","C1","C2","C3","D1","D2","D3")#
ID_variables = c("Date") #, "Location", "Species")#
Location_list <- "GTMNERR"#
DegreeDay_list <- c("GTMNERR.Degree.Days")#
#
climate_data %<>% calculateDegreeDays(DegreeDay_list) %>%#
	formatClimateDataYearDayofYear %>%#
	fixErroneousTemps#
Plant_Surveys_by_Year %<>% mutate(Location="GTMNERR")#
climate_data %<>% #
	dplyr::select(Date, MinTemp, MaxTemp, Precip, Daily.DD, Year, Day_of_year) %>%#
	mutate(Location="GTMNERR") %>%#
	.[complete.cases(.), ]#
#
# only 8 days with temperatures below freezing: climate_data[which(climate_data$MinTemp<0),], between 2011-01-01 and 2015-08, and all were either in 2011 and 2012#
# removing freezing variables#
#
# (1) First restrict to complete cases#
#
# dates for the starts of Spring and Fall#
df <- data.frame(Date = as.Date(c(seasons$SE, seasons$FE))) %>% #
	arrange(Date) %>%#
	filter(Date > "2012-03-01" & Date <= "2015-09-20") %>%#
	mutate(PrevSurvD = as.Date(c(NA, Date[-length(Date)]), origin="1970-01-01"))#
six_month_dates = df[rep(1:nrow(df), times=length(Location_list)), ]#
six_month_dates$Location = rep(Location_list, times=dim(df)[1])#
#
Dates_dataframe <- six_month_dates %>% .[complete.cases(.), ]#
fecundityRGR <- calculateClimateVariables(#
	Plant_Surveys_by_Year, #
	climate_data, #
	calculate_dates="FALSE", #
	Dates_dataframe=Dates_dataframe,#
	first.year=2012#
) #
#
fecundityRGR$Dataset <- NA#
fecundityRGR[which(month(fecundityRGR$Date)==9), ]$Dataset <- "SS"#
fecundityRGR[which(month(fecundityRGR$Date)==3), ]$Dataset <- "FW"#
#
X <- fecundityRGR %>%#
	as.data.table %>% #
	change_weather_names_function2 %>%#
	as.data.frame %>%#
	.[complete.cases(.), ]#
# Temp#
XT <- X %>% #
	.[, c(ID_variables, "Dataset", temp_variables)] %>% #
	mutate(Year=year(Date))#
#
XT_SS <-XT %>% filter(Dataset=="SS") %>% dplyr::select(-c(Date, Dataset))#
XT_SS[,c("E1","E2","F")] %<>% apply(., 2, arm::rescale)	#
names(XT_SS)[1:3] <- paste(colnames(XT_SS[,c("E1","E2","F")]), "_SS", sep="")#
#
XT_FW <- XT %>% filter(Dataset=="FW") %>% dplyr::select(-c(Date, Dataset))#
XT_FW[,c("E1","E2","F")] %<>% apply(., 2, arm::rescale)	#
names(XT_FW)[1:3] <- paste(colnames(XT_FW[,c("E1","E2","F")]), "_FW", sep="")#
#
# Precip#
XP <- X %>% #
	.[, c(ID_variables, "Dataset", precip_variables)] %>%#
	mutate(Year=year(Date)) %>%#
	dplyr::select(Date, Dataset, Year, A1, B)#
XP_SS <- XP %>% filter(Dataset=="SS") %>% dplyr::select(-c(Date, Dataset))#
XP_SS[,c("A1","B")] %<>% apply(., 2, arm::rescale)	#
names(XP_SS)[2:3] <- paste(colnames(XP_SS[,c("A1","B")]), "_SS", sep="")#
#
XP_FW <- XP %>% filter(Dataset=="FW") %>% dplyr::select(-c(Date, Dataset))#
XP_FW[,c("A1","B")] %<>% apply(., 2, arm::rescale)	#
names(XP_FW)[2:3] <- paste(colnames(XP_FW[,c("A1","B")]), "_FW", sep="")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
Plant_Surveys_analysis_weather = Plant_Surveys_analysis %>% #
	merge(XT_SS,#
		by.x=c("PrevYear"), #
		by.y=c("Year"), #
		all=T#
	) %>%#
	merge(#
		XT_FW, #
		by.x=c("Year"), #
		by.y=c("Year"), #
		all=T#
	) %>%#
	merge(XP_SS,#
		by.x=c("PrevYear"), #
		by.y=c("Year"), #
		all=T#
	) %>%#
	merge(#
		XP_FW, #
		by.x=c("Year"), #
		by.y=c("Year"), #
		all=T#
	)#
Plant_Surveys_stricta <- Plant_Surveys_analysis_weather %>% 	filter(Species=="Opuntia stricta")#
Plant_Surveys_stricta %>% write.csv("/Users/KSauby/Documents/Projects/GTMNERR_analysis/data/Plant_Surveys_stricta.csv")#
#
Plant_Surveys_pusilla <- Plant_Surveys_analysis_weather %>% #
	filter(Species=="Opuntia pusilla")#
Plant_Surveys_pusilla %>% write.csv("/Users/KSauby/Documents/Projects/GTMNERR_analysis/data/Plant_Surveys_pusilla.csv")
head(Plant_Surveys_stricta)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys#
#
# --------------------------------------------------------------------------- ##
# --------------------------------------------------------------------------- ##
Plant_Info %<>% processPlantInfo(Plot_Info)
head(Plant_Info)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
#' Process Plant Info#
#'#
#' @description Process Plant Info#
#' @param Plant_Info Dataset with Plant Information#
#' @param Plot_Info Dataset with Plot Information#
#'#
#' @importFrom dplyr select summarise group_by arrange#
#' @export#
#
processPlantInfo <- function(Plant_Info, Plot_Info) {#
	# ----------------- ADD INFO FROM Plot_Info (Cluster, Network, Island, etc.)#
	Plant_Info <- Plot_Info %>%#
		select(#
			Island, #
			Tag_Number, #
			Cluster, #
			Cluster2, #
			Network, #
			Sampling, #
			SurveyOrder,#
			ReproductiveMode#
		) %>%#
		merge(Plant_Info, by = "Tag_Number", all.y=TRUE) %>%#
		as.data.table %>%#
		setnames("HostSpecies", "Species") %>%#
		as.data.frame#
	#---------------------------------------------------------- FORMAT PLANT IDs#
	Plant_Info %<>% Format_PlantIDs_Function#
	#---------------------- CALCULATE AND ADD NUMBER OF PlotPlantIDs PER PlantID#
	Plant_Info <- Plant_Info %>%#
		group_by(PlantID) %>%#
		summarise(#
			N.PlotPlantIDs = length(unique(PlotPlantID))#
		) %>%#
		merge(Plant_Info, by="PlantID")#
	#----------------------------------- ADD FIRST DATE PlotPlantID WAS SURVEYED#
	# particularly relevant for plants that grew into plots over the course of the study (and thus the number of PlotPlantIDs for a given PlantID changed over time)#
	Plant_Info <- Plant_Surveys %>%#
		group_by(PlotPlantID) %>%#
		summarise(#
			First.Survey.Date = min(Date)#
		) %>%#
		merge(Plant_Info, ., by="PlotPlantID", all.y=TRUE)#
	# ----------------------------------------------------------- PLANT SURVIVAL#
	# indicate whether plant was previously listed as dead or missing#
	# group based on plant ID number#
	Plant_Info <- Plant_Surveys %>% group_by(PlotPlantID) %>%#
		summarise( #
		# a plant has been obvserved to be dead/missing if at least 1 observation (> 0)#
		DeadObservation 		= Dead_Missing_Function(Dead),#
		MissingObservation 		= Dead_Missing_Function(Missing),#
		# a plant is confirmed dead/missing if at least 2 observations (> 1)#
		ConfirmedDead 			= Confirmed_Dead_Missing_Function(Dead),#
		ConfirmedMissing 		= Confirmed_Dead_Missing_Function(Missing),#
		ConfirmedDeadMissing = Confirmed_Dead_Missing_Function(c(Dead,Missing))	#
	) %>%#
	merge(Plant_Info, ., by="PlotPlantID")#
	#---------------- ADD FIRST DATE PlotPlantID WAS RECORDED AS DEAD OR MISSING#
	# oldest date PlotPlantID was recorded as dead#
	temp_dead_obs <- filter(Plant_Surveys, Dead=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstDeadObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing#
	temp_missing_obs <- filter(Plant_Surveys, Missing=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstMissingObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing or dead#
	temp_dead_missing <- merge(#
		temp_dead_obs, #
		temp_missing_obs, #
		by="PlotPlantID", #
		all=T#
	) #
	temp_dead_missing$FirstDeadMissingObservation = #
		dplyr::select(#
			temp_dead_missing, #
			FirstDeadObservation,#
			FirstMissingObservation#
		) %>% #
		apply(., 1, min, na.rm=T) #
	# merge with Plant_Info#
	Plant_Info <- merge(Plant_Info, temp_dead_missing, by="PlotPlantID", all=T)#
	# -------------------------------------------------- CLEANUP FOR CONSISTENCY#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, as.character#
	)#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, NA_Function#
	)#
	Plant_Info$ReproductiveMode %<>% WoodyTrunk_Function()#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, as.factor#
	)#
	# ------------------------------------------------- ADD InDemomographicStudy#
	# save all Plant_Info#
	Plant_Info_All <- Plant_Info#
	Plant_Info %<>% merge(#
		., #
		ClustersInDemographicStudy, #
		by = "Cluster",#
		all=TRUE#
	) #
	# ------------------------------------------------------------ ADD ClusterID#
	#	do this because some clusters share plots#
	Plot_Info_Cluster <- Plot_Info %>%#
		dplyr::select(Tag_Number, Cluster, Cluster2) %>%#
		reshape2:::melt.data.frame(., id.vars=c("Tag_Number"), #
			value.name="ClusterID") %>%#
		filter(ClusterID!=0) %>%#
		.[, -2] %>%#
		arrange(Tag_Number)#
	Plot_Info_Cluster %<>%#
		group_by(Tag_Number) %>%#
		summarise(ClusterID = paste(ClusterID, collapse=", "))#
	# CLUSTER ID FOR PLOTS *NOT* IN CLUSTERS#
	temp_A = Plot_Info %>%#
		dplyr::select(Tag_Number, Cluster) %>%#
		filter(Cluster==0)#
	temp_A$ClusterID <- temp_A$Tag_Number#
	temp_A %<>% .[, -2]#
	Plot_Info_Cluster %<>% rbind.fill(temp_A) %>% #
		merge(Plot_Info, by="Tag_Number") %>%#
		dplyr::select(ClusterID, Tag_Number)#
	Plant_Info %<>% merge(Plot_Info_Cluster, by="Tag_Number", all.x=T)#
	# --------------------------------------------------- remove InBigPlantStudy#
	Plant_Info[which(is.na(Plant_Info$InBigPlantStudy)), ]$InBigPlantStudy <- "No"#
	Plant_Info[which(Plant_Info$InBigPlantStudy=="yes"), ]$InBigPlantStudy <- "Yes"#
	Plant_Info[which(Plant_Info$InBigPlantStudy==""), ]$InBigPlantStudy <- "No"#
	Plant_Info %<>% filter(InBigPlantStudy=="No")#
	# ------------------------------------------------------------------------ ##
	return(Plant_Info)#
}#
#' Save File with Confirmed Dead and Missing Plants#
#'#
#' @description write csv with dead/missing plants - remove them from the maps#
#' @param Plant_Info Dataset with Plant Information#
#'#
#' @export#
saveConfirmedDeadMissing <- function(Plant_Info) {#
	Plant_Info_Dead <- filter(#
		Plant_Info, #
		ConfirmedDead=="1" | ConfirmedMissing=="1"#
	)#
	Plant_Info_Dead %<>% arrange(Tag_Number, PlantID)#
}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
#' Process Plant Info#
#'#
#' @description Process Plant Info#
#' @param Plant_Info Dataset with Plant Information#
#' @param Plot_Info Dataset with Plot Information#
#'#
#' @importFrom dplyr select summarise group_by arrange#
#' @export#
#
processPlantInfo <- function(Plant_Info, Plot_Info) {#
	# ----------------- ADD INFO FROM Plot_Info (Cluster, Network, Island, etc.)#
	Plant_Info <- Plot_Info %>%#
		select(#
			Island, #
			Tag_Number, #
			Cluster, #
			Cluster2, #
			Network, #
			Sampling, #
			SurveyOrder,#
			ReproductiveMode#
		) %>%#
		merge(Plant_Info, by = "Tag_Number", all.y=TRUE) %>%#
		as.data.table %>%#
		setnames("HostSpecies", "Species") %>%#
		as.data.frame#
	#---------------------------------------------------------- FORMAT PLANT IDs#
	Plant_Info %<>% Format_PlantIDs_Function#
	#---------------------- CALCULATE AND ADD NUMBER OF PlotPlantIDs PER PlantID#
	Plant_Info <- Plant_Info %>%#
		group_by(PlantID) %>%#
		summarise(#
			N.PlotPlantIDs = length(unique(PlotPlantID))#
		) %>%#
		merge(Plant_Info, by="PlantID")#
	#----------------------------------- ADD FIRST DATE PlotPlantID WAS SURVEYED#
	# particularly relevant for plants that grew into plots over the course of the study (and thus the number of PlotPlantIDs for a given PlantID changed over time)#
	Plant_Info <- Plant_Surveys %>%#
		group_by(PlotPlantID) %>%#
		summarise(#
			First.Survey.Date = min(Date)#
		) %>%#
		merge(Plant_Info, ., by="PlotPlantID", all.y=TRUE)#
	# ----------------------------------------------------------- PLANT SURVIVAL#
	# indicate whether plant was previously listed as dead or missing#
	# group based on plant ID number#
	Plant_Info <- Plant_Surveys %>% group_by(PlotPlantID) %>%#
		summarise( #
		# a plant has been obvserved to be dead/missing if at least 1 observation (> 0)#
		DeadObservation 		= Dead_Missing_Function(Dead),#
		MissingObservation 		= Dead_Missing_Function(Missing),#
		# a plant is confirmed dead/missing if at least 2 observations (> 1)#
		ConfirmedDead 			= Confirmed_Dead_Missing_Function(Dead),#
		ConfirmedMissing 		= Confirmed_Dead_Missing_Function(Missing),#
		ConfirmedDeadMissing = Confirmed_Dead_Missing_Function(c(Dead,Missing))	#
	) %>%#
	merge(Plant_Info, ., by="PlotPlantID")#
	#---------------- ADD FIRST DATE PlotPlantID WAS RECORDED AS DEAD OR MISSING#
	# oldest date PlotPlantID was recorded as dead#
	temp_dead_obs <- filter(Plant_Surveys, Dead=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstDeadObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing#
	temp_missing_obs <- filter(Plant_Surveys, Missing=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstMissingObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing or dead#
	temp_dead_missing <- merge(#
		temp_dead_obs, #
		temp_missing_obs, #
		by="PlotPlantID", #
		all=T#
	) #
	temp_dead_missing$FirstDeadMissingObservation = #
		dplyr::select(#
			temp_dead_missing, #
			FirstDeadObservation,#
			FirstMissingObservation#
		) %>% #
		apply(., 1, min, na.rm=T) #
	# merge with Plant_Info#
	Plant_Info <- merge(Plant_Info, temp_dead_missing, by="PlotPlantID", all=T)#
	# -------------------------------------------------- CLEANUP FOR CONSISTENCY#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, as.character#
	)#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, NA_Function#
	)#
	Plant_Info$ReproductiveMode %<>% WoodyTrunk_Function()#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, as.factor#
	)#
	# ------------------------------------------------- ADD InDemomographicStudy#
	# save all Plant_Info#
	Plant_Info_All <- Plant_Info#
	Plant_Info %<>% merge(#
		., #
		ClustersInDemographicStudy, #
		by = "Cluster",#
		all=TRUE#
	) #
	# ------------------------------------------------------------ ADD ClusterID#
	#	do this because some clusters share plots#
	Plot_Info_Cluster <- Plot_Info %>%#
		dplyr::select(Tag_Number, Cluster, Cluster2) %>%#
		reshape2:::melt.data.frame(., id.vars=c("Tag_Number"), #
			value.name="ClusterID") %>%#
		filter(ClusterID!=0) %>%#
		.[, -2] %>%#
		arrange(Tag_Number)#
	Plot_Info_Cluster %<>%#
		group_by(Tag_Number) %>%#
		summarise(ClusterID = paste(ClusterID, collapse=", "))#
	# CLUSTER ID FOR PLOTS *NOT* IN CLUSTERS#
	temp_A = Plot_Info %>%#
		dplyr::select(Tag_Number, Cluster) %>%#
		filter(Cluster==0)#
	temp_A$ClusterID <- temp_A$Tag_Number#
	temp_A %<>% .[, -2]#
	Plot_Info_Cluster %<>% rbind.fill(temp_A) %>% #
		merge(Plot_Info, by="Tag_Number") %>%#
		dplyr::select(ClusterID, Tag_Number)#
	Plant_Info %<>% merge(Plot_Info_Cluster, by="Tag_Number", all.x=T)#
	# --------------------------------------------------- remove InBigPlantStudy#
	Plant_Info[which(is.na(Plant_Info$InBigPlantStudy)), ]$InBigPlantStudy <- "No"#
	Plant_Info[which(Plant_Info$InBigPlantStudy=="yes"), ]$InBigPlantStudy <- "Yes"#
	Plant_Info[which(Plant_Info$InBigPlantStudy==""), ]$InBigPlantStudy <- "No"#
	Plant_Info %<>% filter(InBigPlantStudy=="No")#
	# ------------------------------------------------------------------------ ##
	return(Plant_Info)#
}#
#' Save File with Confirmed Dead and Missing Plants#
#'#
#' @description write csv with dead/missing plants - remove them from the maps#
#' @param Plant_Info Dataset with Plant Information#
#'#
#' @export#
saveConfirmedDeadMissing <- function(Plant_Info) {#
	Plant_Info_Dead <- filter(#
		Plant_Info, #
		ConfirmedDead=="1" | ConfirmedMissing=="1"#
	)#
	Plant_Info_Dead %<>% arrange(Tag_Number, PlantID)#
}
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
#' Process Plant Info#
#'#
#' @description Process Plant Info#
#' @param Plant_Info Dataset with Plant Information#
#' @param Plot_Info Dataset with Plot Information#
#'#
#' @importFrom dplyr select summarise group_by arrange#
#' @export#
#
processPlantInfo <- function(Plant_Info, Plot_Info) {#
	# ----------------- ADD INFO FROM Plot_Info (Cluster, Network, Island, etc.)#
	Plant_Info <- Plot_Info %>%#
		select(#
			Island, #
			Tag_Number, #
			Cluster, #
			Cluster2, #
			Network, #
			Sampling, #
			SurveyOrder,#
			ReproductiveMode#
		) %>%#
		merge(Plant_Info, by = "Tag_Number", all.y=TRUE) %>%#
		as.data.table %>%#
		setnames("HostSpecies", "Species") %>%#
		as.data.frame#
	#---------------------------------------------------------- FORMAT PLANT IDs#
	Plant_Info %<>% Format_PlantIDs_Function#
	#---------------------- CALCULATE AND ADD NUMBER OF PlotPlantIDs PER PlantID#
	Plant_Info <- Plant_Info %>%#
		group_by(PlantID) %>%#
		summarise(#
			N.PlotPlantIDs = length(unique(PlotPlantID))#
		) %>%#
		merge(Plant_Info, by="PlantID")#
	#----------------------------------- ADD FIRST DATE PlotPlantID WAS SURVEYED#
	# particularly relevant for plants that grew into plots over the course of the study (and thus the number of PlotPlantIDs for a given PlantID changed over time)#
	Plant_Info <- Plant_Surveys %>%#
		group_by(PlotPlantID) %>%#
		summarise(#
			First.Survey.Date = min(Date)#
		) %>%#
		merge(Plant_Info, ., by="PlotPlantID", all.y=TRUE)#
	# ----------------------------------------------------------- PLANT SURVIVAL#
	# indicate whether plant was previously listed as dead or missing#
	# group based on plant ID number#
	Plant_Info <- Plant_Surveys %>% group_by(PlotPlantID) %>%#
		summarise( #
		# a plant has been obvserved to be dead/missing if at least 1 observation (> 0)#
		DeadObservation 		= Dead_Missing_Function(Dead),#
		MissingObservation 		= Dead_Missing_Function(Missing),#
		# a plant is confirmed dead/missing if at least 2 observations (> 1)#
		ConfirmedDead 			= Confirmed_Dead_Missing_Function(Dead),#
		ConfirmedMissing 		= Confirmed_Dead_Missing_Function(Missing),#
		ConfirmedDeadMissing = Confirmed_Dead_Missing_Function(c(Dead,Missing))	#
	) %>%#
	merge(Plant_Info, ., by="PlotPlantID")#
	#---------------- ADD FIRST DATE PlotPlantID WAS RECORDED AS DEAD OR MISSING#
	# oldest date PlotPlantID was recorded as dead#
	temp_dead_obs <- filter(Plant_Surveys, Dead=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstDeadObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing#
	temp_missing_obs <- filter(Plant_Surveys, Missing=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstMissingObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing or dead#
	temp_dead_missing <- merge(#
		temp_dead_obs, #
		temp_missing_obs, #
		by="PlotPlantID", #
		all=T#
	) #
	temp_dead_missing$FirstDeadMissingObservation = #
		dplyr::select(#
			temp_dead_missing, #
			FirstDeadObservation,#
			FirstMissingObservation#
		) %>% #
		apply(., 1, min, na.rm=T) #
	# merge with Plant_Info#
	Plant_Info <- merge(Plant_Info, temp_dead_missing, by="PlotPlantID", all=T)#
	# -------------------------------------------------- CLEANUP FOR CONSISTENCY#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, as.character#
	)#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, NA_Function#
	)#
	Plant_Info$ReproductiveMode %<>% WoodyTrunk_Function()#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, as.factor#
	)#
	# ------------------------------------------------- ADD InDemomographicStudy#
	# save all Plant_Info#
	Plant_Info_All <- Plant_Info#
	Plant_Info %<>% merge(#
		., #
		ClustersInDemographicStudy, #
		by = "Cluster",#
		all=TRUE#
	) #
	# ------------------------------------------------------------ ADD ClusterID#
	#	do this because some clusters share plots#
	Plot_Info_Cluster <- Plot_Info %>%#
		dplyr::select(Tag_Number, Cluster, Cluster2) %>%#
		reshape2:::melt.data.frame(., id.vars=c("Tag_Number"), #
			value.name="ClusterID") %>%#
		filter(ClusterID!=0) %>%#
		.[, -2] %>%#
		arrange(Tag_Number)#
	Plot_Info_Cluster %<>%#
		group_by(Tag_Number) %>%#
		summarise(ClusterID = paste(ClusterID, collapse=", "))#
	# CLUSTER ID FOR PLOTS *NOT* IN CLUSTERS#
	temp_A = Plot_Info %>%#
		dplyr::select(Tag_Number, Cluster) %>%#
		filter(Cluster==0)#
	temp_A$ClusterID <- temp_A$Tag_Number#
	temp_A %<>% .[, -2]#
	Plot_Info_Cluster %<>% rbind.fill(temp_A) %>% #
		merge(Plot_Info, by="Tag_Number") %>%#
		dplyr::select(ClusterID, Tag_Number)#
	Plant_Info %<>% merge(Plot_Info_Cluster, by="Tag_Number", all.x=T)#
	# --------------------------------------------------- remove InBigPlantStudy#
	Plant_Info[which(is.na(Plant_Info$InBigPlantStudy)), ]$InBigPlantStudy <- "No"#
	Plant_Info[which(Plant_Info$InBigPlantStudy=="yes"), ]$InBigPlantStudy <- "Yes"#
	Plant_Info[which(Plant_Info$InBigPlantStudy==""), ]$InBigPlantStudy <- "No"#
	Plant_Info %<>% filter(InBigPlantStudy=="No")#
	# ------------------------------------------------------------------------ ##
	return(Plant_Info)#
}#
#' Save File with Confirmed Dead and Missing Plants#
#'#
#' @description write csv with dead/missing plants - remove them from the maps#
#' @param Plant_Info Dataset with Plant Information#
#'#
#' @export#
saveConfirmedDeadMissing <- function(Plant_Info) {#
	Plant_Info_Dead <- filter(#
		Plant_Info, #
		ConfirmedDead=="1" | ConfirmedMissing=="1"#
	)#
	Plant_Info_Dead %<>% arrange(Tag_Number, PlantID)#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys#
#
# --------------------------------------------------------------------------- ##
# --------------------------------------------------------------------------- ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info)#
Plant_Surveys %<>% processPlantSurveysafterMergewPlantInfo#
Plant_Surveys_by_Plant <- Plant_Surveys %>% processSurveysMergedbyPlant#
# create Fecundity and RGR dataset - only measured size during the spring and summer#
Plant_Surveys_by_Year <- Plant_Surveys_by_Plant %>% #
	group_by(SamplingYear, PlantID) %>%#
	summarise(#
		Species = Species[1],#
		Network = Network[1],#
		Island = Island[1],#
		ReproductiveMode = ReproductiveMode[1],#
		Date = min(Date),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		FruitFlowerPres_t = max(FruitFlowerPres_t, na.rm=T),#
		Size_t = max(Size_t, na.rm=T),#
		Height_t = max(Height_t, na.rm=T),#
		Fruit_t = max(Fruit_t, na.rm=T),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		CA_t = max(CA_t, na.rm=T),#
		ME_t = max(ME_t, na.rm=T),#
		DA_t = max(DA_t, na.rm=T),#
		CH_t = max(CH_t, na.rm=T),#
		Old_Moth_Evidence_t = max(Old_Moth_Evidence_t, na.rm=T)#
	) %>% #
	mutate(PrevSamplingYear = SamplingYear - 1) %>%#
	# lag variables#
	calculateSizeLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateDateLags %>%#
	createNewInsectVariables(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateInsectLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	as.data.frame %>%#
	calculateRGR ## this leads to a few values with PlantID = NA#
# --------------------------------------------------------------------------- ##
########################## ERROR MESSAGE#
	# check for PlantID = NA#
	dups <- Plant_Surveys_by_Year %>% #
		filter(is.na(PlantID))#
#
	if (dim(dups)[1] > 0) {#
			stop("NA values for PlantID.")#
	}#
	# should not be any non-NA values for RGR for SamplingYear 2012#
	dups <- Plant_Surveys_by_Year %>% #
		filter(SamplingYear==2012) %>%#
		filter(!is.na(RGR_Height))#
#
	if (dim(dups)[1] > 0) {#
			stop("Non-NA values for RGR for first Sampling Year.")#
	}#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Size_t_1 %<>% as.numeric#
Plant_Surveys_by_Year[,c(#
	"Old_Moth_Evidence_t",#
	"NatInsect_t",#
	"Insect_t",#
	"DA_t",#
	"CH_t",#
	"ME_t",#
	"CA_t",                #
	"Size_t",#
	"FruitPres_t",#
	"FruitFlowerPres_t",#
	"Fruit_t",#
	"Size_t_1",#
	"DaysSincePrevSurvey",#
	"DaysSinceStart",#
	"CA_t_1",#
	"ME_t_1",#
	"CH_t_1",#
	"DA_t_1",#
	"Insect_t_1",#
	"NatInsect_t_1",#
	"Old_Moth_Evidence_t_1"#
)] %<>% apply(., 2, as.integer)#
Plant_Surveys_by_Year[,c(#
	"Height_t",#
	"Height_t_1",#
	"RGR_Height",#
	"RGR_Height365",#
	"RGR_Size",#
	"RGR_Size365"#
)] %<>% apply(., 2, as.numeric)#
Plant_Surveys_by_Year$PlantID %<>% as.factor	#
Plant_Surveys_by_Year$SamplingYear %<>% as.factor#
Plant_Surveys_by_Year$Species %<>% as.factor#
Plant_Surveys_by_Year$Network %<>% as.factor#
Plant_Surveys_by_Year$Island %<>% as.factor#
Plant_Surveys_by_Year$ReproductiveMode %<>% as.factor#
Plant_Surveys_by_Year$Year <- year(Plant_Surveys_by_Year$Date)#
Plant_Surveys_by_Year$PrevYear <- year(Plant_Surveys_by_Year$Date) - 1#
#
Plant_Surveys_analysis <- Plant_Surveys_by_Year %>% 	#
	as.data.frame %>%#
 	droplevels %>% #
 	mutate(Ln_Size_t_1_st = arm::rescale(log(Size_t_1))) %>%#
 	dplyr::select(#
 		Species,#
		PlantID,#
 		Date,#
		Year,#
		PrevYear,#
 		Network,#
 		Island,#
		Size_t,#
 		Size_t_1,#
 		Height_t_1,#
 		CA_t_1,#
 		ME_t_1,#
 		Old_Moth_Evidence_t_1,#
 		RGR_Size,#
 		RGR_Height,#
 		Ln_Size_t_1_st,#
 		FruitPres_t,#
 		Fruit_t#
 	) %>%#
 	.[complete.cases(.),]#
Original_Plant_Data %<>% processOriginalPlantData#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling/data')#
# write.csv(Plant_Surveys_stricta_analysis, "Plant_Surveys_stricta.csv")#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_stricta")#
################################################################################
# Save modified timeseries dataset - just pusilla#
################################################################################
# Plant_Surveys_pusilla =	Plant_Surveys_by_Year %>% #
# 	filter(Species=="Opuntia pusilla")#
# Plant_Surveys_pusilla$Species %<>% droplevels#
#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_pusilla")
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys#
#
# --------------------------------------------------------------------------- ##
# --------------------------------------------------------------------------- ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info)#
Plant_Surveys %<>% processPlantSurveysafterMergewPlantInfo#
Plant_Surveys_by_Plant <- Plant_Surveys %>% processSurveysMergedbyPlant#
# create Fecundity and RGR dataset - only measured size during the spring and summer#
Plant_Surveys_by_Year <- Plant_Surveys_by_Plant %>% #
	group_by(SamplingYear, PlantID) %>%#
	summarise(#
		Species = Species[1],#
		Network = Network[1],#
		Island = Island[1],#
		ReproductiveMode = ReproductiveMode[1],#
		Date = min(Date),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		FruitFlowerPres_t = max(FruitFlowerPres_t, na.rm=T),#
		Size_t = max(Size_t, na.rm=T),#
		Height_t = max(Height_t, na.rm=T),#
		Fruit_t = max(Fruit_t, na.rm=T),#
		FruitPres_t = max(FruitPres_t, na.rm=T),#
		CA_t = max(CA_t, na.rm=T),#
		ME_t = max(ME_t, na.rm=T),#
		DA_t = max(DA_t, na.rm=T),#
		CH_t = max(CH_t, na.rm=T),#
		Old_Moth_Evidence_t = max(Old_Moth_Evidence_t, na.rm=T)#
	) %>% #
	mutate(PrevSamplingYear = SamplingYear - 1) %>%#
	# lag variables#
	calculateSizeLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateDateLags %>%#
	createNewInsectVariables(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	calculateInsectLags(#
		arrange.variable="Date", #
		grouping.variable="PlantID"#
	) %>%#
	as.data.frame %>%#
	calculateRGR ## this leads to a few values with PlantID = NA#
# --------------------------------------------------------------------------- ##
########################## ERROR MESSAGE#
	# check for PlantID = NA#
	dups <- Plant_Surveys_by_Year %>% #
		filter(is.na(PlantID))#
#
	if (dim(dups)[1] > 0) {#
			stop("NA values for PlantID.")#
	}#
	# should not be any non-NA values for RGR for SamplingYear 2012#
	dups <- Plant_Surveys_by_Year %>% #
		filter(SamplingYear==2012) %>%#
		filter(!is.na(RGR_Height))#
#
	if (dim(dups)[1] > 0) {#
			stop("Non-NA values for RGR for first Sampling Year.")#
	}#
# --------------------------------------------------------------------------- ##
Plant_Surveys_by_Year$Size_t_1 %<>% as.numeric#
Plant_Surveys_by_Year[,c(#
	"Old_Moth_Evidence_t",#
	"NatInsect_t",#
	"Insect_t",#
	"DA_t",#
	"CH_t",#
	"ME_t",#
	"CA_t",                #
	"Size_t",#
	"FruitPres_t",#
	"FruitFlowerPres_t",#
	"Fruit_t",#
	"Size_t_1",#
	"DaysSincePrevSurvey",#
	"DaysSinceStart",#
	"CA_t_1",#
	"ME_t_1",#
	"CH_t_1",#
	"DA_t_1",#
	"Insect_t_1",#
	"NatInsect_t_1",#
	"Old_Moth_Evidence_t_1"#
)] %<>% apply(., 2, as.integer)#
Plant_Surveys_by_Year[,c(#
	"Height_t",#
	"Height_t_1",#
	"RGR_Height",#
	"RGR_Height365",#
	"RGR_Size",#
	"RGR_Size365"#
)] %<>% apply(., 2, as.numeric)#
Plant_Surveys_by_Year$PlantID %<>% as.factor	#
Plant_Surveys_by_Year$SamplingYear %<>% as.factor#
Plant_Surveys_by_Year$Species %<>% as.factor#
Plant_Surveys_by_Year$Network %<>% as.factor#
Plant_Surveys_by_Year$Island %<>% as.factor#
Plant_Surveys_by_Year$ReproductiveMode %<>% as.factor#
Plant_Surveys_by_Year$Year <- year(Plant_Surveys_by_Year$Date)#
Plant_Surveys_by_Year$PrevYear <- year(Plant_Surveys_by_Year$Date) - 1#
#
Plant_Surveys_analysis <- Plant_Surveys_by_Year %>% 	#
	as.data.frame %>%#
 	droplevels %>% #
 	mutate(Ln_Size_t_1_st = arm::rescale(log(Size_t_1))) %>%#
 	dplyr::select(#
 		Species,#
		PlantID,#
 		Date,#
		Year,#
		PrevYear,#
 		Network,#
 		Island,#
		Size_t,#
 		Size_t_1,#
 		Height_t_1,#
 		CA_t_1,#
 		ME_t_1,#
 		Old_Moth_Evidence_t_1,#
 		RGR_Size,#
 		RGR_Height,#
 		Ln_Size_t_1_st,#
 		FruitPres_t,#
 		Fruit_t#
 	) %>%#
 	.[complete.cases(.),]#
Original_Plant_Data %<>% processOriginalPlantData#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling/data')#
# write.csv(Plant_Surveys_stricta_analysis, "Plant_Surveys_stricta.csv")#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_stricta")#
################################################################################
# Save modified timeseries dataset - just pusilla#
################################################################################
# Plant_Surveys_pusilla =	Plant_Surveys_by_Year %>% #
# 	filter(Species=="Opuntia pusilla")#
# Plant_Surveys_pusilla$Species %<>% droplevels#
#
# setwd('/Users/KSauby/Documents/Dropbox/GradSchool/Research/Projects/sampling')#
# cache("Plant_Surveys_pusilla")
head(Plant_Surveys_pusilla)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys#
#
# --------------------------------------------------------------------------- ##
# --------------------------------------------------------------------------- ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys#
#
# --------------------------------------------------------------------------- ##
# --------------------------------------------------------------------------- ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
#' Process Plant Info#
#'#
#' @description Process Plant Info#
#' @param Plant_Info Dataset with Plant Information#
#' @param Plot_Info Dataset with Plot Information#
#'#
#' @importFrom dplyr select summarise group_by arrange#
#' @export#
#
processPlantInfo <- function(Plant_Info, Plot_Info) {#
	# ----------------- ADD INFO FROM Plot_Info (Cluster, Network, Island, etc.)#
	Plant_Info <- Plot_Info %>%#
		select(#
			Island, #
			Tag_Number, #
			Cluster, #
			Cluster2, #
			Network, #
			Sampling, #
			SurveyOrder#
		) %>%#
		merge(Plant_Info, by = "Tag_Number", all.y=TRUE) %>%#
		as.data.table %>%#
		setnames("HostSpecies", "Species") %>%#
		as.data.frame#
	#---------------------------------------------------------- FORMAT PLANT IDs#
	Plant_Info %<>% Format_PlantIDs_Function#
	#---------------------- CALCULATE AND ADD NUMBER OF PlotPlantIDs PER PlantID#
	Plant_Info <- Plant_Info %>%#
		group_by(PlantID) %>%#
		summarise(#
			N.PlotPlantIDs = length(unique(PlotPlantID))#
		) %>%#
		merge(Plant_Info, by="PlantID")#
	#----------------------------------- ADD FIRST DATE PlotPlantID WAS SURVEYED#
	# particularly relevant for plants that grew into plots over the course of the study (and thus the number of PlotPlantIDs for a given PlantID changed over time)#
	Plant_Info <- Plant_Surveys %>%#
		group_by(PlotPlantID) %>%#
		summarise(#
			First.Survey.Date = min(Date)#
		) %>%#
		merge(Plant_Info, ., by="PlotPlantID", all.y=TRUE)#
	# ----------------------------------------------------------- PLANT SURVIVAL#
	# indicate whether plant was previously listed as dead or missing#
	# group based on plant ID number#
	Plant_Info <- Plant_Surveys %>% group_by(PlotPlantID) %>%#
		summarise( #
		# a plant has been obvserved to be dead/missing if at least 1 observation (> 0)#
		DeadObservation 		= Dead_Missing_Function(Dead),#
		MissingObservation 		= Dead_Missing_Function(Missing),#
		# a plant is confirmed dead/missing if at least 2 observations (> 1)#
		ConfirmedDead 			= Confirmed_Dead_Missing_Function(Dead),#
		ConfirmedMissing 		= Confirmed_Dead_Missing_Function(Missing),#
		ConfirmedDeadMissing = Confirmed_Dead_Missing_Function(c(Dead,Missing))	#
	) %>%#
	merge(Plant_Info, ., by="PlotPlantID")#
	#---------------- ADD FIRST DATE PlotPlantID WAS RECORDED AS DEAD OR MISSING#
	# oldest date PlotPlantID was recorded as dead#
	temp_dead_obs <- filter(Plant_Surveys, Dead=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstDeadObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing#
	temp_missing_obs <- filter(Plant_Surveys, Missing=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstMissingObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing or dead#
	temp_dead_missing <- merge(#
		temp_dead_obs, #
		temp_missing_obs, #
		by="PlotPlantID", #
		all=T#
	) #
	temp_dead_missing$FirstDeadMissingObservation = #
		dplyr::select(#
			temp_dead_missing, #
			FirstDeadObservation,#
			FirstMissingObservation#
		) %>% #
		apply(., 1, min, na.rm=T) #
	# merge with Plant_Info#
	Plant_Info <- merge(Plant_Info, temp_dead_missing, by="PlotPlantID", all=T)#
	# -------------------------------------------------- CLEANUP FOR CONSISTENCY#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, as.character#
	)#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, NA_Function#
	)#
	Plant_Info$ReproductiveMode %<>% WoodyTrunk_Function()#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, as.factor#
	)#
	# ------------------------------------------------- ADD InDemomographicStudy#
	# save all Plant_Info#
	Plant_Info_All <- Plant_Info#
	Plant_Info %<>% merge(#
		., #
		ClustersInDemographicStudy, #
		by = "Cluster",#
		all=TRUE#
	) #
	# ------------------------------------------------------------ ADD ClusterID#
	#	do this because some clusters share plots#
	Plot_Info_Cluster <- Plot_Info %>%#
		dplyr::select(Tag_Number, Cluster, Cluster2) %>%#
		reshape2:::melt.data.frame(., id.vars=c("Tag_Number"), #
			value.name="ClusterID") %>%#
		filter(ClusterID!=0) %>%#
		.[, -2] %>%#
		arrange(Tag_Number)#
	Plot_Info_Cluster %<>%#
		group_by(Tag_Number) %>%#
		summarise(ClusterID = paste(ClusterID, collapse=", "))#
	# CLUSTER ID FOR PLOTS *NOT* IN CLUSTERS#
	temp_A = Plot_Info %>%#
		dplyr::select(Tag_Number, Cluster) %>%#
		filter(Cluster==0)#
	temp_A$ClusterID <- temp_A$Tag_Number#
	temp_A %<>% .[, -2]#
	Plot_Info_Cluster %<>% rbind.fill(temp_A) %>% #
		merge(Plot_Info, by="Tag_Number") %>%#
		dplyr::select(ClusterID, Tag_Number)#
	Plant_Info %<>% merge(Plot_Info_Cluster, by="Tag_Number", all.x=T)#
	# --------------------------------------------------- remove InBigPlantStudy#
	Plant_Info[which(is.na(Plant_Info$InBigPlantStudy)), ]$InBigPlantStudy <- "No"#
	Plant_Info[which(Plant_Info$InBigPlantStudy=="yes"), ]$InBigPlantStudy <- "Yes"#
	Plant_Info[which(Plant_Info$InBigPlantStudy==""), ]$InBigPlantStudy <- "No"#
	Plant_Info %<>% filter(InBigPlantStudy=="No")#
	# ------------------------------------------------------------------------ ##
	return(Plant_Info)#
}#
#' Save File with Confirmed Dead and Missing Plants#
#'#
#' @description write csv with dead/missing plants - remove them from the maps#
#' @param Plant_Info Dataset with Plant Information#
#'#
#' @export#
saveConfirmedDeadMissing <- function(Plant_Info) {#
	Plant_Info_Dead <- filter(#
		Plant_Info, #
		ConfirmedDead=="1" | ConfirmedMissing=="1"#
	)#
	Plant_Info_Dead %<>% arrange(Tag_Number, PlantID)#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys#
#
# --------------------------------------------------------------------------- ##
# --------------------------------------------------------------------------- ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
#' Process Plant Info#
#'#
#' @description Process Plant Info#
#' @param Plant_Info Dataset with Plant Information#
#' @param Plot_Info Dataset with Plot Information#
#'#
#' @importFrom dplyr select summarise group_by arrange#
#' @export#
#
processPlantInfo <- function(Plant_Info, Plot_Info) {#
	# ----------------- ADD INFO FROM Plot_Info (Cluster, Network, Island, etc.)#
	Plant_Info <- Plot_Info %>%#
		select(#
			Island, #
			Tag_Number, #
			Cluster, #
			Cluster2, #
			Network, #
			Sampling, #
			SurveyOrder#
		) %>%#
		merge(Plant_Info, by = "Tag_Number", all.y=TRUE) %>%#
		as.data.table %>%#
		setnames("HostSpecies", "Species") %>%#
		as.data.frame#
	#---------------------------------------------------------- FORMAT PLANT IDs#
	Plant_Info %<>% Format_PlantIDs_Function#
	#---------------------- CALCULATE AND ADD NUMBER OF PlotPlantIDs PER PlantID#
	Plant_Info <- Plant_Info %>%#
		group_by(PlantID) %>%#
		summarise(#
			N.PlotPlantIDs = length(unique(PlotPlantID))#
		) %>%#
		merge(Plant_Info, by="PlantID")#
	#----------------------------------- ADD FIRST DATE PlotPlantID WAS SURVEYED#
	# particularly relevant for plants that grew into plots over the course of the study (and thus the number of PlotPlantIDs for a given PlantID changed over time)#
	Plant_Info <- Plant_Surveys %>%#
		group_by(PlotPlantID) %>%#
		summarise(#
			First.Survey.Date = min(Date)#
		) %>%#
		merge(Plant_Info, ., by="PlotPlantID", all.y=TRUE)#
	# ----------------------------------------------------------- PLANT SURVIVAL#
	# indicate whether plant was previously listed as dead or missing#
	# group based on plant ID number#
	Plant_Info <- Plant_Surveys %>% group_by(PlotPlantID) %>%#
		summarise( #
		# a plant has been obvserved to be dead/missing if at least 1 observation (> 0)#
		DeadObservation 		= Dead_Missing_Function(Dead),#
		MissingObservation 		= Dead_Missing_Function(Missing),#
		# a plant is confirmed dead/missing if at least 2 observations (> 1)#
		ConfirmedDead 			= Confirmed_Dead_Missing_Function(Dead),#
		ConfirmedMissing 		= Confirmed_Dead_Missing_Function(Missing),#
		ConfirmedDeadMissing = Confirmed_Dead_Missing_Function(c(Dead,Missing))	#
	) %>%#
	merge(Plant_Info, ., by="PlotPlantID")#
	#---------------- ADD FIRST DATE PlotPlantID WAS RECORDED AS DEAD OR MISSING#
	# oldest date PlotPlantID was recorded as dead#
	temp_dead_obs <- filter(Plant_Surveys, Dead=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstDeadObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing#
	temp_missing_obs <- filter(Plant_Surveys, Missing=="1") %>%#
		group_by(PlotPlantID) %>%#
		summarise(FirstMissingObservation = min(Date))#
	# oldest date PlotPlantID was recorded as missing or dead#
	temp_dead_missing <- merge(#
		temp_dead_obs, #
		temp_missing_obs, #
		by="PlotPlantID", #
		all=T#
	) #
	temp_dead_missing$FirstDeadMissingObservation = #
		dplyr::select(#
			temp_dead_missing, #
			FirstDeadObservation,#
			FirstMissingObservation#
		) %>% #
		apply(., 1, min, na.rm=T) #
	# merge with Plant_Info#
	Plant_Info <- merge(Plant_Info, temp_dead_missing, by="PlotPlantID", all=T)#
	# -------------------------------------------------- CLEANUP FOR CONSISTENCY#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, as.character#
	)#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, NA_Function#
	)#
	Plant_Info$ReproductiveMode %<>% WoodyTrunk_Function()#
	Plant_Info[,c(#
		"Quadrant",#
		"ReproductiveMode",#
		"Parent")] %<>%#
		apply(., 2, as.factor#
	)#
	# ------------------------------------------------- ADD InDemomographicStudy#
	# save all Plant_Info#
	Plant_Info_All <- Plant_Info#
	Plant_Info %<>% merge(#
		., #
		ClustersInDemographicStudy, #
		by = "Cluster",#
		all=TRUE#
	) #
	# ------------------------------------------------------------ ADD ClusterID#
	#	do this because some clusters share plots#
	Plot_Info_Cluster <- Plot_Info %>%#
		dplyr::select(Tag_Number, Cluster, Cluster2) %>%#
		reshape2:::melt.data.frame(., id.vars=c("Tag_Number"), #
			value.name="ClusterID") %>%#
		filter(ClusterID!=0) %>%#
		.[, -2] %>%#
		arrange(Tag_Number)#
	Plot_Info_Cluster %<>%#
		group_by(Tag_Number) %>%#
		summarise(ClusterID = paste(ClusterID, collapse=", "))#
	# CLUSTER ID FOR PLOTS *NOT* IN CLUSTERS#
	temp_A = Plot_Info %>%#
		dplyr::select(Tag_Number, Cluster) %>%#
		filter(Cluster==0)#
	temp_A$ClusterID <- temp_A$Tag_Number#
	temp_A %<>% .[, -2]#
	Plot_Info_Cluster %<>% rbind.fill(temp_A) %>% #
		merge(Plot_Info, by="Tag_Number") %>%#
		dplyr::select(ClusterID, Tag_Number)#
	Plant_Info %<>% merge(Plot_Info_Cluster, by="Tag_Number", all.x=T)#
	# --------------------------------------------------- remove InBigPlantStudy#
	Plant_Info[which(is.na(Plant_Info$InBigPlantStudy)), ]$InBigPlantStudy <- "No"#
	Plant_Info[which(Plant_Info$InBigPlantStudy=="yes"), ]$InBigPlantStudy <- "Yes"#
	Plant_Info[which(Plant_Info$InBigPlantStudy==""), ]$InBigPlantStudy <- "No"#
	Plant_Info %<>% filter(InBigPlantStudy=="No")#
	# ------------------------------------------------------------------------ ##
	return(Plant_Info)#
}#
#' Save File with Confirmed Dead and Missing Plants#
#'#
#' @description write csv with dead/missing plants - remove them from the maps#
#' @param Plant_Info Dataset with Plant Information#
#'#
#' @export#
saveConfirmedDeadMissing <- function(Plant_Info) {#
	Plant_Info_Dead <- filter(#
		Plant_Info, #
		ConfirmedDead=="1" | ConfirmedMissing=="1"#
	)#
	Plant_Info_Dead %<>% arrange(Tag_Number, PlantID)#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
#' Process Plant Survey Data#
#'#
#' @description Steps:#
#' \itemize{#
#'  \item Fix column names#
#'  \item format dates#
#'  \item format PlantIDs#
#'  \item format convert "999" values to NA#
#'  \item format change "yes"/"no" values of the insect survey, missing, and dead columns to 0/1#
#'  \item format numeric columns#
#'  \item add total segment column#
#'  \item add fruit count column#
#'  \item add fruit/flower count column#
#'  \item check for observations of 0 pads, 0 height, or 0 width; if there are observations, stop#
#' 	}#
#' Column Names:#
#' \itemize{#
#'  \item PlantMeasureID Record number if Microsoft Access database#
#'  \item First_Observer_Initials Initials of primary observer (should always be KS, for Kristen Sauby)#
#'  \item Second_Observer_Initials Initials of secondary observer; CJP - Cory Penca; YP - Yani Paulay; KS - Kristen Sauby; JW: Juliana Welch; CW: Cedric Worman; AP: Adam Payton#
#'  \item Date Date#
#'  \item PlantID Unique number for the individual plant#
#'  \item Plant_collected Were plant samples collected?#
#'  \item Time#
#'  \item PlantPictures identifying numbers of photos taken#
#'  \item PlantPictures_Direction direction that the photo(s) was(were) taken#
#
#'  \item CA_t Presence/absence (1/0) of Cactoblastis cactorum#
#'  \item CACA_collected Were samples of Cactoblastis cactorum collected?#
#'  \item CACA_quantity Number of Cactoblastis cactorum samples collected#
#
#'  \item ME_t Presence/absence (1/0) of Melitara prodenialis#
#'  \item MEPR_collected Were samples of Melitara prodenialis collected?#
#'  \item MEPR_quantity Number of Melitara prodenialis samples collected#
#
#'  \item CH_t Presence/absence (1/0) of Chelinidea vittiger#
#'  \item CHVI_collected Were samples of Chelinidea vittiger collected?#
#'  \item CHVI_quantity Number of Chelinidea vittiger samples collected#
#
#'  \item DA_t Presence/absence (1/0) of Dactylopius species#
#'  \item DACT_collected Were samples of Dactylopius species collected?#
#'  \item DACT_quantity Number of Dactylopius species samples collected#
#
#'  \item Unknown_Moth_t Presence/absence (1/0) of unknown moth#
#'  \item UnknownMoth_collected Were samples of unknown moth collected?#
#'  \item UnknownMoth_quantity Number of unknown moth samples collected#
#
#'  \item Old_Moth_Evidence_t Evidence of past moth infestation#
#'  \item Old_Moth_Evidence_recent Whether evidence of past moth infestation appears recent or old#
#
#'  \item Fungus Presence/absence (1/0) of plant fungal infection#
#'  \item Gerstaeckeria Presence/absence (1/0) of Gerstaeckeria#
#'  \item Plant_Segments_total Number of segments#
#'  \item Plant_Segments_w_leaves New, green segments with leaves#
#'  \item Plant_Segments_wo_leaves Green segments without leaves#
#'  \item Plant_Segments_woody number of woody segments/trunks; these segments are entirely brown on the outside      #
#'  \item Height_t maximum height in cm#
#'  \item Width_t maximum width in cm#
#'  \item Perpen_Width width, perpendicular to max width, in cm#
#'  \item Num_FlowerBuds Number of flower buds#
#'  \item Num_Fruit_red Number of red fruit#
#'  \item Num_Fruit_green Number of green fruit#
#'  \item Num_Flowers Number of flowers#
#'  \item Num_Fruit use this when number is recorded but distinction by color is not made#
#'  \item Pollinators#
#'  \item Spiders#
#'  \item Ants#
#'  \item Other_collected_quantity#
#'  \item Plant_Notes#
#'  \item Insect_Notes        #
#'  \item Other_Notes#
#'  \item Dead Whether the plant is observed to be dead; 0 or 1#
#'  \item Missing#
#'  \item OutsideOfPlot "Yes" if plant is no longer in plot#
#'  \item PlotPlantID Unique number for the individual plant; if a plant is counted in multiple plots, a letter is appended to the plant ID here (e.g., 9606a) and then removed for analysis#
#'  \item Size_t The sum of Plant_Segments_total, Plant_Segments_w_leaves, Plant_Segments_wo_leaves, and Plant_Segments_woody#
#
#'  \item Fruit_t The sum of Num_Fruit_red, Num_Fruit_green, and Num_Fruit#
#'  \item Fruit_Flowers_t The sum of Num_FlowerBuds, Num_Flowers, Num_Fruit_red, Num_Fruit_green, and Num_Fruit#
#' 	}#
#'#
#' @export#
#
processPlantSurveys <- function(Plant_Surveys) {#
	# ------------------------------------------------------------- CHANGE NAMES#
	# remame size and height#
	Plant_Surveys %<>%	as.data.table %>%#
		setnames("Max_Height", 				"Height_t") %>%#
		setnames("Max_Width", 				"Width_t") %>%#
		setnames("CACA_Larvae", 			"CA_t") %>%#
		setnames("MEPR_Larvae", 			"ME_t") %>%#
		setnames("CHVI_Evidence", 			"CH_t") %>%#
		setnames("DACT_Evidence", 			"DA_t") %>%#
		setnames("UnknownMoth_Evidence", 	"Unknown_Moth_t") %>%#
		setnames("Old_Moth_Evidence", 		"Old_Moth_Evidence_t") %>%#
		setnames("DateSurveyed", 			"Date") %>%#
		as.data.frame#
	# formatting/preparation necessary for prepping Demographic Plant Info#
	Plant_Surveys$Date %<>% Format_Date_Function#
	Plant_Surveys %<>% arrange(Date)#
	Plant_Surveys %<>% Format_PlantIDs_Function#
	# ------------------------------------------------ CONVERT ALL "999s" to NAs#
	Plant_Surveys[,c(#
		"Plant_Segments_total", #
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		"Perpen_Width",#
		"Width_t",#
		"Height_t",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------- INSECT SURVEYS, MISSING, DEAD - CHANGE YES, NO to 0, 1#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, Yes_Function#
	)#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>%#
		apply(2, No_Function#
	)#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------------------------------------------------- MAKE NUMERIC#
	Plant_Surveys[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		"Plant_Segments_total",#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		"Height_t",#
		"Width_t",#
		"Perpen_Width",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit",#
		"Dead",#
		"Missing")] %<>% #
		apply(2, as.numeric#
	)#
	# ------------------------------------------------- ADD TOTAL SEGMENT COLUMN#
	# do this so that plants that have no segments recorded (all NAs) have a total segment count = NA#
	# for those plants that have fewer than four NAs (at least one segment column has a number), sum the segments#
	Plant_Surveys$Size_t <- Plant_Surveys %>%#
							dplyr::select(#
								Plant_Segments_total,#
								Plant_Segments_w_leaves,#
								Plant_Segments_wo_leaves,#
								Plant_Segments_woody#
							) %>%#
							apply(1, mysum)#
	Plant_Surveys$Size_t %<>% Zero_is_NA_Function#
	# --------------------------------------------------------- ADD FRUIT COLUMN#
	Plant_Surveys$Fruit_t <- Plant_Surveys %>%#
							dplyr::select(#
								Num_Fruit_red,#
								Num_Fruit_green,#
								Num_Fruit#
							) %>%#
							apply(1, mysum)#
	Plant_Surveys$Fruit_Flowers_t <- Plant_Surveys %>%#
							dplyr::select(#
								Num_FlowerBuds,#
								Num_Flowers,#
								Num_Fruit_red,#
								Num_Fruit_green,#
								Num_Fruit#
							) %>%#
							apply(1, mysum)#
	# ----------------------------------------------------------- ERROR MESSAGES#
	# There should never be observations of 0 pads, 0 height, or 0 width#
	# replace 0 with NA#
	dups <- Plant_Surveys %>% filter(Size_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Size_t equal 0.")}#
#
	dups <- Plant_Surveys %>% filter(Height_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Height_t equal 0.")}#
#
	dups <- Plant_Surveys %>% filter(Width_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Width_t equal 0.")}#
#
	dups <- Plant_Surveys %>% filter(Perpen_Width==0)#
	if (dim(dups)[1] > 0) {stop("Values for Perpen_Width equal 0.")}#
	return(Plant_Surveys)#
}#
#
#' Process Original Plant Survey Data#
#'#
#' @description I collected this data in December 2012, then gave the plants new Plant IDs. This data cannot be used for the demography study but can be used to determine plot occupancy.#
#' Steps:#
#' \itemize{#
#'  \item Fix column names#
#'  \item format dates#
#'  \item format PlantIDs#
#'  \item format convert "999" values to NA#
#'  \item format change "yes"/"no" values of the insect survey, missing, and dead columns to 0/1#
#'  \item format numeric columns#
#'  \item check for observations of 0 pads, 0 height, or 0 width; if there are observations, stop#
#' 	}#
#
#' 	}#
#'#
#' @export#
#
processOriginalPlantData <- function(Original_Plant_Data) {#
	# ------------------------------------------------------------- CHANGE NAMES#
	# remame size and height#
	Original_Plant_Data %<>% as.data.table %>%#
		setnames("Max_Height", 				"Height_t") %>%#
		setnames("Max_Width", 				"Width_t") %>%#
		setnames("CACA_Larvae", 			"CA_t") %>%#
		setnames("MEPR_Larvae", 			"ME_t") %>%#
		setnames("CHVI_Evidence", 			"CH_t") %>%#
		setnames("DACT_Evidence", 			"DA_t") %>%#
		setnames("UnknownMoth_Evidence", 	"Unknown_Moth_t") %>%#
		setnames("Old_Moth_Evidence", 		"Old_Moth_Evidence_t") %>%#
		as.data.frame#
	# formatting/preparation necessary for prepping Demographic Plant Info#
	Original_Plant_Data$Date %<>% Format_Date_Function#
	Original_Plant_Data %<>% arrange(Date)#
	# ------------------------------------------------ CONVERT ALL "999s" to NAs#
	Original_Plant_Data[,c(#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_Leaves",#
		"Perpen_Width",#
		"Width_t",#
		"Height_t",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------- INSECT SURVEYS, MISSING, DEAD - CHANGE YES, NO to 0, 1#
	Original_Plant_Data[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t")] %<>% #
		apply(2, Yes_Function#
	)#
	Original_Plant_Data[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t")] %<>%#
		apply(2, No_Function#
	)#
	Original_Plant_Data[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t")] %<>% #
		apply(2, NA_Function#
	)#
	# ------------------------------------------------------------- MAKE NUMERIC#
	Original_Plant_Data[,c(#
		"CA_t",#
		"ME_t",#
		"CH_t",#
		"DA_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_Leaves",#
		"Height_t",#
		"Width_t",#
		"Perpen_Width",#
		"Num_FlowerBuds",#
		"Num_Fruit_red",#
		"Num_Fruit_green",#
		"Num_Flowers",#
		"Num_Fruit")] %<>% #
		apply(2, as.numeric#
	)#
	# ----------------------------------------------------------- ERROR MESSAGES#
	# There should never be observations of 0 pads, 0 height, or 0 width#
	# replace 0 with NA#
	dups <- Original_Plant_Data %>% filter(Height_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Height_t equal 0.")}#
#
	dups <- Original_Plant_Data %>% filter(Width_t==0)#
	if (dim(dups)[1] > 0) {stop("Values for Width_t equal 0.")}#
#
	dups <- Original_Plant_Data %>% filter(Perpen_Width==0)#
	if (dim(dups)[1] > 0) {stop("Values for Perpen_Width equal 0.")}#
	return(Original_Plant_Data)#
}#
#' Merge Plant Info and Plant Surveys data files#
#'#
#' @description Add Island, Cluster, and Host Species information to the Plant_Surveys dataset.#
#' @param Plant_Surveys Plant Survey Dataset#
#' @param Plant_Info  Plant Information Dataset#
#'#
#' @export#
#
mergePlantSurveysPlantInfo <- function(Plant_Surveys, Plant_Info) {#
	Plant_Surveys <- Plant_Info %>%#
		dplyr::select(#
			ClusterID, #
			InDemographicStudy, #
			PlotPlantID, #
			Tag_Number, #
			Island, #
			Cluster2, #
			Network, #
			Species, #
			InBigPlantStudy, #
			N.PlotPlantIDs, #
			Easting, #
			Northing,#
			ReproductiveMode#
		) %>%#
		merge(Plant_Surveys, by = "PlotPlantID")#
	return(Plant_Surveys)#
}#
#
#' Add Sampling Period Variable#
#'#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
addSamplingPeriods <- function(Plant_Surveys) {#
	Plant_Surveys$DemographicSurvey <- "NA"#
	Plant_Surveys %<>% #
		group_by(Date) %>% #
		mutate(#
			# SURVEY 0#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date < "2013-05-14"), "0"),#
			# SURVEY 1 - SPRING/SUMMER 2013#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2013-05-14" & Date <= "2013-08-06"), "1"),#
			# SURVEY 2 - FALL/WINTER 2013/2014#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2013-12-13" & Date <= "2014-01-28"), "2"),#
			# SURVEY 3 - SPRING/SUMMER 2014#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2014-05-06" & Date <= "2014-09-24"), "3"),#
			# SURVEY 4 - WINTER 2015#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2015-01-08" & Date <= "2015-02-21"), "4"),#
			# SURVEY 5 - SPRING/SUMMER 2015#
			DemographicSurvey = replace(DemographicSurvey, #
				which(Date >= "2015-05-01"), "5"))#
	return(Plant_Surveys)#
}#
#
#' Add Sampling Year Variable#
#'#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
addSamplingYear <- function(Plant_Surveys) {#
	Plant_Surveys$SamplingYear <- NA#
	Plant_Surveys %<>% #
		group_by(Date) %>% #
		mutate(#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2012-12-02" & Date < "2013-05-01"), #
				2012#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2013-05-01" & Date < "2014-05-01"), #
				2013#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2014-05-01" & Date < "2015-05-01"), #
				2014#
			),#
			SamplingYear = replace(#
				SamplingYear, #
				which(Date >= "2015-05-01"), #
				2015#
			)#
		)#
	return(Plant_Surveys)#
}#
#
#' Determine Fruit and Flower Presence#
#'#
#' @description Create separate variables indicating whether fruit and fruit and flowers were present.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
calculateFruitPresence <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		mutate(#
			FruitPres_t 		= ifelse(Fruit_t > 0, 1, 0),#
			FruitFlowerPres_t 	= ifelse(Fruit_Flowers_t > 0, 1, 0)#
		) %>%#
		as.data.table %>%#
		# add NAs#
		.[is.na(Fruit_t), FruitPres_t := NA] %>%#
		.[is.na(Fruit_Flowers_t), FruitPres_t := NA] %>%#
		as.data.frame#
}#
#
#' Calculate Plant Volume#
#'#
#' @description Calculate plant volume as a cone, cylinder, and elliptic cylinder.#
#' @param Plant_Surveys Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
calculatePlantVolume <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		mutate(#
			Cone_t 				= pi * (((Width_t + Perpen_Width)/4)^2) * #
									Height_t / 3,#
			Cylinder_t 			= pi * ((Perpen_Width/2)^2) * Width_t,#
			Elliptic_Cylinder_t = pi * Height_t/2 * Perpen_Width/2 * Width_t#
		)#
}#
#
#' Determine if a survey was complete#
#'#
#' @param x Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
Complete_Surveys_function <- function(x){#
	ifelse(rowSums(is.na(x))==0, 1, 0)#
	return(x)#
}#
#
#' Determine whether a survey was complete#
#'#
#' @description Determine whether all data was collected during a survey.#
#' Determine complete surveys for:#
#' \itemize{#
#'  \item insect surveys#
#'  \item plant size#
#'  \item size measurements (cm)#
#'  \item fruit, flowers, and flower buds#
#'  \item all data#
#' 	}#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
determineCompleteSurveys <- function(Plant_Surveys) {#
	Plant_Surveys$complete_insect_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"CA_t",#
			"ME_t",#
			"Unknown_Moth_t",#
			"Old_Moth_Evidence_t"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_segments_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Plant_Segments_w_leaves",#
			"Plant_Segments_wo_leaves",#
			"Plant_Segments_woody"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_size_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Height_t",#
			"Width_t",#
			"Perpen_Width"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_fruit_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
			"Num_FlowerBuds",#
			"Num_Fruit_red",#
			"Num_Fruit_green",#
			"Num_Flowers"#
		)]))==0, 1, 0#
	)#
	Plant_Surveys$complete_surveys <- ifelse(rowSums(is.na(#
		Plant_Surveys[, #
		c(#
		# insects#
		"CA_t",#
		"ME_t",#
		"Unknown_Moth_t",#
		"Old_Moth_Evidence_t",#
		# number of segments#
		"Size_t",#
		"Plant_Segments_w_leaves",#
		"Plant_Segments_wo_leaves",#
		"Plant_Segments_woody",#
		# size in cm#
		"Height_t",#
		"Width_t",#
		"Perpen_Width",#
		# flowers and fruit#
		"Fruit_t" #
		)]))==0, 1, 0#
	)#
	return(Plant_Surveys)#
}#
#
#' Determine if an insect species was ever detected during the study period#
#'#
#' @description Determine if an insect species was ever detected during the study period.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
determineInsectPresenceDuringStudy <- function(Plant_Surveys) {#
	Plant_Surveys.present <- Plant_Surveys %>%#
		group_by(PlantID) %>%#
		summarise(#
			CAPresent = ifelse(sum(CA_t, na.rm=T) > 0, 1, 0),#
			MEPresent = ifelse(sum(ME_t, na.rm=T) > 0, 1, 0)#
			) %>%#
		as.data.frame()#
	Plant_Surveys %>% merge(Plant_Surveys.present, by="PlantID")#
}#
#
#' Rename Species levels#
#'#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
renameSpecies <- function(Plant_Surveys) {#
	Plant_Surveys %>% #
		as.data.table %>%#
		.[Species == "pusilla", Species := "Opuntia pusilla"] %>%#
		.[Species == "stricta", Species := "Opuntia stricta"] %>%#
		as.data.frame#
}#
#
#' Rename Convert 1/0 to Yes/No#
#'#
#' @param x Vector of 0/1 data#
#'#
#' @export#
#
Yes_No_from_1_0_Function <- function(x){#
	x[x > 0] <- "Yes"#
	x[x == 0] <- "No"#
	return(x)#
}#
#
#' Make Insect Factor Variables#
#'#
#' @description Make new insect variables with "yes"/"no" values instead of 0/1.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
createInsectFactorVariables <- function(Plant_Surveys) {#
	Plant_Surveys$C_cactorum 	<- Plant_Surveys$CA_t#
	Plant_Surveys$M_prodenialis <- Plant_Surveys$ME_t#
	Plant_Surveys[,c(#
		"C_cactorum",#
		"M_prodenialis")] %<>%#
		apply(., 2, Yes_No_from_1_0_Function) %>%#
		apply(., 2, as.factor#
	)#
	return(Plant_Surveys)#
}#
#
#' Format as Factors#
#'#
#' @description Format variables as factors.#
#' @param Plant_Surveys Plant Survey Dataset#
#'#
#' @export#
#
formatasFactors <- function(x) {#
	factors <- c("ClusterID", "Network", "Island", "Species", #
		"DemographicSurvey", "SamplingYear", "Year", "Season", "C_cactorum", #
		"M_prodenialis")#
	for (i in 1:length(factors)) {#
		if (factors[i] %in% names(x)) {#
			x[, factors[i]] %<>% as.factor#
		}#
	}#
	return(x)#
}#
#
#' Process Plant Survey Data#
#'#
#' @description Steps:#
#' \itemize{#
#'  \item add column, "DemographicSurvey"#
#'	\itemize{#
#'		\item survey 1 - spring/summer 2013#
#'		\item survey 2 - fall/winter 2013/2014#
#'		\item survey 3 - spring/summer 2014#
#'		\item survey 4 - winter 2015#
#'		\item survey 5 - spring/summer 2015#
#'	}#
#'  \item addSamplingYear#
#'	\itemize{#
#'		\item 2012 - Date >= "2012-12-02" & Date < "2013-05-01"#
#'		\item 2013 - Date >= "2013-05-01" & Date < "2014-05-01"#
#'		\item 2014 - Date >= "2014-05-01" & Date < "2015-05-01"#
#'		\item 2015 - Date >= "2015-05-01"#
#'	}#
#' }#
#'#
#' @export#
#
processPlantSurveysafterMergewPlantInfo <- function(Plant_Surveys) {#
	Plant_Surveys %>%#
		filter(InBigPlantStudy!="yes" & InBigPlantStudy!="Yes") %>%#
		addSamplingPeriods %>%#
		addSamplingYear %>%#
		as.data.frame#
}#
#' Process Plant Survey Data, per plant#
#'#
#' @description Steps:#
#' \itemize{#
#'  	\item merge records for the same plant from multiple plots; the data to be merged must have been collected on the same day.#
#'  	\item Create separate variables indicating whether fruit and fruit and flowers were present#
#'  	\item Calculate plant volume as a cone, cylinder, and elliptic cylinder#
#'  	\item Determine if an insect species was ever detected during the study period#
#'  	\item Rename species levels ("Opuntia stricta" instead of "stricta" and "Opuntia pusilla" instead of "pusilla")#
#' 	 	\item Make new insect variables with "yes"/"no" values instead of 0/1, named "C_cactorum" and "M_prodenialis"#
#'  	\item format the variables "ClusterID", "Network", "Island", "Species", "DemographicSurvey", "SamplingYear", "Year", "Season", "C_cactorum", "M_prodenialis" as factors#
#' 	}#
#'#
#' @export#
processSurveysMergedbyPlant <- function(Plant_Surveys) {#
	Plant_Surveys %>%#
		mergePlantRecordsfromMultiplePlots %>%#
		calculateFruitPresence %>%#
		calculatePlantVolume %>%#
		determineInsectPresenceDuringStudy %>%#
		renameSpecies %>%#
		createInsectFactorVariables %>%#
		formatasFactors#
}
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# --------------------------------------------------------------------------- ##
# --------------- Demographic Plot Surveys --------------------------------- ##
# --------------------------------------------------------------------------- ##
#
########################## ERROR MESSAGE#
# check first duplicate data entries#
dups <- Plant_Surveys %>% #
	group_by(PlantID, DateSurveyed) %>%#
	summarise(n.obs = length(Plant_collected)) %>%#
	filter(n.obs > 1)#
#
if (dim(dups)[1] > 0) {#
		stop("Duplicates observations for a PlantID, Date combination are #
			present in the dataset.")#
}#
#
# check for PlantID = NA#
dups <- Plant_Surveys %>% #
	filter(is.na(PlantID))#
#
if (dim(dups)[1] > 0) {#
		stop("NA values for PlantID.")#
}#
# --------------------------------------------------------------------------- ##
#
D_Plot_Surveys$Date %<>% as.Date("%m/%d/%Y")#
#
Plant_Surveys %<>% processPlantSurveys#
#
# --------------------------------------------------------------------------- ##
# --------------------------------------------------------------------------- ##
Plant_Info %<>% processPlantInfo(Plot_Info)#
Plant_Surveys %<>% mergePlantSurveysPlantInfo(Plant_Info)
setwd('/Users/KSauby/Documents/Projects/GTMNERR_analysis/munge')
# ---------------------------------------------------------- Shorten names#
Plot_Info <- OccupancySRSWOR.Plot.Surveys.Info#
Plot_Surveys <- OccupancySRSWOR.Plot.Surveys#
Plant_Surveys <- Demographic.Plant.Surveys#
Plant_Info <- Demographic.Plant.Info#
D_Plot_Surveys <- Demographic.Plot.Surveys#
Original_Plant_Data <- Original.Demographic.Plant.Data#
Seed_Abundance <- Seed.Abundance#
Seed_Abundance_Surveys <- Seed.Abundance.Surveys#
GIS_data_updated <- GIS.data.updated
head(Plot_Info)
setwd('/Users/KSauby/Documents/Projects/dataproc/R')
Plant_Info <- Plot_Info %>%#
		select(#
			Island, #
			Tag_Number, #
			Cluster, #
			Cluster2, #
			Network, #
			Sampling, #
			SurveyOrder#
		) %>%#
		merge(Plant_Info, by = "Tag_Number", all.y=TRUE) %>%#
		as.data.table %>%#
		setnames("HostSpecies", "Species") %>%#
		as.data.frame
library(magrittr)
Plant_Info <- Plot_Info %>%#
		select(#
			Island, #
			Tag_Number, #
			Cluster, #
			Cluster2, #
			Network, #
			Sampling, #
			SurveyOrder#
		) %>%#
		merge(Plant_Info, by = "Tag_Number", all.y=TRUE) %>%#
		as.data.table %>%#
		setnames("HostSpecies", "Species") %>%#
		as.data.frame
head(Plot_Info)
